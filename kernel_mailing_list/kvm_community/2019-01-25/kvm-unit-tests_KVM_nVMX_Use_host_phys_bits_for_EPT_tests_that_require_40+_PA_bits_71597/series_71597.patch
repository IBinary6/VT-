From patchwork Fri Jan 25 17:46:17 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Sean Christopherson <sean.j.christopherson@intel.com>
X-Patchwork-Id: 10781755
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id D9119746
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 25 Jan 2019 17:46:26 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C60532E68B
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 25 Jan 2019 17:46:26 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id B83CA2E916; Fri, 25 Jan 2019 17:46:26 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,MAILING_LIST_MULTI,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 21DF02E68B
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 25 Jan 2019 17:46:26 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729327AbfAYRqY (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 25 Jan 2019 12:46:24 -0500
Received: from mga04.intel.com ([192.55.52.120]:17597 "EHLO mga04.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726311AbfAYRqY (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 25 Jan 2019 12:46:24 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga006.jf.intel.com ([10.7.209.51])
  by fmsmga104.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 25 Jan 2019 09:46:24 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,522,1539673200";
   d="scan'208";a="111086277"
Received: from sjchrist-coffee.jf.intel.com ([10.54.74.14])
  by orsmga006.jf.intel.com with ESMTP; 25 Jan 2019 09:46:24 -0800
From: Sean Christopherson <sean.j.christopherson@intel.com>
To: Paolo Bonzini <pbonzini@redhat.com>,
 =?utf-8?b?UmFkaW0gS3LEjW3DocWZ?= <rkrcmar@redhat.com>
Cc: kvm@vger.kernel.org
Subject: [kvm-unit-tests PATCH] KVM: nVMX: Use host_phys_bits for EPT tests
 that require 40+ PA bits
Date: Fri, 25 Jan 2019 09:46:17 -0800
Message-Id: <20190125174617.18442-1-sean.j.christopherson@intel.com>
X-Mailer: git-send-email 2.20.1
MIME-Version: 1.0
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

The EPT tests require at least 40 bits of physical address space so that
they can use a separate EPT L4 entry to hold guest data.  Qemu defaults
to 40 bits for the size of the guest PA, which causes the tests' check
against CPUID to always pass regardless of the system's actual PA space.
This results in unexpected reserved-bit page faults due to attempting to
access a GPA beyond the physical address width of the system, i.e. bit
39 is reserved.

Pass host_phys_bits for the tests to instruct Qemu to use the host's PA
bits.  Qemu has supported this option since v2.7, which was released in
2016, before the introduction of the EPT tests in 2017.

GPA bits mapped to EPT levels:

    Offset: 11:0
    EPT L1: 20:12
    EPT L2: 29:21
    EPT L3: 38:30
    EPT L4: 47:39
    EPT L5: 56:48

Fixes: 359575f ("x86: ept access tests")
Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
---
 x86/unittests.cfg | 40 ++++++++++++++++++++--------------------
 1 file changed, 20 insertions(+), 20 deletions(-)

diff --git a/x86/unittests.cfg b/x86/unittests.cfg
index d7975e9..64ecb43 100644
--- a/x86/unittests.cfg
+++ b/x86/unittests.cfg
@@ -412,121 +412,121 @@ groups = vmx
 
 [vmx_ept_access_test_not_present]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_not_present
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_not_present
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_read_only]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_read_only
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_read_only
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_write_only]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_write_only
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_write_only
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_read_write]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_read_write
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_read_write
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_execute_only]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_execute_only
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_execute_only
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_read_execute]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_read_execute
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_read_execute
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_write_execute]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_write_execute
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_write_execute
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_read_write_execute]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_read_write_execute
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_read_write_execute
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_reserved_bits]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_reserved_bits
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_reserved_bits
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_ignored_bits]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_ignored_bits
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_ignored_bits
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_paddr_not_present_ad_disabled]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_paddr_not_present_ad_disabled
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_paddr_not_present_ad_disabled
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_paddr_not_present_ad_enabled]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_paddr_not_present_ad_enabled
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_paddr_not_present_ad_enabled
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_paddr_read_only_ad_disabled]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_paddr_read_only_ad_disabled
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_paddr_read_only_ad_disabled
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_paddr_read_only_ad_enabled]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_paddr_read_only_ad_enabled
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_paddr_read_only_ad_enabled
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_paddr_read_write]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_paddr_read_write
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_paddr_read_write
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_paddr_read_write_execute]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_paddr_read_write_execute
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_paddr_read_write_execute
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_paddr_read_execute_ad_disabled]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_paddr_read_execute_ad_disabled
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_paddr_read_execute_ad_disabled
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_paddr_read_execute_ad_enabled]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_paddr_read_execute_ad_enabled
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_paddr_read_execute_ad_enabled
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_paddr_not_present_page_fault]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_paddr_not_present_page_fault
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_paddr_not_present_page_fault
 arch = x86_64
 groups = vmx
 
 [vmx_ept_access_test_force_2m_page]
 file = vmx.flat
-extra_params = -cpu host,+vmx -m 2560 -append ept_access_test_force_2m_page
+extra_params = -cpu host,host-phys-bits,+vmx -m 2560 -append ept_access_test_force_2m_page
 arch = x86_64
 groups = vmx
 
