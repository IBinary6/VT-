From patchwork Tue Aug 28 22:12:55 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10579217
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id F3BFE14E1
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 28 Aug 2018 22:13:43 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E48452A621
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 28 Aug 2018 22:13:43 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D851A2ABC6; Tue, 28 Aug 2018 22:13:43 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0278B2A621
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 28 Aug 2018 22:13:43 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727443AbeH2CG4 (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Tue, 28 Aug 2018 22:06:56 -0400
Received: from mail-eopbgr720088.outbound.protection.outlook.com
 ([40.107.72.88]:47232
        "EHLO NAM05-CO1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727261AbeH2CGz (ORCPT <rfc822;kvm@vger.kernel.org>);
        Tue, 28 Aug 2018 22:06:55 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=22cdJG5zL895cnj26ejpU8WVQBQQHhLP0FQR6QXm730=;
 b=L3u9tz6FbmLOolPVJh5xRaFlE/okQ+cFWxlN+cQKJonOOrrK70FtCdD0epBMPqIdGewKhKgUf6PRVtnUU3Jfe1kZ0TwSo2jgOr+Gll/CmCEOffv8Y5joKkMotcxQEXX2ujMuTnhaSpCE91yozU3vsppstlwKsBTO6M6YD4aFGyg=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 DM6PR12MB2682.namprd12.prod.outlook.com (2603:10b6:5:4a::31) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1080.15; Tue, 28 Aug 2018 22:13:08 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>, stable@vger.kernel.org,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v2 1/3] x86/mm: Restructure sme_encrypt_kernel()
Date: Tue, 28 Aug 2018 17:12:55 -0500
Message-Id: <1535494377-25600-2-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1535494377-25600-1-git-send-email-brijesh.singh@amd.com>
References: <1535494377-25600-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: MWHPR19CA0010.namprd19.prod.outlook.com
 (2603:10b6:300:d4::20) To DM6PR12MB2682.namprd12.prod.outlook.com
 (2603:10b6:5:4a::31)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 0a7e6aed-64f2-4373-446d-08d60d3370fb
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:DM6PR12MB2682;
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2682;3:GNLXPybGosJF2efH0+sqPqG7ee5589e1VoNiRH3+JpQuSfY0ZxC/A3gPd36hgRCZOyS939T2BI1OaBfsVdkebBSJnQN9IKteko2JWz8meXkakh+Qey/UJNXJY1jaMk1yUvyWta8U22sJOmvymycshweVBqeK9n1Fu4eLgFmjEIGTnJr31aDsYYh8qPhTaaNudeDf+OA/kYdWVkwwML81E7nH/XZJDH3X3SRBLMq4CP7unAXqA38jxsMoa8aZjSrQ;25:IgPnMhXLnW5vEHHO8m10RRRHPKaWm/9GVQgC1CXdzEr84IYX9yuQO+wX7eYsMrBMTuoagTasJo1/vfj0ckk0yQ71/4HGLLo98sgHShRGhFxygQMkacNTfjiD3FwJd1GD6z4yc7MA56dIb9fh5fJ7AlYLLo7GYdx/pGAR9f1y02iAfHQk+psRqy8yGi18vNasoq2epY7aZ0lmMi/6lx4Sa6fva8DpoEKMIhTKXfcDy4AIT+WOZwZU9P/7TuMZZx/LvCCKr2yEkdGBieHhQXDbRzN9RyZI/6EbXd76J5P/ha8Uo0znQWB4ovb1WB5cNxTZn013nKQI8Mp+9qwl+HBEbw==;31:98eanQHlyBhbwSiGZZhmMoOdmMmuT7jvcHIggTASXXVfBbHsX+4eeDYqqNsHSQZP47bvmIGj8Nq0NNSnaBH815ZAJmSjQTcd6LAyog4NohqBIyAgY65nORlAgEJTrchrQI3QqIRExtGp7ue3KEIQByr0jxN0+w3IGBkFjLu0zh0+AyOcu66KKE7dGVRpYKtGbYJKxQB48hJ/+omVv3b0p7FuFFyksw4n5SPBqGubgcc=
X-MS-TrafficTypeDiagnostic: DM6PR12MB2682:
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2682;20:nyQBF8L3zotX0SgeVLKRMZkr5W6xR+khneFulOIY+KebRbYwZ9cUrnsGiAgF3S1pG3OV6nfeL0hWuTq6sCWbPB+L7MjIIEHj+MWWu38NAd8s/CjPDxoVYQUAuPyzAiOygpOipg40d1nBEFPgZRJfY5LFRVI+JFP/Ljq7fq9Fj+Ns6qGr/W6/oh0uZvcKzKfd6Kv1kqhgKLz0t1Mwtytp8dUUH7WvnBTseFnvO5l0RgxOFgOny1cInSQKDLWiIS/b49FVQ+606uh23erQex3M6jKuRIBxTQOirCv3x+QCDRbzz+qehmwale7J6CV3iAcC8HId+cPDgbve7QMjryxVA5/vKE8QJ0q179FZ34Fle7nOgJ0B5V4lcMuVu7RoSJZDcizKM0TG2TNWIJwzQ7LUA1CpS2MlllbFLX2XezWmL0fZC914esgTy1iq6fxg27HuMhLoG6mOsKf7LMJhB2PrKldprE5XKX6Y5k3CFqCwmir0TuTA8UkGptZL6raDeTFP;4:+07+62TbqXAnAUjyQgXv+5u5J9X/79+yE/jmTV08+VZDmFqvlJ/qFSubZqTJetnndCwl7h9eVon/5UUwsAw3qwm7vJf+hUfS7BAGeNBO9gPfypHSFICLFp2Rv8/yA1UNQML89uNcciuG5Wc30/QZZBNpgcRTSltDevYdIwDfGE7QWjaRZaVK/RopAK1RxHrtIppkzmmbo/SQU2TX0pd8ecGGVdy3pm0BSBtrVMdgNksLDZuYO9yN3D+AHIIVBeLdL2Bc+s3JgvpDxIBlDEiEtG+HiZt4rN3Raa6a68yHjkY/dk7ghlY+2lljqkhlJwcuH43b/3V3vVotRXwy3f4XQGUFWHUY02SZkPARyU95B4mcwgI0yYpkLxYEJBQTUWzP
X-Microsoft-Antispam-PRVS: 
 <DM6PR12MB2682A67E06E0EB235A183C66E50A0@DM6PR12MB2682.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(3231311)(944501410)(52105095)(10201501046)(93006095)(93001095)(3002001)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123558120)(20161123562045)(20161123564045)(201708071742011)(7699016);SRVR:DM6PR12MB2682;BCL:0;PCL:0;RULEID:;SRVR:DM6PR12MB2682;
X-Forefront-PRVS: 077884B8B5
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(396003)(136003)(376002)(39860400002)(346002)(366004)(199004)(189003)(186003)(50226002)(52116002)(7696005)(7416002)(4326008)(305945005)(7736002)(105586002)(8676002)(106356001)(478600001)(97736004)(23676004)(386003)(316002)(53416004)(16526019)(68736007)(25786009)(76176011)(26005)(54906003)(2870700001)(86362001)(66066001)(36756003)(47776003)(6116002)(3846002)(6666003)(5660300001)(2906002)(81166006)(11346002)(81156014)(956004)(50466002)(2616005)(14444005)(486006)(476003)(8936002)(44832011)(446003)(53936002)(6486002);DIR:OUT;SFP:1101;SCL:1;SRVR:DM6PR12MB2682;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BDM6PR12MB2682=3B23=3A5ojKzYU?=
	=?utf-8?q?vUD/2WO+4IMe435RkBimPVcVFFErwjVHSOsr5fT6ZF5o+rKx5428gqr0WIOezSEdw?=
	=?utf-8?q?O3CWvgAduMcIifxE8w6HrpzDDDP+wUt0oUXDO3p2igrc0mhtXrBH21RrIJBd7KYvE?=
	=?utf-8?q?JceR2baNQ36MLBLEWIE8TmVWWYcKReJUkJWeukZfSKF6TQ4dws6aEKBx9K9zOzKtu?=
	=?utf-8?q?tYf2p0HFxiVmQp77nTBY5rb0l1ZOzlqfNktz8r2o6Glylic6xxL4BvdQXYlWS8jT/?=
	=?utf-8?q?FJg49p7H9ThoQu9auFqUu5wuhH0spqJAz1p25EW+LmWgda+e6y0EDf91mt+angZnG?=
	=?utf-8?q?mU/TbKmJ+BU84VVWsV9JCE3Nah8MUWaVz4p31FhpzDRDhXlI2frDmZlkkQ0k/k7Os?=
	=?utf-8?q?McrXRJaOtl9QZ/irMHxo6G+8XeozmBc/C8W+96Spfi+DSLYbLdLChQNAKBLL0M6/3?=
	=?utf-8?q?IYTIDSbGb5AXSt2ZPqeL68P3ZSJJea7x7oAnSN/EBk9vqSbUHh9vIebNTodD7trCA?=
	=?utf-8?q?EjNyQaPxdolloe2ZOdqVAvR8Ii9nPbXz5l3hy6wlJhoWJmhy50BE4xGsyr6EuOvYl?=
	=?utf-8?q?Wi2csF7kJzCrCeRoYI9t2fiu0h/9lruLCz6faCpsQRfNAAU9A3EFvDitFHLarFCbh?=
	=?utf-8?q?LQ+ObI3C5d+ET3bypxty2PC9nfhUFW89bknHBwbcFCeTmmDh8TMC3LTzNrHT5YfYK?=
	=?utf-8?q?LOP2LiogKsFqn8YHMhDVyhxt6xHAHw7199rZaaM91WRH5L5aZ0yIpq67HNDVjkpp2?=
	=?utf-8?q?llXWBpHveQksjk1WxcK5LkAU0F+q8A+fYmD7aKG+fv1FfKWXeFkHpc4tYKG7XW5GC?=
	=?utf-8?q?nNhiG6Oo1iBAt6bvmFOsyDbfLRnSNfvlhc2uwwRwdhH7SSXl7ml0PU7CmaFae0cAY?=
	=?utf-8?q?kxnDCoDupw9mFgYFmKvM1p46Z7NeS2F3+GeWX12yxqHf4xkEtGUx5P+1uoqWXM7l6?=
	=?utf-8?q?+aqoL+ipkU+9eP9cpyOiyp46g0xb+lP+Bdk2j5AfYWKewrvWDPoh32XqHpnfuev/j?=
	=?utf-8?q?Ruq0+JakuGPQd8U6b5ZPrpg8qCXzTQHaSyW7odHq/DME7IVLH2yFt1FBsjqemkRj1?=
	=?utf-8?q?5vqNvbVWGo7U8jDx+4ZGhGaarTu1I5A8B5vKP1iGVVeU2rgR4ct1PxMK9S5+3/xxy?=
	=?utf-8?q?HZL0sC3JwCalBJLh9wPrA2j8qcMJjoQIYwIfyvD?=
X-Microsoft-Antispam-Message-Info: 
 jhVFWJcvGMsMSSR/oHq+x1L5VQrtGkzpMXurOwPbR/HVAg2CztNNhQEW6Wk1R5mlH7bEkDlY+/xFPouHH0cFs8GVUOy4C7W++pFpMnsGcaTt1UmW6dQb3S9pokSywBDQ7WFMM1iQseOfRfsNiVoe7m9t3GJjsAMu5/TGjvx19a5ch8NTU2Th++KljnPJk8H2Tyqor5+J6k4tdfgLO8Z6m97OjrJtVEhPzkxdGKlQWwAJO7pcucPo3O6NGcYmviI+MeI7SFCu5a2OUr83Sqdamu4WHNdj1fl97/Ted9bRZbVga4HH9os3th0bcahQl3mIUKh+MoOCNZX5NcXUo9LehA0qR2MgjX95bb8QbUyjp+8=
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2682;6:OWYABNPQc4U9nTRlHdvYS5y5yn4jRo2iyoUboGIVlH8j1efwC2ymERYIrhlEncC2GhVxpHXlg2wbR/mMSRRutrBMUGi9yFWejFVpSx8MxkEG35WIQbdiqhA/sXkkf565IpLCGw9/EryqNwnRscjU6Y+yVPxALXT95SKoJqEp00IxToYgYDd6+lWuS7rXj1sgI0feT38PcUQYJM4CHfBWnxpL6jtBiaopbZ4S+4FvA0DOAwhjjmFm2hwdpnOO/OA9a1r5GckgMPhz8/nUa9wfN+c5/eafKiM4m8B+Wp6yWRoxSdTfXw72mAsLHCKOZrGKuAeiEMZvnABxZyispFysWBOsNfmltnKcUtLOyakhFB4r9vB8QfLUl5pnPkolow9OXCPPS5OrNosLMnC3azv9T9kRjMBOoIuY4fvIl9TKSz5EyFfpIx7YinE8yFO+sN5Fbkm8AYF/+iBxZUge3WHdWQ==;5:CmBydy+4d3/yqygjZbY9Nt4MpVTLlIfUmes1czHwkfV7ACpERl2V0PvaShWllJxk93vs0l/p6ls+0SkUh+QWzZ4rdAzYEnAP8QT/mN1nMI36umIOv9xhLXgmL4djxX24MNOUdFC7QGxDPgsQFG8UVLCZSNOusSVmi3qjGRzCLhI=;7:/mVPbAtDpzYXCIEjO237IbxAMk5speozX+x4Jh2Nz8pQGuJJUIixGDmHNt3bPqr7ZrjlWdUP7raQKXlH7Q9pS36kNCfzXZEqlg/K0k/yiDtw9rfS9mx9DP4arhr9MOyM2MRdcdWBxFtUyBRpnAWqwxK6+8Y4JhU3XNXSRkhSfSiofaSI8UUA5o4xsb6w8nDpmrj8mBSDgy9GtA30mcEpFofF1Vwaa3AYG7aSzIMWaWYK6AnYTHoWqubuPX425llG
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2682;20:2mYjZYdP4UR2qLtApjWK9NwDHqXQOFrqJOXpgI9SWpn0deezTULSNqNOXMcmgSUdxV9TTAY4vuAv4CisMqTL3v/kZM1VBk+BafyLWmTHu88cze7LEAWwrczIFHqd8coze8KxK30U5/0UaF7W0H2KYTTcEeJdK4mD/IQmL5DIjayYw4CMBygqrBpj0NQwqdW4Pbd8+ArNEe5FbJNkTFS6PWYnICsfJvwuS9Qiwl0aQW8AfKs3JvaP5+v1svGYhiW9
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 28 Aug 2018 22:13:08.9043 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 0a7e6aed-64f2-4373-446d-08d60d3370fb
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR12MB2682
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Re-arrange the sme_encrypt_kernel() by moving the workarea map/unmap
logic in a separate static function. There are no logical changes in this
patch. The restructuring will allow us to expand the sme_encrypt_kernel
in future.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Cc: stable@vger.kernel.org
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: kvm@vger.kernel.org
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/mm/mem_encrypt_identity.c | 160 ++++++++++++++++++++++++-------------
 1 file changed, 104 insertions(+), 56 deletions(-)

diff --git a/arch/x86/mm/mem_encrypt_identity.c b/arch/x86/mm/mem_encrypt_identity.c
index 7ae3686..bf6097e 100644
--- a/arch/x86/mm/mem_encrypt_identity.c
+++ b/arch/x86/mm/mem_encrypt_identity.c
@@ -72,6 +72,22 @@ struct sme_populate_pgd_data {
 	unsigned long vaddr_end;
 };
 
+struct sme_workarea_data {
+	unsigned long kernel_start;
+	unsigned long kernel_end;
+	unsigned long kernel_len;
+
+	unsigned long initrd_start;
+	unsigned long initrd_end;
+	unsigned long initrd_len;
+
+	unsigned long workarea_start;
+	unsigned long workarea_end;
+	unsigned long workarea_len;
+
+	unsigned long decrypted_base;
+};
+
 static char sme_cmdline_arg[] __initdata = "mem_encrypt";
 static char sme_cmdline_on[]  __initdata = "on";
 static char sme_cmdline_off[] __initdata = "off";
@@ -266,19 +282,17 @@ static unsigned long __init sme_pgtable_calc(unsigned long len)
 	return entries + tables;
 }
 
-void __init sme_encrypt_kernel(struct boot_params *bp)
+static void __init build_workarea_map(struct boot_params *bp,
+				      struct sme_workarea_data *wa,
+				      struct sme_populate_pgd_data *ppd)
 {
 	unsigned long workarea_start, workarea_end, workarea_len;
 	unsigned long execute_start, execute_end, execute_len;
 	unsigned long kernel_start, kernel_end, kernel_len;
 	unsigned long initrd_start, initrd_end, initrd_len;
-	struct sme_populate_pgd_data ppd;
 	unsigned long pgtable_area_len;
 	unsigned long decrypted_base;
 
-	if (!sme_active())
-		return;
-
 	/*
 	 * Prepare for encrypting the kernel and initrd by building new
 	 * pagetables with the necessary attributes needed to encrypt the
@@ -358,17 +372,17 @@ void __init sme_encrypt_kernel(struct boot_params *bp)
 	 * pagetables and when the new encrypted and decrypted kernel
 	 * mappings are populated.
 	 */
-	ppd.pgtable_area = (void *)execute_end;
+	ppd->pgtable_area = (void *)execute_end;
 
 	/*
 	 * Make sure the current pagetable structure has entries for
 	 * addressing the workarea.
 	 */
-	ppd.pgd = (pgd_t *)native_read_cr3_pa();
-	ppd.paddr = workarea_start;
-	ppd.vaddr = workarea_start;
-	ppd.vaddr_end = workarea_end;
-	sme_map_range_decrypted(&ppd);
+	ppd->pgd = (pgd_t *)native_read_cr3_pa();
+	ppd->paddr = workarea_start;
+	ppd->vaddr = workarea_start;
+	ppd->vaddr_end = workarea_end;
+	sme_map_range_decrypted(ppd);
 
 	/* Flush the TLB - no globals so cr3 is enough */
 	native_write_cr3(__native_read_cr3());
@@ -379,9 +393,9 @@ void __init sme_encrypt_kernel(struct boot_params *bp)
 	 * then be populated with new PUDs and PMDs as the encrypted and
 	 * decrypted kernel mappings are created.
 	 */
-	ppd.pgd = ppd.pgtable_area;
-	memset(ppd.pgd, 0, sizeof(pgd_t) * PTRS_PER_PGD);
-	ppd.pgtable_area += sizeof(pgd_t) * PTRS_PER_PGD;
+	ppd->pgd = ppd->pgtable_area;
+	memset(ppd->pgd, 0, sizeof(pgd_t) * PTRS_PER_PGD);
+	ppd->pgtable_area += sizeof(pgd_t) * PTRS_PER_PGD;
 
 	/*
 	 * A different PGD index/entry must be used to get different
@@ -399,75 +413,109 @@ void __init sme_encrypt_kernel(struct boot_params *bp)
 	decrypted_base <<= PGDIR_SHIFT;
 
 	/* Add encrypted kernel (identity) mappings */
-	ppd.paddr = kernel_start;
-	ppd.vaddr = kernel_start;
-	ppd.vaddr_end = kernel_end;
-	sme_map_range_encrypted(&ppd);
+	ppd->paddr = kernel_start;
+	ppd->vaddr = kernel_start;
+	ppd->vaddr_end = kernel_end;
+	sme_map_range_encrypted(ppd);
 
 	/* Add decrypted, write-protected kernel (non-identity) mappings */
-	ppd.paddr = kernel_start;
-	ppd.vaddr = kernel_start + decrypted_base;
-	ppd.vaddr_end = kernel_end + decrypted_base;
-	sme_map_range_decrypted_wp(&ppd);
+	ppd->paddr = kernel_start;
+	ppd->vaddr = kernel_start + decrypted_base;
+	ppd->vaddr_end = kernel_end + decrypted_base;
+	sme_map_range_decrypted_wp(ppd);
 
 	if (initrd_len) {
 		/* Add encrypted initrd (identity) mappings */
-		ppd.paddr = initrd_start;
-		ppd.vaddr = initrd_start;
-		ppd.vaddr_end = initrd_end;
-		sme_map_range_encrypted(&ppd);
+		ppd->paddr = initrd_start;
+		ppd->vaddr = initrd_start;
+		ppd->vaddr_end = initrd_end;
+		sme_map_range_encrypted(ppd);
 		/*
 		 * Add decrypted, write-protected initrd (non-identity) mappings
 		 */
-		ppd.paddr = initrd_start;
-		ppd.vaddr = initrd_start + decrypted_base;
-		ppd.vaddr_end = initrd_end + decrypted_base;
-		sme_map_range_decrypted_wp(&ppd);
+		ppd->paddr = initrd_start;
+		ppd->vaddr = initrd_start + decrypted_base;
+		ppd->vaddr_end = initrd_end + decrypted_base;
+		sme_map_range_decrypted_wp(ppd);
 	}
 
 	/* Add decrypted workarea mappings to both kernel mappings */
-	ppd.paddr = workarea_start;
-	ppd.vaddr = workarea_start;
-	ppd.vaddr_end = workarea_end;
-	sme_map_range_decrypted(&ppd);
+	ppd->paddr = workarea_start;
+	ppd->vaddr = workarea_start;
+	ppd->vaddr_end = workarea_end;
+	sme_map_range_decrypted(ppd);
 
-	ppd.paddr = workarea_start;
-	ppd.vaddr = workarea_start + decrypted_base;
-	ppd.vaddr_end = workarea_end + decrypted_base;
-	sme_map_range_decrypted(&ppd);
+	ppd->paddr = workarea_start;
+	ppd->vaddr = workarea_start + decrypted_base;
+	ppd->vaddr_end = workarea_end + decrypted_base;
+	sme_map_range_decrypted(ppd);
 
-	/* Perform the encryption */
-	sme_encrypt_execute(kernel_start, kernel_start + decrypted_base,
-			    kernel_len, workarea_start, (unsigned long)ppd.pgd);
+	wa->kernel_start = kernel_start;
+	wa->kernel_end = kernel_end;
+	wa->kernel_len = kernel_len;
 
-	if (initrd_len)
-		sme_encrypt_execute(initrd_start, initrd_start + decrypted_base,
-				    initrd_len, workarea_start,
-				    (unsigned long)ppd.pgd);
+	wa->initrd_start = initrd_start;
+	wa->initrd_end = initrd_end;
+	wa->initrd_len = initrd_len;
+
+	wa->workarea_start = workarea_start;
+	wa->workarea_end = workarea_end;
+	wa->workarea_len = workarea_len;
+
+	wa->decrypted_base = decrypted_base;
+}
 
+static void __init remove_workarea_map(struct sme_workarea_data *wa,
+				       struct sme_populate_pgd_data *ppd)
+{
 	/*
 	 * At this point we are running encrypted.  Remove the mappings for
 	 * the decrypted areas - all that is needed for this is to remove
 	 * the PGD entry/entries.
 	 */
-	ppd.vaddr = kernel_start + decrypted_base;
-	ppd.vaddr_end = kernel_end + decrypted_base;
-	sme_clear_pgd(&ppd);
-
-	if (initrd_len) {
-		ppd.vaddr = initrd_start + decrypted_base;
-		ppd.vaddr_end = initrd_end + decrypted_base;
-		sme_clear_pgd(&ppd);
+	ppd->vaddr = wa->kernel_start + wa->decrypted_base;
+	ppd->vaddr_end = wa->kernel_end + wa->decrypted_base;
+	sme_clear_pgd(ppd);
+
+	if (wa->initrd_len) {
+		ppd->vaddr = wa->initrd_start + wa->decrypted_base;
+		ppd->vaddr_end = wa->initrd_end + wa->decrypted_base;
+		sme_clear_pgd(ppd);
 	}
 
-	ppd.vaddr = workarea_start + decrypted_base;
-	ppd.vaddr_end = workarea_end + decrypted_base;
-	sme_clear_pgd(&ppd);
+	ppd->vaddr = wa->workarea_start + wa->decrypted_base;
+	ppd->vaddr_end = wa->workarea_end + wa->decrypted_base;
+	sme_clear_pgd(ppd);
 
 	/* Flush the TLB - no globals so cr3 is enough */
 	native_write_cr3(__native_read_cr3());
 }
 
+void __init sme_encrypt_kernel(struct boot_params *bp)
+{
+	struct sme_populate_pgd_data ppd;
+	struct sme_workarea_data wa;
+
+	if (!sme_active())
+		return;
+
+	build_workarea_map(bp, &wa, &ppd);
+
+	/* When SEV is active, encrypt kernel and initrd */
+	sme_encrypt_execute(wa.kernel_start,
+			    wa.kernel_start + wa.decrypted_base,
+			    wa.kernel_len, wa.workarea_start,
+			    (unsigned long)ppd.pgd);
+
+	if (wa.initrd_len)
+		sme_encrypt_execute(wa.initrd_start,
+				    wa.initrd_start + wa.decrypted_base,
+				    wa.initrd_len, wa.workarea_start,
+				    (unsigned long)ppd.pgd);
+
+	remove_workarea_map(&wa, &ppd);
+}
+
 void __init sme_enable(struct boot_params *bp)
 {
 	const char *cmdline_ptr, *cmdline_arg, *cmdline_on, *cmdline_off;

From patchwork Tue Aug 28 22:12:56 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10579215
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id F08D914E1
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 28 Aug 2018 22:13:30 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E310A2A621
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 28 Aug 2018 22:13:30 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D6E992ABC6; Tue, 28 Aug 2018 22:13:30 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E34C22A621
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 28 Aug 2018 22:13:29 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727524AbeH2CG6 (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Tue, 28 Aug 2018 22:06:58 -0400
Received: from mail-eopbgr720088.outbound.protection.outlook.com
 ([40.107.72.88]:47232
        "EHLO NAM05-CO1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727245AbeH2CG4 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Tue, 28 Aug 2018 22:06:56 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Z95SsxDw8SM9uYWCWbZUbnp/BOF09SLG3TtrAvNJomw=;
 b=ztRuyreQksFELF2SuDdV6V84oqJ1DcLCHCW6cpIf6pQo3tQhz6umbHStn1B/yHJTHccJKOlg/yfocrNCvkIEV4V2+dWF6hxoEMteAmk1Yp7vmZ+1dTC/poz2xWTS04lO1U4BSkVQ24eg8SdblWfffROwoUOSp/zNnYxkxdspw2I=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 DM6PR12MB2682.namprd12.prod.outlook.com (2603:10b6:5:4a::31) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1080.15; Tue, 28 Aug 2018 22:13:11 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>, stable@vger.kernel.org,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v2 2/3] x86/mm: add .data..decrypted section to hold shared
 variables
Date: Tue, 28 Aug 2018 17:12:56 -0500
Message-Id: <1535494377-25600-3-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1535494377-25600-1-git-send-email-brijesh.singh@amd.com>
References: <1535494377-25600-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: MWHPR19CA0010.namprd19.prod.outlook.com
 (2603:10b6:300:d4::20) To DM6PR12MB2682.namprd12.prod.outlook.com
 (2603:10b6:5:4a::31)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: b7a66862-6765-4e97-9aed-08d60d337214
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:DM6PR12MB2682;
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2682;3:xGUZR0KEaRLgvtFFs5mrRcbGSH9O+K1bsetxamm2Ay0b4YxCk5LBmwOYMaqPlXmGF56h0Jle9HCPqx9pgutdDcvJ38ZZKg3XtTKx0aGvl/M6+SEaImuahI6HMWVDpCK8vIJuwlpqyxkfBAkAVCNogApXRa8XzyiMzT2XiCXbIypcehqDzM2PweWMwhLM3soMTbKHC82GdnOhHt23tagILlWk5xFRDkHPbVtgMSVfDGyTJtve59b+15miCCpOAjV4;25:Z2eWp/mHYqYPxgkXjQqLvsAtTX0jJjvj7aTiA6PctlW+FRKTAdbvgdn9MjRPAyUZyuq0p+FSkUFjZX/ViYI3BVnsG8vhmt5xE2Ay6P88McB0WQ5+n77H40s05NUhrcfV13HtCKpgpnE9hL1oxwLlWpo6LQFz2mj5cUUvvdAIXQ4bdi8v7C5/yvqsRdFkUaxjy/eIueqRx3FaPmASJwk08xlF7ZriqwgCJsPM8m+lj+rAnuCIlylDq5P4tPhRtr49+HlAqRtB94zqXlH1oGTZx6PhFrRdI3Y+xAfccXPQcd/4C0Dwhj5EJ/961utPwM7ze6aXoq8SGB+l1T7NgXHfCg==;31:vRPPa2g1W0HBNjBstrWZFrmyryzWQqUd/5xvpm8bNW5Yq0BLV02ofo9E0SyCuvew8KI1kzVlw7nrr2Dt4Ug+XuEaTmM5E3IMadauUnuC3Aj3vFUafDut0vBLt6wzXzNl8QWRxkMC2e/rKk9yDnfJAud4emSjNAp/CWmfFhTvyghtzTQ0/TAvxdq4e+70RnitM+nY2MoVvZecV0tLW4zoHvbAw2FqzEHDUeDEC7ogMyY=
X-MS-TrafficTypeDiagnostic: DM6PR12MB2682:
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2682;20:YqbVMWqCU2FZjJqIdlSMXQoX+RyC5JYtZqHyrKHI58/rmVtGqbha7EBa2jVT29/VC/8kiLJi9oxnHM2Kijz3gSVgsib6U/8jVa/6d0EAZ6uoEWeayABMsFIitVlswrNU5NA3PMjRXgYyuMVVzx2/SVaSLDosN4zuV48nc0uw8GO6TdYYGKxJgF3sQguWvO42Z/CKqO6on9mW5YzsFJuSDQxHoosqiVY0bLjrENI7vtePQzCvsvSpqH6cfmFeIjX6a1uetq9YCTV+/0P7LxltIP91xMvwi4dnSAGgUOf9K8Vk+fGrpC1Lk2sGLt+VmjW/6f8gJbrY8F2jT76sr8TKF4LFm9jZ4hvoftW3TR8g1T2VPvaaijOzUMFtP+f40rAqlllOYZGiuT2ATFUfOMj92/4bV899i7el6U/YBjvmcfIF9xUHWVVay2LyzFTg+xyg8NImSiE9zKcTg49xXRJo5mD9MdQ2or8vigK/+eddsqDE20fumRPWkvCiLfthfOMM;4:LbY1FmeHwChbPfRAotIvFkVWPC7pAhmfmKSXzgFUeDhi/Dv8CpxEqrESIYlBssGsJjLIDOghvR+/upTEMcM58Sr/B1Q8VXunQ30CuFiyMya38WyV06cnjfgJXQkeK/AqU4N9Pr574Kj8gWtq4xU5+gXnisR0np2u8tT02UtWxNohf2Hv0KrgWY70qX+oJThBX4PGxm9u/0y6ldXG5IA3cDy0yNLlZmY9pdIM/o/s9AYOhZduFJ1OhkKGbFkrtc8W6SKsNGpVwT7IiSFyIbAosI/7E12peefQCqrFdJ54ttoL3xOlSWIJ9yJSxMGrkfE5OdmKeROnm60YgpUJku+HLPSSeAgIOaNyLdh3LOESk+geZM1CW4knzWMDYY3NmIO7gqRQeFugm4RXTnKizOPPzA==
X-Microsoft-Antispam-PRVS: 
 <DM6PR12MB26828349C6D0176E4C0149C6E50A0@DM6PR12MB2682.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(163750095850)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(3231311)(944501410)(52105095)(10201501046)(93006095)(93001095)(3002001)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123558120)(20161123562045)(20161123564045)(201708071742011)(7699016);SRVR:DM6PR12MB2682;BCL:0;PCL:0;RULEID:;SRVR:DM6PR12MB2682;
X-Forefront-PRVS: 077884B8B5
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(396003)(136003)(376002)(39860400002)(346002)(366004)(199004)(43544003)(189003)(186003)(50226002)(52116002)(7696005)(7416002)(4326008)(305945005)(7736002)(105586002)(8676002)(106356001)(478600001)(97736004)(23676004)(386003)(316002)(53416004)(16526019)(68736007)(25786009)(76176011)(26005)(54906003)(2870700001)(86362001)(575784001)(66066001)(36756003)(47776003)(6116002)(3846002)(6666003)(5660300001)(2906002)(81166006)(11346002)(81156014)(956004)(50466002)(2616005)(14444005)(486006)(476003)(8936002)(44832011)(446003)(53936002)(6486002)(142923001)(101420200001);DIR:OUT;SFP:1101;SCL:1;SRVR:DM6PR12MB2682;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BDM6PR12MB2682=3B23=3Arvgkofl?=
	=?utf-8?q?m9TcaB35TwxzJI2mbsW2QfmR2I9gqeftDFsCqZQekwieslDJqbfrGQRKz/4u0fJQe?=
	=?utf-8?q?TMZAncUn7VndykmG+pB8FnyUsyWUNv/YayTSZD7+JWv98W/2VUrd/SnOrvVdvTeu+?=
	=?utf-8?q?iqBhps963qwJ17c6hLASO0vHIqw0dA/oAX1RjELpSJZL5N+ny46+/t+VsCLiLHNX6?=
	=?utf-8?q?Uv9cJlAYNLDOJlCRGTm8Le+2j3cenbr2ZyFc+EC67UneBsi9ubDs9eS4uuhfK5HUV?=
	=?utf-8?q?cK+yChubSzjWAAAjeVN7MqZEic5f6uyOXphk+V3lftMGmov8J1a1osUlyESBnQzva?=
	=?utf-8?q?lkgiX/RavaVLkq+6wD9Ux1j+ehpf6/rMchbVDuqy/O3/tHsoTlAop32mbGTvGFZA/?=
	=?utf-8?q?byf3kJsakGRjtDRfTRnDv9UgNvaHGmfsr+1KKZVBa/3KK5RlpBviWFYAdlIuqPGtM?=
	=?utf-8?q?ZB2YMdOA+43nuEYm6ZslpQXCxvHrY0h9YfgnlJLXQ6aTvg2oGbojRTqoxOcf2d0Lo?=
	=?utf-8?q?M4GvojMu0u0IPagv6RBhcpY25H2RqiFwN7+lw89gvJMHhZxTbIBqQ2VCqSNeq12UI?=
	=?utf-8?q?sUp5UOvu7TxiaKO1+1YYE4TmHOSBUhZftib3LuaQwSTJFCvNQs6JvLzQQs8qGqFqt?=
	=?utf-8?q?ToUdDoKH4oO/y3gDtmejgC5T/WZ+ZfR2+UbyecSpI+pmztXe+pLdENVxnBrm41GHm?=
	=?utf-8?q?AJG2FycQFj0MD1X0J9fQjKuEf7ra6VZg6VOSb/sKY4IGQqnW88cXgqAMmErH9PsFe?=
	=?utf-8?q?6DYBDf7m0isfH4iVvrJ2TuoOISCiQFD9nFuKiQuKBER2yuk5yRxiufr1VinSV3K/6?=
	=?utf-8?q?4Qf+jLLRBJcU25HGPY0etbP/Pn36s6w5/ya0IyYIXBvQNzdInuY3+Q/d/vFTuAv9r?=
	=?utf-8?q?xu4qDtIXHV4sDzyCG8ilvxoFnScwd03y1B714R3o4m11I939CQcIdOzb0PdSCmUVj?=
	=?utf-8?q?GaqKKFuLwzWRcHzspHHghj9+ifkQk08mp1d3yGyEjnNytvDPI82+F/VtMG94VQ3ce?=
	=?utf-8?q?RM2z/WlEELwuwvX2BozwBxV9RjNVncJasuzfTRmXn8RnJeLZKSoL/+O92qlsisY1I?=
	=?utf-8?q?Nuu6/8MgcJjv+lIH8rkarAI1sVnnCGpqz2rxMzloDhMgFVKnIQ2/Bm2iZ98BP+jwm?=
	=?utf-8?q?zxy3lcIPPwj8G2CZjqrmVF7TqVMcCytWfQK6hvLqQKl3dElMegMsvf54CD/wCymrx?=
	=?utf-8?q?U+Dsoj9n4Eww8CGsnNVuI2pSxquNz1gzDGn2VdHyXO4OY5RKy5l1ryWEN+LjhKBhx?=
	=?utf-8?q?S6n0/jPISCuEbRdw=3D?=
X-Microsoft-Antispam-Message-Info: 
 BJG7XKh4ryglCHVtTxR9k+SS1h6cH0OVvhOMl5TZvhKQThKTNEMCPt41/xZOaDm/wrU64Gaak8Udn7erEjrh42De770otEPD9iYlqCEa869YopgxI6Pqb3duCYxCqLevae4vRH47a7lOiYKAgjED4chk/MUlCafkezEmSVtR74oUbpu2RPdqbT2DcrWHKI8DXXSd7dV89jfjLNObF+YB/C8itG1g/myqbDn2HdQTM5kq/dNbW3bsB7EVPqINarD99JPhCn/s5jDhnWDy6kcTyu3MboQRMkKX60lapGfGTepbnIHfT0gRFyFpEeAmRwY0Alhxkk4vBEFU5UKX0U10f231v8DgkDqnQkgxg7O5WQ8=
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2682;6:KAC304hzwY1lQya0/jZSQwtvnU/6cWZpQfJ6qvmKj3pUgk7uIzhNxLzoc25X36JYPpvm8rgGKi80j8rQEAiq+PeHlg/oVI/s2cSiVgmvNbuXGmlLou3TUnfmgQfMKDcvEEuzAPi2tPIoQSEjcQKDIK8MNePQMKbGddxYe7o/fDIptIqrqxsJXIg6sIzFgutY/yeyhO/M6FS6nK8blvEVCLVSjbERr45VEI0FH2T5WjtEoTQQ5YE7bEj5dL9nJ2U158y9OE2CRQR+pEDLVqKi/HuN2+WE3KfGJWOIYn/3UdfPlNLBMFlO6HF4MD94gdmUoPufPj9GmzjOx8AExMFIS/QoHCRCgZjnsR1IWxPO1eEDDzEWf/bC0PEPRBvSAS9LJe9n/NpK7hngChGAmCrLyDc7ZipKqK5iKoDAMW94Cj1Yk2GwtfqmkUhdRKIcL6VggpEbw3hlMRJbybkZZKNDVQ==;5:/NrV95PviNYrQSHT6eR4oMEbo9KMtFjEZ30UF8RSKTc0aho9eN0X1Eg8BOZERyZD9yobukKhG1T6B0wVQHJX2KHspHV8qp3uxXR+zY58kCjDKOm0axZu/R5zmvma7/ByBiDlPhmIqS0qNpniYGrm4Jy8tdolIcGxmjmdciajgr8=;7:2OLSlONnK4fk0iRQ+1QbM2tNQyZSeYUZeleXDqb1WnIl3XrX+RineDwtK9tr0Lt0SFgQz/gvOiMyCS8uyXPtuhzFdcsURve6prbnhkOAFJ31xjrlOblYFOPvaTry6ce1ZPAmDYKtGfTS64rlr9bL6PK9F99Yx4gIgQZqggOg00QHUuHyC0cQr3dUiRxfysSZ1fGb6pP9FIk1WwXnn+t9RTxQ9yEYAk4S4mfoQ1W/t+7Y4uWqpSqohDyypusz6Ko5
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2682;20:/nN9E/8gg9MGyIVMfLej9gre2f1B4Dwj4rc+8HQo+DHD0GXILoGNI+5DDtNqBdCXV2d5HMKccg11+9WudlhbmVhW0NIH4OWV3lR2+wx8xic8u2I38bKxp0o+3DLxoe501t9Plf3wv8mFoV24eJ/G5nZnUUJz1kYBZM82ZRWqX9qJJpZLGRVtEruNY/YTgChuy/JY57x7heVyAZWXvMrr8FInWQ4CZy4uvMbturSpboIcJeWsGYQe/ErnCOXVLZyg
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 28 Aug 2018 22:13:11.4043 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 b7a66862-6765-4e97-9aed-08d60d337214
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR12MB2682
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

kvmclock defines few static variables which are shared with hypervisor
during the kvmclock initialization.

When SEV is active, memory is encrypted with a guest-specific key, and
if guest OS wants to share the memory region with hypervisor then it must
clear the C-bit before sharing it. Currently, we use
kernel_physical_mapping_init() to split large pages before clearing the
C-bit on shared pages. But the kernel_physical_mapping_init fails when
called from the kvmclock initialization (mainly because memblock allocator
was not ready).

The '__decrypted' can be used to define a shared variable; the variables
will be put in the .data.decryption section. This section is mapped with
C=0 early in the boot, we also ensure that the initialized values are
updated to match with C=0 (i.e perform an in-place decryption). The
.data..decrypted section is PMD aligned and sized so that we avoid the
need to split the large pages when mapping this section.

The sme_encrypt_kernel() was used to perform the in-place encryption
of the Linux kernel and initrd when SME is active. The routine has been
enhanced to decrypt the .data..decryption section for both SME and SEV
cases.

While reusing the sme_populate_pgd() we found that the function does not
update the flags if the pte/pmd entry already exists. The patch updates
the function to take care of it.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Cc: stable@vger.kernel.org
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: kvm@vger.kernel.org
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/include/asm/mem_encrypt.h |   6 +++
 arch/x86/kernel/head64.c           |   9 ++++
 arch/x86/kernel/vmlinux.lds.S      |  17 +++++++
 arch/x86/mm/mem_encrypt_identity.c | 100 +++++++++++++++++++++++++++++--------
 4 files changed, 112 insertions(+), 20 deletions(-)

diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h
index c064383..802b2eb 100644
--- a/arch/x86/include/asm/mem_encrypt.h
+++ b/arch/x86/include/asm/mem_encrypt.h
@@ -52,6 +52,8 @@ void __init mem_encrypt_init(void);
 bool sme_active(void);
 bool sev_active(void);
 
+#define __decrypted __attribute__((__section__(".data..decrypted")))
+
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
 #define sme_me_mask	0ULL
@@ -77,6 +79,8 @@ early_set_memory_decrypted(unsigned long vaddr, unsigned long size) { return 0;
 static inline int __init
 early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0; }
 
+#define __decrypted
+
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
 /*
@@ -88,6 +92,8 @@ early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0;
 #define __sme_pa(x)		(__pa(x) | sme_me_mask)
 #define __sme_pa_nodebug(x)	(__pa_nodebug(x) | sme_me_mask)
 
+extern char __start_data_decrypted[], __end_data_decrypted[];
+
 #endif	/* __ASSEMBLY__ */
 
 #endif	/* __X86_MEM_ENCRYPT_H__ */
diff --git a/arch/x86/kernel/head64.c b/arch/x86/kernel/head64.c
index 8047379..3e03129 100644
--- a/arch/x86/kernel/head64.c
+++ b/arch/x86/kernel/head64.c
@@ -112,6 +112,7 @@ static bool __head check_la57_support(unsigned long physaddr)
 unsigned long __head __startup_64(unsigned long physaddr,
 				  struct boot_params *bp)
 {
+	unsigned long vaddr, vaddr_end;
 	unsigned long load_delta, *p;
 	unsigned long pgtable_flags;
 	pgdval_t *pgd;
@@ -234,6 +235,14 @@ unsigned long __head __startup_64(unsigned long physaddr,
 	/* Encrypt the kernel and related (if SME is active) */
 	sme_encrypt_kernel(bp);
 
+	/* Clear the memory encryption mask from the decrypted section */
+	vaddr = (unsigned long)__start_data_decrypted;
+	vaddr_end = (unsigned long)__end_data_decrypted;
+	for (; vaddr < vaddr_end; vaddr += PMD_SIZE) {
+		i = pmd_index(vaddr);
+		pmd[i] -= sme_get_me_mask();
+	}
+
 	/*
 	 * Return the SME encryption mask (if SME is active) to be used as a
 	 * modifier for the initial pgdir entry programmed into CR3.
diff --git a/arch/x86/kernel/vmlinux.lds.S b/arch/x86/kernel/vmlinux.lds.S
index 8bde0a4..0ef9320 100644
--- a/arch/x86/kernel/vmlinux.lds.S
+++ b/arch/x86/kernel/vmlinux.lds.S
@@ -89,6 +89,21 @@ PHDRS {
 	note PT_NOTE FLAGS(0);          /* ___ */
 }
 
+/*
+ * This section contains data which will be mapped as decrypted. Memory
+ * encryption operates on a page basis. But we make this section a pmd
+ * aligned to avoid spliting the pages while mapping the section early.
+ *
+ * Note: We use a separate section so that only this section gets
+ * decrypted to avoid exposing more than we wish.
+ */
+#define DATA_DECRYPTED_SECTION						\
+	. = ALIGN(PMD_SIZE);						\
+	__start_data_decrypted = .;					\
+	*(.data..decrypted);						\
+	. = ALIGN(PMD_SIZE);						\
+	__end_data_decrypted = .;					\
+
 SECTIONS
 {
 #ifdef CONFIG_X86_32
@@ -171,6 +186,8 @@ SECTIONS
 		/* rarely changed data like cpu maps */
 		READ_MOSTLY_DATA(INTERNODE_CACHE_BYTES)
 
+		DATA_DECRYPTED_SECTION
+
 		/* End of data section */
 		_edata = .;
 	} :data
diff --git a/arch/x86/mm/mem_encrypt_identity.c b/arch/x86/mm/mem_encrypt_identity.c
index bf6097e..88c1cce 100644
--- a/arch/x86/mm/mem_encrypt_identity.c
+++ b/arch/x86/mm/mem_encrypt_identity.c
@@ -51,6 +51,8 @@
 				 (_PAGE_PAT | _PAGE_PWT))
 
 #define PMD_FLAGS_ENC		(PMD_FLAGS_LARGE | _PAGE_ENC)
+#define PMD_FLAGS_ENC_WP	((PMD_FLAGS_ENC & ~_PAGE_CACHE_MASK) | \
+				 (_PAGE_PAT | _PAGE_PWT))
 
 #define PTE_FLAGS		(__PAGE_KERNEL_EXEC & ~_PAGE_GLOBAL)
 
@@ -59,6 +61,8 @@
 				 (_PAGE_PAT | _PAGE_PWT))
 
 #define PTE_FLAGS_ENC		(PTE_FLAGS | _PAGE_ENC)
+#define PTE_FLAGS_ENC_WP	((PTE_FLAGS_ENC & ~_PAGE_CACHE_MASK) | \
+				 (_PAGE_PAT | _PAGE_PWT))
 
 struct sme_populate_pgd_data {
 	void    *pgtable_area;
@@ -154,9 +158,6 @@ static void __init sme_populate_pgd_large(struct sme_populate_pgd_data *ppd)
 		return;
 
 	pmd = pmd_offset(pud, ppd->vaddr);
-	if (pmd_large(*pmd))
-		return;
-
 	set_pmd(pmd, __pmd(ppd->paddr | ppd->pmd_flags));
 }
 
@@ -182,8 +183,7 @@ static void __init sme_populate_pgd(struct sme_populate_pgd_data *ppd)
 		return;
 
 	pte = pte_offset_map(pmd, ppd->vaddr);
-	if (pte_none(*pte))
-		set_pte(pte, __pte(ppd->paddr | ppd->pte_flags));
+	set_pte(pte, __pte(ppd->paddr | ppd->pte_flags));
 }
 
 static void __init __sme_map_range_pmd(struct sme_populate_pgd_data *ppd)
@@ -235,6 +235,11 @@ static void __init sme_map_range_encrypted(struct sme_populate_pgd_data *ppd)
 	__sme_map_range(ppd, PMD_FLAGS_ENC, PTE_FLAGS_ENC);
 }
 
+static void __init sme_map_range_encrypted_wp(struct sme_populate_pgd_data *ppd)
+{
+	__sme_map_range(ppd, PMD_FLAGS_ENC_WP, PTE_FLAGS_ENC_WP);
+}
+
 static void __init sme_map_range_decrypted(struct sme_populate_pgd_data *ppd)
 {
 	__sme_map_range(ppd, PMD_FLAGS_DEC, PTE_FLAGS_DEC);
@@ -382,7 +387,10 @@ static void __init build_workarea_map(struct boot_params *bp,
 	ppd->paddr = workarea_start;
 	ppd->vaddr = workarea_start;
 	ppd->vaddr_end = workarea_end;
-	sme_map_range_decrypted(ppd);
+	if (sev_active())
+		sme_map_range_encrypted(ppd);
+	else
+		sme_map_range_decrypted(ppd);
 
 	/* Flush the TLB - no globals so cr3 is enough */
 	native_write_cr3(__native_read_cr3());
@@ -439,16 +447,27 @@ static void __init build_workarea_map(struct boot_params *bp,
 		sme_map_range_decrypted_wp(ppd);
 	}
 
-	/* Add decrypted workarea mappings to both kernel mappings */
+	/*
+	 * When SEV is active, kernel is already encrypted hence mapping
+	 * the initial workarea_start as encrypted. When SME is active,
+	 * the kernel is not encrypted hence add a decrypted workarea
+	 * mappings to both kernel mappings.
+	 */
 	ppd->paddr = workarea_start;
 	ppd->vaddr = workarea_start;
 	ppd->vaddr_end = workarea_end;
-	sme_map_range_decrypted(ppd);
+	if (sev_active())
+		sme_map_range_encrypted(ppd);
+	else
+		sme_map_range_decrypted(ppd);
 
 	ppd->paddr = workarea_start;
 	ppd->vaddr = workarea_start + decrypted_base;
 	ppd->vaddr_end = workarea_end + decrypted_base;
-	sme_map_range_decrypted(ppd);
+	if (sev_active())
+		sme_map_range_encrypted(ppd);
+	else
+		sme_map_range_decrypted(ppd);
 
 	wa->kernel_start = kernel_start;
 	wa->kernel_end = kernel_end;
@@ -491,28 +510,69 @@ static void __init remove_workarea_map(struct sme_workarea_data *wa,
 	native_write_cr3(__native_read_cr3());
 }
 
+static void __init decrypt_data_decrypted_section(struct sme_workarea_data *wa,
+						  struct sme_populate_pgd_data *ppd)
+{
+	unsigned long decrypted_start, decrypted_end, decrypted_len;
+
+	/* Physical addresses of decrypted data section */
+	decrypted_start = __pa_symbol(__start_data_decrypted);
+	decrypted_end = ALIGN(__pa_symbol(__end_data_decrypted), PMD_PAGE_SIZE);
+	decrypted_len = decrypted_end - decrypted_start;
+
+	if (!decrypted_len)
+		return;
+
+	/* Add decrypted mapping for the section (identity) */
+	ppd->paddr = decrypted_start;
+	ppd->vaddr = decrypted_start;
+	ppd->vaddr_end = decrypted_end;
+	sme_map_range_decrypted(ppd);
+
+	/* Add encrypted-wp mapping for the section (non-identity) */
+	ppd->paddr = decrypted_start;
+	ppd->vaddr = decrypted_start + wa->decrypted_base;
+	ppd->vaddr_end = decrypted_end + wa->decrypted_base;
+	sme_map_range_encrypted_wp(ppd);
+
+	/* Perform in-place decryption */
+	sme_encrypt_execute(decrypted_start,
+			    decrypted_start + wa->decrypted_base,
+			    decrypted_len, wa->workarea_start,
+			    (unsigned long)ppd->pgd);
+
+	ppd->vaddr = decrypted_start + wa->decrypted_base;
+	ppd->vaddr_end = decrypted_end + wa->decrypted_base;
+	sme_clear_pgd(ppd);
+}
+
 void __init sme_encrypt_kernel(struct boot_params *bp)
 {
 	struct sme_populate_pgd_data ppd;
 	struct sme_workarea_data wa;
 
-	if (!sme_active())
+	if (!mem_encrypt_active())
 		return;
 
 	build_workarea_map(bp, &wa, &ppd);
 
-	/* When SEV is active, encrypt kernel and initrd */
-	sme_encrypt_execute(wa.kernel_start,
-			    wa.kernel_start + wa.decrypted_base,
-			    wa.kernel_len, wa.workarea_start,
-			    (unsigned long)ppd.pgd);
-
-	if (wa.initrd_len)
-		sme_encrypt_execute(wa.initrd_start,
-				    wa.initrd_start + wa.decrypted_base,
-				    wa.initrd_len, wa.workarea_start,
+	/* When SME is active, encrypt kernel and initrd */
+	if (sme_active()) {
+		sme_encrypt_execute(wa.kernel_start,
+				    wa.kernel_start + wa.decrypted_base,
+				    wa.kernel_len, wa.workarea_start,
 				    (unsigned long)ppd.pgd);
 
+		if (wa.initrd_len)
+			sme_encrypt_execute(wa.initrd_start,
+					    wa.initrd_start + wa.decrypted_base,
+					    wa.initrd_len, wa.workarea_start,
+					    (unsigned long)ppd.pgd);
+	}
+
+	/* Decrypt the contents of .data..decrypted section */
+	decrypt_data_decrypted_section(&wa, &ppd);
+
 	remove_workarea_map(&wa, &ppd);
 }
 

From patchwork Tue Aug 28 22:12:57 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10579213
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id CC3C514E1
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 28 Aug 2018 22:13:25 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BD4782A621
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 28 Aug 2018 22:13:25 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id AF1F32ABC6; Tue, 28 Aug 2018 22:13:25 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0F8942A621
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 28 Aug 2018 22:13:24 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727579AbeH2CG7 (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Tue, 28 Aug 2018 22:06:59 -0400
Received: from mail-eopbgr720084.outbound.protection.outlook.com
 ([40.107.72.84]:59200
        "EHLO NAM05-CO1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727261AbeH2CG6 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Tue, 28 Aug 2018 22:06:58 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=XZgnPZK5SxDMO8Tslr/4np3uWaGszntWO/0fjBHu7oU=;
 b=zFwZlcajNyYr4gcxzx+ztE8q7RGEo9v8KIDdYaYoU6QocGFqnQEp1Dq7tDZYXl4A2fKpac3hlrrzdPSlDm+Lu9gt0BFZ3tDD+kqdTiVDmp7ewktoZgVzrXmgvYU+pWnjdInX5EzQPhEm2rqoaA2pH1qTI29uLMcwEfJtSv/2HNI=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 DM6PR12MB2682.namprd12.prod.outlook.com (2603:10b6:5:4a::31) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1080.15; Tue, 28 Aug 2018 22:13:13 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>, stable@vger.kernel.org,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v2 3/3] x86/kvm: use __decrypted attribute when declaring
 shared variables
Date: Tue, 28 Aug 2018 17:12:57 -0500
Message-Id: <1535494377-25600-4-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1535494377-25600-1-git-send-email-brijesh.singh@amd.com>
References: <1535494377-25600-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: MWHPR19CA0010.namprd19.prod.outlook.com
 (2603:10b6:300:d4::20) To DM6PR12MB2682.namprd12.prod.outlook.com
 (2603:10b6:5:4a::31)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: da898402-e00d-4e8f-8f21-08d60d33732b
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:DM6PR12MB2682;
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2682;3:voqEQ4a2o3uip8w+/WnjZ70Fcc38Kj+1nKGQM6wYlpWKj438bENHXCRirTK79pR/YEur4ayqWJkfWglWBHDwetrUKmixLhZMimAugWQ8+WIAEhhE3V3UH5+QVwsaXjW1Je3CqMx5IwZ3e3KMZuE7nmH57l+DAsbTfTZ4zMZtCbX0Ma/76o3jC68WzzbWNXJrA8OYUYjM2RmbxDBnwRhMkLA7fKT5pTArw7Z0TB84vP48taQ/g2vTCVElxZpMCXEU;25:3HlzImtDCzeWkLOprPUhY/kEGatzUIJIzlmDf8Au0mnhh81/PIoVXoF9Gm+TtgD9tFgXVkel2hWWkiIomA92Vr45KlpdAhaUaR2DNwUTkr6OkwkUSBInGxJWCQD0NeYnDGcLuXHcjeK3/zZzmmLGBKGzSYvEGShti1+2xNQzLXeIVwQn0xtof3ceFHmruBWOQoonjoxxsNM6fJGDQlJGyNdorjPd2O/XE0gW8DsHcf6O5UO5Ct70J5cakK0Jex9xxuDLRLbkUZAEPsX1+BE8Eztwy0QrZXEDNOKID2EnCG/wtH3GQCDU2+WYpsl8tGhSI7uaeVgG1suEO5wA/Woriw==;31:xqLmTCcQ+BRZvhiA2RGGpBu/C17+voBI0OYpSnlxfaRhc+3ogzT9GTv0zcVer33R0kU0lsZcRIbx4q8aiCd7IQDIFGEADT1HSty1xhWWdH/tudkoFxfDZu2FxpCkA/C/6kazGgnQuOFd0PfndF3QNrRXwIwaQuXwRsu0CesiuNYmvERuaeHmudoZGLCY0WRIOcFHWTGhFSfrjN8i0NuksFTasS8pWNOifD153A7OiCo=
X-MS-TrafficTypeDiagnostic: DM6PR12MB2682:
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2682;20:OX9wsLKhGRAsOFIkl3tzEqh3cP3mmXPYSof3fF6fy/GmP2G0zJ9Ei2vvKT/aGuylkn7YUzELdlHvxI3L/tniB8rFSD1w16UfNs3qoIojQZaLGp+f/INSoXId26KPHqT/u1uJuHbs2r5dBZ62kZ9WTSP4jtjqENaGJQiEcFOo+MQfZHLKzjYiN9G8AjPnGWqxr8i0HNNeENC9/0tx6ALDqgGzGTWJzAMd1j+KSDbiQuDVAfCH7BaZNgPec1clL4gDyKy0bSWGyC9hkfF3LuSjqCRpCQkFlVgvVS6DwQiX6OFWXmNYzH5sx5bNEbI0IhhsCGuKVJMIkL9kgYGGyaRbmjYbzn/ggFMuOiadPZXksBH7dsvQbwUz/uH/u9pfbXySkJOHwTyQFrdzYxgBZiNtv503bOrGMnJTGQcXcPRY1EU7Kf5IGed3fIzHZA8fH+R/PHiWwnqK/Dkt2VYbW5ml/K5jknK5bI0SJQjLvU+em4aOkWkwYgA27qYir1A6NHKR;4:7LqWbL4YzFsiguxvw/0xahVLTOtz1L6L4RrzL0bPCCMOvQxdl52J1TR5smY8rLJgCg6u66tt3FKLaHeBjDwjZYhEdvKDgBWJ2fXc7S52goSwZEbdEgnLpn7bARy9vEZ/Ws9SypZpkh1qeYK+Jeds+7EExpfLCN2ekdFThBYYej8IRz4B0jJUe6zjBLdXKFV6z5N86QLw+NzecSy9dAtyN5HwqYfqDDBAcyMMCiuGAZjjuiCyYaUnFR/KA1IOzL0IxYiltcFtOtpJqhF4va22z5dZHAA3ZOQBsHyr/WHPKNXMxhcK0myIUto70/5FcrkZ9tYOofX8+i2hZHYX0u2vMixyzN5Sud20Qs0zz+8O8QIJ2q4MOdHlL0ec/Dr0t5pH
X-Microsoft-Antispam-PRVS: 
 <DM6PR12MB2682D771B41582ED58AA6E88E50A0@DM6PR12MB2682.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(3231311)(944501410)(52105095)(10201501046)(93006095)(93001095)(3002001)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123558120)(20161123562045)(20161123564045)(201708071742011)(7699016);SRVR:DM6PR12MB2682;BCL:0;PCL:0;RULEID:;SRVR:DM6PR12MB2682;
X-Forefront-PRVS: 077884B8B5
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(396003)(136003)(376002)(39860400002)(346002)(366004)(199004)(189003)(186003)(50226002)(52116002)(7696005)(7416002)(4326008)(305945005)(7736002)(105586002)(8676002)(106356001)(478600001)(97736004)(23676004)(386003)(316002)(53416004)(16526019)(68736007)(25786009)(76176011)(26005)(54906003)(2870700001)(86362001)(66066001)(36756003)(47776003)(6116002)(3846002)(6666003)(5660300001)(2906002)(81166006)(11346002)(81156014)(956004)(50466002)(2616005)(14444005)(486006)(476003)(8936002)(44832011)(446003)(53936002)(6486002);DIR:OUT;SFP:1101;SCL:1;SRVR:DM6PR12MB2682;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BDM6PR12MB2682=3B23=3A75BucmT?=
	=?utf-8?q?PwVnoWmkkfxnsK/4nv6t1RcHK57fBISCHQDMqrOflsYVD8602gJ32goVcM5uQj7iI?=
	=?utf-8?q?ygH63Z+MSDROK1klpKxBxbMJ3Xzgl644fSqOHI4qcxynS6R/IeGRXmw2EN4CYUDMB?=
	=?utf-8?q?PUjhMC4eqqUy69fGwcKJ6hVdbhN8Qh9aP9dqG6SVUCSirzko2zzKu78T1qMvk4xwA?=
	=?utf-8?q?goJAB1RRUqhn8+KuBUS6rcZJSsCGBUkyMvX9APNypK5H7HVZ9j+gMXQdw0donTyKP?=
	=?utf-8?q?oJkQ6ZyRd11r3zIaVyZPuy8QUxO0F+TtaMAv8tpnSHfize+myH1J+wF7Cv3G7rMzz?=
	=?utf-8?q?J5KZUey8Fc/vr2gtftNfOLXCUZYhXv60ipAOuNXB/VyG5d0iDDbS/N46m8XYoKnii?=
	=?utf-8?q?he5/oXjyRxPdRkb7/uRxWLP/ZIxjP9YhayNl7EjMFce6cPrtslDnILRxk46eY5VLy?=
	=?utf-8?q?CxY/qAUMKvlKOTcYksNJG4Xl8tnfqbiiD3QJbQovA8xgzu+63916XCtfvTYrH4Pia?=
	=?utf-8?q?dKSqdMfTqA2I+84i01ZbtNq4I4Z1uMShoc5Lf5EjwLfY0wiiU7ejnKYnP7pn6JZE2?=
	=?utf-8?q?C8GyG4Iwd+vbZdnaS/KvcQDlhVsYPwkFYhf6VWn5JKfkHIEXUiVSVpweg9SumyqDf?=
	=?utf-8?q?ssHkWFjf7j6efF76VrhBYW5Lh9b+7ID85HEP6pH7EQWVK6/tpuQhCFwfmEsChxkQT?=
	=?utf-8?q?nlG+/OtxJq3MICUdefobMTK4ZVZmgduNLGOP6f7bnmnzr6HdCYjF7eZTqDHZSejdZ?=
	=?utf-8?q?XvdCw7L2RYf5IcycA2J6NF95mzeYQLx2bAuQltDTJAxuLO/FLscy1vuyuytPD/ycr?=
	=?utf-8?q?iJgMFcPvYmOr42MrPmCLsimBCBbj0NNiZyr6I5xA18D5kP6nbobL+dFmtysv2rIhR?=
	=?utf-8?q?cRtMUqgs4WgOzUcO/Xo4NaF2lSD1ZUjstkSMGjHf6v/RDJVBrsSZifOQfvALd7mvg?=
	=?utf-8?q?ricOaTfrJYMfjz6NNLBx8bbUZzWIA/GxbH1iKKOTQfcTVoHkUaHDevG4mHSN0hfr6?=
	=?utf-8?q?KNsadyATdKSrd0Ub/eu9deXilkHOWe6ioFgmvs/C6aeyt4NPnMBzJ9Tgxj+1T/3Qf?=
	=?utf-8?q?mWwyYzQnKcsEiPUGzSWRA+20mhXKlFPHPjTp7kf4nhBaZ1mpcQb2PEwWw5VwyPG+7?=
	=?utf-8?q?+ObhwjQf7wnFNkgRYEZ4D+2WZJnEfp8wPoeZtXI?=
X-Microsoft-Antispam-Message-Info: 
 o6G0tWOQRVLG+8Nk4p/yovryEEC5JW9aJ7UE1j6tIgUFaSFh80GxjMy7ewCSmmntMFP4+nuE/Bhre2gD+skgA7dfCHk1yVVvXYPk/kwkeikweGCB5lSntEzgEInWL7elArPTAbWGfyfanrhIOtUe75B/TS755Iw1UArk2ySgz7CqThP07pQGSSHL7b2CvotM9TsTGvOL0R7Hlous8KUbt5oFHb2xxaxi/0SAmkHhwneX2xJtDQnP63wVK9euSLxYGfWesrbuwVdcq9jO30R/oCUUpE1vJlk/RREuSDty2+79SYUftmMwt0vYUGZkz/mZO1X4vaH3O3WnJMUJj2n5iuuYbXYN8/TrLzXB2vE/kBI=
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2682;6:IQbD/WyW6gKNLMJoNT7woqMw5/TyP+f3GdP/RHGV5gZBhaGFtW40zPv/ImdeanVf1O1KPHYF8AiKPkQKrA3USHFWEc9cHUI8i7a1iTUE4krGFrgi/J7g/Lg9LP6uMsek4Cq+lJIHzEKhd/Tg3gP4jyXEqAPDJMruU4/oQje82kuujpEeAEaNhoNu/gH83oYLwu/tVFslWzip5fbywTVAcLMZueaprrwMHGujNGLv6ujYu0ZJpdKpfzS23wBsEPvoqGl0PRrTb8Y/IQSqo1ulnPkVbmrfQSrhuBUAvjKLIHM29j7dZ+6m20KTR09EBcrmJkTJTPfI+HYZcep+hVY38QRtmmIs2qzq8j8TrR69eIjCQekZWGPH7BQH60Ln+AA4PebVcblcnr2t5mF/6JFkTUtKpQQf55QsAVZyQAal+u0dCT8KNzHRqs1uhuryB5s6s9aqP2IziWuig5go34ZoPg==;5:5MMnMWLjXfG+Qm/dkLC/F+KwgaKvd4qT7nPzWsK27YDyGBzPtutvsSgtS464EZYpN36a8LuU5vVJnTfDHZgf5f+bKflksiVEHHBVlfy5OWE91qI2XnwaNPGXnXDGAaJNVm4BGaMw/12x0fQe7SWDusS1TFFhfhkhlqfX7+1YUoo=;7:E7px4SGx29L9N4094yEqGeZ758PaBqx06XixWWB0j2egfyb7pPG1EQdX0RRts014W2e9SwfEJq2xR5M27fCXgHf+/HpxapJ22NpTQmv9JrzN8M3VeJCcxubMlEaJw0b5gENfMk99WGLzbHW027FqXmqPmC9ph9wGvNf2zD3VuUySmyPkiG48OhspdJlJa2U+aOOSbIZnN5Yc/RJY8RocPrR0gDjyr8YIFVR7FMATgrGpIZplIG5qCs+8+OCM/Bh4
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2682;20:UM7sFXjYIIMgUI0fCUnppH1Iy7dvOSsp3vot+v11ovmr1SSVMBkHVjofGChJaIh34H4Cm50muXSFqL2B3C7raelGI4gNcrZbfHlWAij1TayO6MpJuQdRo4W94EwPv1n/zF/RK2Ucz+0HYtZgA0H2dJy4wwX2j5THd8p0f4DsJCZ5huH8nXZTqzd6HXt6b4XUxSNvf8/2uLxPAh6kwJnLER/YuZ1JcUtMnXLi31IhqW74q5+wEpu6CVFGBAAmrnUk
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 28 Aug 2018 22:13:13.2325 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 da898402-e00d-4e8f-8f21-08d60d33732b
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR12MB2682
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

The following commit:

  368a540e0232 (x86/kvmclock: Remove memblock dependency)

caused SEV guest regression. When SEV is active, we map the shared
variables (wall_clock and hv_clock_boot) with C=0 to ensure that both
the guest and the hypervisor is able to access the data. To map the
variables we use kernel_physical_mapping_init() to split the large pages,
but this routine fails to allocate a new page. Before the above commit,
kvmclock initialization was called after memory allocator was available
but now its called very early in the boot process.

Recently we added a special .data..decrypted section to hold the shared
variables. This section is mapped with C=0 very early. Use __decrypted
attribute to put the wall_clock and hv_clock_boot in .data..decrypted
section so that they are mapped with C=0.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Fixes: 368a540e0232 ("x86/kvmclock: Remove memblock dependency")
Cc: stable@vger.kernel.org
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: kvm@vger.kernel.org
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/kernel/kvmclock.c | 30 +++++++++++++++++++++++++-----
 1 file changed, 25 insertions(+), 5 deletions(-)

diff --git a/arch/x86/kernel/kvmclock.c b/arch/x86/kernel/kvmclock.c
index 1e67646..08f5f8a 100644
--- a/arch/x86/kernel/kvmclock.c
+++ b/arch/x86/kernel/kvmclock.c
@@ -28,6 +28,7 @@
 #include <linux/sched/clock.h>
 #include <linux/mm.h>
 #include <linux/slab.h>
+#include <linux/set_memory.h>
 
 #include <asm/hypervisor.h>
 #include <asm/mem_encrypt.h>
@@ -61,8 +62,8 @@ early_param("no-kvmclock-vsyscall", parse_no_kvmclock_vsyscall);
 	(PAGE_SIZE / sizeof(struct pvclock_vsyscall_time_info))
 
 static struct pvclock_vsyscall_time_info
-			hv_clock_boot[HVC_BOOT_ARRAY_SIZE] __aligned(PAGE_SIZE);
-static struct pvclock_wall_clock wall_clock;
+			hv_clock_boot[HVC_BOOT_ARRAY_SIZE] __decrypted __aligned(PAGE_SIZE);
+static struct pvclock_wall_clock wall_clock __decrypted;
 static DEFINE_PER_CPU(struct pvclock_vsyscall_time_info *, hv_clock_per_cpu);
 
 static inline struct pvclock_vcpu_time_info *this_cpu_pvti(void)
@@ -267,10 +268,29 @@ static int kvmclock_setup_percpu(unsigned int cpu)
 		return 0;
 
 	/* Use the static page for the first CPUs, allocate otherwise */
-	if (cpu < HVC_BOOT_ARRAY_SIZE)
+	if (cpu < HVC_BOOT_ARRAY_SIZE) {
 		p = &hv_clock_boot[cpu];
-	else
-		p = kzalloc(sizeof(*p), GFP_KERNEL);
+	} else {
+		int rc;
+		unsigned int sz = sizeof(*p);
+
+		if (sev_active())
+			sz = PAGE_ALIGN(sz);
+
+		p = kzalloc(sz, GFP_KERNEL);
+
+		/*
+		 * The physical address of per-cpu variable will be shared with
+		 * the hypervisor. Let's clear the C-bit before we assign the
+		 * memory to per_cpu variable.
+		 */
+		if (p && sev_active()) {
+			rc = set_memory_decrypted((unsigned long)p, sz >> PAGE_SHIFT);
+			if (rc)
+				return rc;
+			memset(p, 0, sz);
+		}
+	}
 
 	per_cpu(hv_clock_per_cpu, cpu) = p;
 	return p ? 0 : -ENOMEM;
