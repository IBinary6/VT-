From patchwork Wed Jan 23 22:39:22 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Sean Christopherson <sean.j.christopherson@intel.com>
X-Patchwork-Id: 10778069
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 4FBEF1515
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 23 Jan 2019 22:39:29 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3D5162D706
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 23 Jan 2019 22:39:29 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 2E3592D70A; Wed, 23 Jan 2019 22:39:29 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,MAILING_LIST_MULTI,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 25FAB2D6FC
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 23 Jan 2019 22:39:28 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727059AbfAWWj1 (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 23 Jan 2019 17:39:27 -0500
Received: from mga09.intel.com ([134.134.136.24]:55013 "EHLO mga09.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726313AbfAWWj0 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 23 Jan 2019 17:39:26 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga005.jf.intel.com ([10.7.209.41])
  by orsmga102.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 23 Jan 2019 14:39:26 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,513,1539673200";
   d="scan'208";a="293874828"
Received: from sjchrist-coffee.jf.intel.com ([10.54.74.14])
  by orsmga005.jf.intel.com with ESMTP; 23 Jan 2019 14:39:26 -0800
From: Sean Christopherson <sean.j.christopherson@intel.com>
To: Paolo Bonzini <pbonzini@redhat.com>,
 =?utf-8?b?UmFkaW0gS3LEjW3DocWZ?= <rkrcmar@redhat.com>
Cc: kvm@vger.kernel.org
Subject: [PATCH 0/3] KVM: nVMX: Fix address calculations for VMX instrs
Date: Wed, 23 Jan 2019 14:39:22 -0800
Message-Id: <20190123223925.7558-1-sean.j.christopherson@intel.com>
X-Mailer: git-send-email 2.20.1
MIME-Version: 1.0
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

VMX instructions directly cause VM-Exits, and so to emulate them for a
nested VMM, KVM manually calculates the address of memory operands of
VMX instructions as opposed to routing the entire instruction through
the emulator.

Unsurprisingly, there are bugs in the address calculations related to
truncating address based on mode and prefixes.  Patch 1/3 addresses the
most critical bug, which AFAICT causes a 100% failure rate when running
a 32-bit KVM as L1 on top of a 64-bit KVM as L0.  Patches 2/3 and 3/3
fix slightly more esoteric behavior that is unlikely to affect any real
world hypervisors.

Sean Christopherson (3):
  KVM: nVMX: Sign extend displacements of VMX instr's mem operands
  KVM: nVMX: Apply addr size mask to effective address for VMX
    instructions
  KVM: nVMX: Ignore limit checks on VMX instructions using flat segments

 arch/x86/kvm/vmx/nested.c | 41 ++++++++++++++++++++++++++++++++++-----
 1 file changed, 36 insertions(+), 5 deletions(-)
