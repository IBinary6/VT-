From patchwork Fri Sep 21 21:39:13 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jim Mattson <jmattson@google.com>
X-Patchwork-Id: 10610989
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 2D56F1390
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 21 Sep 2018 21:39:24 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1E5BC2E1AC
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 21 Sep 2018 21:39:24 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 1270F2E1BE; Fri, 21 Sep 2018 21:39:24 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-15.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI,
	USER_IN_DEF_DKIM_WL autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 448F62E1AC
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 21 Sep 2018 21:39:23 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2391511AbeIVDaF (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 21 Sep 2018 23:30:05 -0400
Received: from mail-qk1-f202.google.com ([209.85.222.202]:44012 "EHLO
        mail-qk1-f202.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2390726AbeIVDaE (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 21 Sep 2018 23:30:04 -0400
Received: by mail-qk1-f202.google.com with SMTP id u22-v6so14145413qkk.10
        for <kvm@vger.kernel.org>; Fri, 21 Sep 2018 14:39:20 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=nh16UeCeSQdr0JzGdC+32u04qvi50p4xmyycAqhPhzo=;
        b=mbeXLUzUD+ZUgzsYjX9WHcQyL0yE4fSnRuJc63IbY76h1qscm1aVZgut3UyjNp1Xgy
         ln2I5v8lL24YK5KgxKMGYmzb7iY4OK8ZA5/xknuivXPugbkPQkvtiHX1GDqjzrBMlLRL
         SgUrZanN1swjqTgGEuQIimhj/BjuSYa3KAjrPZjM8tRh4KxizbV8ufX3SrTVnLdYfbU3
         h/fZCEKe69bopaEo2v6t9BRFq3JS9B6eztll13uUYCAI8Po7i3Wedjz8j6N468OcGx/T
         h4pjkMdFek3r4mIlZQZiCNA9p2arijLgqOYXJ6omrI1R2yncf8X140YH+FpLP3JGO1CQ
         rhaQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=nh16UeCeSQdr0JzGdC+32u04qvi50p4xmyycAqhPhzo=;
        b=tcBzKHfE7BQRFxs/7Wstuk6clPJVhL4pPU7+xlM8Qyin4oGh7Lo8jH3EG6WhUaPg0L
         OmrJu54qKOU2nLlqJV93zc5mjQD8JmeZDvJ6AqdkET0B3tSJ5E28cdFiDt3g3Ltbtqpo
         lyW/eW+EOUot7tgQ8tyCkZ0D3OK/OqwMjNjSE7bIIUdyIkslt8Ut+77viwNjhql/MczD
         FskunVv+K5Drx9KkWEbv1GmmY4cHxZN2NUR2sS1wkF6ZLc6fvM1+49TylPXSraDMR0Ep
         sgsCJuHrLgNEuc+fvaiU5EFxiUAT9kyXcSRvfEuVTn7tVO/IqngNHVX1B52DKlLmA4aA
         G5fA==
X-Gm-Message-State: APzg51AUHoNYLQniLN9r5IqX1ZwhM1rhTHw64aRjrkyShai5ojIhyJbQ
        R46IDDGx18aCJNXVFJ7ppRhA9vm3zotZoyMGGnUrjuVdjByMVHLkfV7Gve0pzvsS1Lp+602T9gG
        i3ILaKd02CSUsxt+Hwfw3+3pf5TcvabxtvqWbpIYB1lUwlV+eePUN3xhmzWimP9E=
X-Google-Smtp-Source: 
 ANB0VdYM/AklexCabBhc6Dumeeke+nrVgiZHOHoiQaHiqDdkdQy5VbxAl5nZVDh9gK8KJz6O551eRe46dcaZIw==
X-Received: by 2002:aed:3665:: with SMTP id
 e92-v6mr14789033qtb.41.1537565959900;
 Fri, 21 Sep 2018 14:39:19 -0700 (PDT)
Date: Fri, 21 Sep 2018 14:39:13 -0700
In-Reply-To: <20180921185553.167882-1-jmattson@google.com>
Message-Id: <20180921213913.36680-1-jmattson@google.com>
Mime-Version: 1.0
References: <20180921185553.167882-1-jmattson@google.com>
X-Mailer: git-send-email 2.19.0.444.g18242da7ef-goog
Subject: [kvm-unit-tests PATCH v2] x86: nVMX: Basic test of #DB intercept in
 L1
From: Jim Mattson <jmattson@google.com>
To: kvm@vger.kernel.org, Paolo Bonzini <pbonzini@redhat.com>,
        Sean Christopherson <sean.j.christopherson@intel.com>
Cc: Jim Mattson <jmattson@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Test a single-step trap delivered by hardware to set expectations, and
then test a single-step trap synthesized by L0 to see if those
expectations are met. Single-step traps in simulated MOVSS-shadow are
tested as well.

As a bonus, test a single-step trap in a transactional region to set
expectations for that unusual case as well.

Signed-off-by: Jim Mattson <jmattson@google.com>
Reviewed-by: Peter Shier <pshier@google.com>
---
 x86/unittests.cfg |   6 ++
 x86/vmx.h         |   9 ++
 x86/vmx_tests.c   | 207 ++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 222 insertions(+)

diff --git a/x86/unittests.cfg b/x86/unittests.cfg
index 2d04806..e455d96 100644
--- a/x86/unittests.cfg
+++ b/x86/unittests.cfg
@@ -566,6 +566,12 @@ extra_params = -cpu host,+vmx -m 2560 -append vmx_nm_test
 arch = x86_64
 groups = vmx
 
+[vmx_db_test]
+file = vmx.flat
+extra_params = -cpu host,+vmx -m 2560 -append vmx_db_test
+arch = x86_64
+groups = vmx
+
 [vmx_eoi_bitmap_ioapic_scan]
 file = vmx.flat
 smp = 2
diff --git a/x86/vmx.h b/x86/vmx.h
index 22b2892..8b60bf7 100644
--- a/x86/vmx.h
+++ b/x86/vmx.h
@@ -448,6 +448,15 @@ enum Intr_type {
 #define INTR_TYPE_SOFT_EXCEPTION	(6 << 8) /* software exception */
 #define INTR_TYPE_OTHER_EVENT           (7 << 8) /* other event */
 
+/*
+ * Guest interruptibility state
+ */
+#define GUEST_INTR_STATE_STI		(1 << 0)
+#define GUEST_INTR_STATE_MOVSS		(1 << 1)
+#define GUEST_INTR_STATE_SMI		(1 << 2)
+#define GUEST_INTR_STATE_NMI		(1 << 3)
+#define GUEST_INTR_STATE_ENCLAVE	(1 << 4)
+
 /*
  * VM-instruction error numbers
  */
diff --git a/x86/vmx_tests.c b/x86/vmx_tests.c
index 1574970..4a1c670 100644
--- a/x86/vmx_tests.c
+++ b/x86/vmx_tests.c
@@ -3,6 +3,9 @@
  *
  * Author : Arthur Chunqi Li <yzt356@gmail.com>
  */
+
+#include <asm/debugreg.h>
+
 #include "vmx.h"
 #include "msr.h"
 #include "processor.h"
@@ -4684,6 +4687,209 @@ static void vmx_nm_test(void)
 	enter_guest();
 }
 
+static void vmx_db_test_guest(void)
+{
+	/*
+	 * For a hardware generated single-step #DB.
+	 */
+	asm volatile("vmcall;"
+		     "nop;"
+		     ".Lpost_nop:");
+	/*
+	 * ...in a MOVSS shadow, with pending debug exceptions.
+	 */
+	asm volatile("vmcall;"
+		     "nop;"
+		     ".Lpost_movss_nop:");
+	/*
+	 * For an L0 synthesized single-step #DB. (L0 intercepts WBINVD and
+	 * emulates it in software.)
+	 */
+	asm volatile("vmcall;"
+		     "wbinvd;"
+		     ".Lpost_wbinvd:");
+	/*
+	 * ...in a MOVSS shadow, with pending debug exceptions.
+	 */
+	asm volatile("vmcall;"
+		     "wbinvd;"
+		     ".Lpost_movss_wbinvd:");
+	/*
+	 * For a hardware generated single-step #DB in a transactional region.
+	 */
+	asm volatile("vmcall;"
+		     ".Lxbegin: xbegin .Lskip_rtm;"
+		     "xend;"
+		     ".Lskip_rtm:");
+}
+
+/*
+ * Clear the pending debug exceptions and RFLAGS.TF and re-enter
+ * L2. No #DB is delivered and L2 continues to the next point of
+ * interest.
+ */
+static void dismiss_db(void)
+{
+	vmcs_write(GUEST_PENDING_DEBUG, 0);
+	vmcs_write(GUEST_RFLAGS, X86_EFLAGS_FIXED);
+	enter_guest();
+}
+
+/*
+ * Check a variety of VMCS fields relevant to an intercepted #DB exception.
+ * Then throw away the #DB exception and resume L2.
+ */
+static void check_db_exit(bool xfail_qual, bool xfail_dr6, bool xfail_pdbg,
+			  void *expected_rip, u64 expected_exit_qual,
+			  u64 expected_dr6)
+{
+	u32 reason = vmcs_read(EXI_REASON);
+	u32 intr_info = vmcs_read(EXI_INTR_INFO);
+	u64 exit_qual = vmcs_read(EXI_QUALIFICATION);
+	u64 guest_rip = vmcs_read(GUEST_RIP);
+	u64 guest_pending_dbg = vmcs_read(GUEST_PENDING_DEBUG);
+	u64 dr6 = read_dr6();
+	const u32 expected_intr_info = INTR_INFO_VALID_MASK |
+		INTR_TYPE_HARD_EXCEPTION | DB_VECTOR;
+
+	report("Expected #DB VM-exit",
+	       reason == VMX_EXC_NMI && intr_info == expected_intr_info);
+	report("Expected RIP %p (actual %lx)", (u64)expected_rip == guest_rip,
+	       expected_rip, guest_rip);
+	report_xfail("Expected pending debug exceptions 0 (actual %lx)",
+		     xfail_pdbg, 0 == guest_pending_dbg, guest_pending_dbg);
+	report_xfail("Expected exit qualification %lx (actual %lx)", xfail_qual,
+		     expected_exit_qual == exit_qual,
+		     expected_exit_qual, exit_qual);
+	report_xfail("Expected DR6 %lx (actual %lx)", xfail_dr6,
+		     expected_dr6 == dr6, expected_dr6, dr6);
+	dismiss_db();
+}
+
+/*
+ * Assuming the guest has just exited on a VMCALL instruction, skip
+ * over the vmcall, and set the guest's RFLAGS.TF in the VMCS. If
+ * pending debug exceptions are non-zero, set the VMCS up as if the
+ * previous instruction was a MOVSS that generated the indicated
+ * pending debug exceptions. Then enter L2.
+ */
+static void single_step_guest(const char *test_name, u64 starting_dr6,
+			      u64 pending_debug_exceptions)
+{
+	printf("\n%s\n", test_name);
+	skip_exit_vmcall();
+	write_dr6(starting_dr6);
+	vmcs_write(GUEST_RFLAGS, X86_EFLAGS_FIXED | X86_EFLAGS_TF);
+	if (pending_debug_exceptions) {
+		vmcs_write(GUEST_PENDING_DEBUG, pending_debug_exceptions);
+		vmcs_write(GUEST_INTR_STATE, GUEST_INTR_STATE_MOVSS);
+	}
+	enter_guest();
+}
+
+/*
+ * When L1 intercepts #DB, verify that a single-step trap clears
+ * pending debug exceptions, populates the exit qualification field
+ * properly, and that DR6 is not prematurely clobbered. In a
+ * (simulated) MOVSS shadow, make sure that the pending debug
+ * exception bits are properly accumulated into the exit qualification
+ * field.
+ */
+static void vmx_db_test(void)
+{
+	/*
+	 * We are going to set a few arbitrary bits in DR6 to verify that
+	 * (a) DR6 is not modified by an intercepted #DB, and
+	 * (b) stale bits in DR6 (DR6.BD, in particular) don't leak into
+         *     the exit qualification field for a subsequent #DB exception.
+	 */
+	const u64 starting_dr6 = DR6_RESERVED | BIT(13) | DR_TRAP3 | DR_TRAP1;
+	extern char post_nop asm(".Lpost_nop");
+	extern char post_movss_nop asm(".Lpost_movss_nop");
+	extern char post_wbinvd asm(".Lpost_wbinvd");
+	extern char post_movss_wbinvd asm(".Lpost_movss_wbinvd");
+	extern char xbegin asm(".Lxbegin");
+	extern char skip_rtm asm(".Lskip_rtm");
+
+	/*
+	 * L1 wants to intercept #DB exceptions encountered in L2.
+	 */
+	vmcs_write(EXC_BITMAP, BIT(DB_VECTOR));
+
+	/*
+	 * Start L2 and run it up to the first point of interest.
+	 */
+	test_set_guest(vmx_db_test_guest);
+	enter_guest();
+
+	/*
+	 * Hardware-delivered #DB trap for single-step sets the
+	 * standard that L0 has to follow for emulated instructions.
+	 */
+	single_step_guest("Hardware delivered single-step", starting_dr6, 0);
+	check_db_exit(false, false, false, &post_nop, DR_STEP, starting_dr6);
+
+	/*
+	 * Hardware-delivered #DB trap for single-step in MOVSS shadow
+	 * also sets the standard that L0 has to follow for emulated
+	 * instructions. Here, we establish the VMCS pending debug
+	 * exceptions to indicate that the simulated MOVSS triggered a
+	 * data breakpoint as well as the single-step trap.
+	 */
+	single_step_guest("Hardware delivered single-step in MOVSS shadow",
+			  starting_dr6, BIT(12) | DR_STEP | DR_TRAP0 );
+	check_db_exit(false, false, false, &post_movss_nop, DR_STEP | DR_TRAP0,
+		      starting_dr6);
+
+	/*
+	 * L0 synthesized #DB trap for single-step is buggy, because
+	 * kvm (a) clobbers DR6 too early, and (b) tries its best to
+	 * reconstitute the exit qualification from the prematurely
+	 * modified DR6, but fails miserably.
+	 */
+	single_step_guest("Software synthesized single-step", starting_dr6, 0);
+	check_db_exit(true, true, false, &post_wbinvd, DR_STEP, starting_dr6);
+
+	/*
+	 * L0 synthesized #DB trap for single-step in MOVSS shadow is
+	 * even worse, because L0 also leaves the pending debug
+	 * exceptions in the VMCS instead of accumulating them into
+	 * the exit qualification field for the #DB exception.
+	 */
+	single_step_guest("Software synthesized single-step in MOVSS shadow",
+			  starting_dr6, BIT(12) | DR_STEP | DR_TRAP0);
+	check_db_exit(true, true, true, &post_movss_wbinvd, DR_STEP | DR_TRAP0,
+		      starting_dr6);
+
+	/*
+	 * Optional RTM test for hardware that supports RTM, to
+	 * demonstrate that the current volume 3 of the SDM
+	 * (325384-067US), table 27-1 is incorrect. Bit 16 of the exit
+	 * qualification for debug exceptions is not reserved. It is
+	 * set to 1 if a debug exception (#DB) or a breakpoint
+	 * exception (#BP) occurs inside an RTM region while advanced
+	 * debugging of RTM transactional regions is enabled.
+	 */
+	if (cpuid(7).b & BIT(11)) {
+		vmcs_write(ENT_CONTROLS,
+			   vmcs_read(ENT_CONTROLS) | ENT_LOAD_DBGCTLS);
+		/*
+		 * Set DR7.RTM[bit 11] and IA32_DEBUGCTL.RTM[bit 15]
+		 * in the guest to enable advanced debugging of RTM
+		 * transactional regions.
+		 */
+		vmcs_write(GUEST_DR7, BIT(11));
+		vmcs_write(GUEST_DEBUGCTL, BIT(15));
+		single_step_guest("Hardware delivered single-step in "
+				  "transactional region", starting_dr6, 0);
+		check_db_exit(false, false, false, &xbegin, BIT(16),
+			      starting_dr6);
+	} else {
+		vmcs_write(GUEST_RIP, (u64)&skip_rtm);
+		enter_guest();
+	}
+}
+
 static bool cpu_has_apicv(void)
 {
 	return ((ctrl_cpu_rev[1].clr & CPU_APIC_REG_VIRT) &&
@@ -5245,6 +5451,7 @@ struct vmx_test vmx_tests[] = {
 	/* Regression tests */
 	TEST(vmx_cr_load_test),
 	TEST(vmx_nm_test),
+	TEST(vmx_db_test),
 	/* EPT access tests. */
 	TEST(ept_access_test_not_present),
 	TEST(ept_access_test_read_only),
