From patchwork Thu Dec 13 18:23:53 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Krish Sadhukhan <krish.sadhukhan@oracle.com>
X-Patchwork-Id: 10729617
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 9C83914E2
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Dec 2018 18:48:28 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 904D52C855
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Dec 2018 18:48:28 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 84E6B2C857; Thu, 13 Dec 2018 18:48:28 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-8.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI,
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id F1F162C855
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Dec 2018 18:48:27 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727426AbeLMSsZ (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Thu, 13 Dec 2018 13:48:25 -0500
Received: from aserp2130.oracle.com ([141.146.126.79]:40750 "EHLO
        aserp2130.oracle.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726470AbeLMSsZ (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 13 Dec 2018 13:48:25 -0500
Received: from pps.filterd (aserp2130.oracle.com [127.0.0.1])
        by aserp2130.oracle.com (8.16.0.22/8.16.0.22) with SMTP id
 wBDIiOoR067194;
        Thu, 13 Dec 2018 18:48:20 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
 h=from : to : cc :
 subject : date : message-id : in-reply-to : references; s=corp-2018-07-02;
 bh=5t4AB74Gfj1A+4jAXcegsfPNwsMRsIjgy1Em5+8Di9Y=;
 b=Zq8TIP2tM0yaaBgRq/XUPs1DaZ7X8NRdw/F54BvNuxkACf/42WQU2zOTUWXKlhDk4PyO
 jAvt0BZfXmw8yvALjX/xVCDjoQqSWSsbXn9jY/Yfr5ZFt6yoKidbl1/dtrGCbAloCHKP
 nQ3qhzchHKGy38mByGnpGU5f1BwZuuHm+4zdu9S2zfEYUbYgfemL/Nek4k7A1E6wiC1J
 uEkvdvASTLQmxGy/0U+AC27iN/rMQN9UrrArAiQFhPWv0vOhm1aiE8XVNkSKrdDqY+QY
 6Dm2CbwaOBnjizqaDYJl6gFRBmO2UNETiOzYRbPY/gD6/zPKVvuCd/qWerKz1syFs4dz RQ==
Received: from userv0022.oracle.com (userv0022.oracle.com [156.151.31.74])
        by aserp2130.oracle.com with ESMTP id 2pawwp9fkm-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
 verify=OK);
        Thu, 13 Dec 2018 18:48:20 +0000
Received: from aserv0122.oracle.com (aserv0122.oracle.com [141.146.126.236])
        by userv0022.oracle.com (8.14.4/8.14.4) with ESMTP id wBDImJhr025883
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
 verify=OK);
        Thu, 13 Dec 2018 18:48:19 GMT
Received: from abhmp0016.oracle.com (abhmp0016.oracle.com [141.146.116.22])
        by aserv0122.oracle.com (8.14.4/8.14.4) with ESMTP id wBDImJOb003725;
        Thu, 13 Dec 2018 18:48:19 GMT
Received: from ban25x6uut29.us.oracle.com (/10.153.73.29)
        by default (Oracle Beehive Gateway v4.0)
        with ESMTP ; Thu, 13 Dec 2018 10:48:18 -0800
From: Krish Sadhukhan <krish.sadhukhan@oracle.com>
To: kvm@vger.kernel.org
Cc: pbonzini@redhat.com, rkrcmar@redhat.com, jmattson@google.com
Subject: [kvm-unit-test v3 1/4] KVM nVMX: Change the names of the functions
 test_vmcs_page_* to test_vmcs_addr_*
Date: Thu, 13 Dec 2018 13:23:53 -0500
Message-Id: <20181213182356.29124-2-krish.sadhukhan@oracle.com>
X-Mailer: git-send-email 2.9.5
In-Reply-To: <20181213182356.29124-1-krish.sadhukhan@oracle.com>
References: <20181213182356.29124-1-krish.sadhukhan@oracle.com>
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=9106
 signatures=668679
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 suspectscore=1
 malwarescore=0
 phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=999
 adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.0.1-1810050000 definitions=main-1812130160
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

... because these functions can be used for any VMCS address and not just
     a page.

Signed-off-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Reviewed-by: Jim Mattson <jmattson@google.com>
---
 x86/vmx_tests.c | 65 ++++++++++++++++++++++++++++-----------------------------
 1 file changed, 32 insertions(+), 33 deletions(-)

diff --git a/x86/vmx_tests.c b/x86/vmx_tests.c
index b105b23..bdd23df 100644
--- a/x86/vmx_tests.c
+++ b/x86/vmx_tests.c
@@ -3457,14 +3457,13 @@ static void test_cr3_targets(void)
 }
 
 /*
- * Test a particular address setting for a physical page reference in
- * the VMCS.
+ * Test a particular address setting in the VMCS
  */
-static void test_vmcs_page_addr(const char *name,
-				enum Encoding encoding,
-				bool ignored,
-				bool xfail_beyond_mapped_ram,
-				u64 addr)
+static void test_vmcs_addr(const char *name,
+			   enum Encoding encoding,
+			   bool ignored,
+			   bool xfail_beyond_mapped_ram,
+			   u64 addr)
 {
 	bool xfail =
 		(xfail_beyond_mapped_ram &&
@@ -3481,9 +3480,9 @@ static void test_vmcs_page_addr(const char *name,
 }
 
 /*
- * Test interesting values for a physical page reference in the VMCS.
+ * Test interesting values for a VMCS address
  */
-static void test_vmcs_page_values(const char *name,
+static void test_vmcs_addr_values(const char *name,
 				  enum Encoding encoding,
 				  bool ignored,
 				  bool xfail_beyond_mapped_ram)
@@ -3492,28 +3491,28 @@ static void test_vmcs_page_values(const char *name,
 	u64 orig_val = vmcs_read(encoding);
 
 	for (i = 0; i < 64; i++)
-		test_vmcs_page_addr(name, encoding, ignored,
-				    xfail_beyond_mapped_ram, 1ul << i);
-
-	test_vmcs_page_addr(name, encoding, ignored,
-			    xfail_beyond_mapped_ram, PAGE_SIZE - 1);
-	test_vmcs_page_addr(name, encoding, ignored,
-			    xfail_beyond_mapped_ram, PAGE_SIZE);
-	test_vmcs_page_addr(name, encoding, ignored,
-			    xfail_beyond_mapped_ram,
-			    (1ul << cpuid_maxphyaddr()) - PAGE_SIZE);
-	test_vmcs_page_addr(name, encoding, ignored,
-			    xfail_beyond_mapped_ram,
-			    -1ul);
+		test_vmcs_addr(name, encoding, ignored,
+			       xfail_beyond_mapped_ram, 1ul << i);
+
+	test_vmcs_addr(name, encoding, ignored,
+		       xfail_beyond_mapped_ram, PAGE_SIZE - 1);
+	test_vmcs_addr(name, encoding, ignored,
+		       xfail_beyond_mapped_ram, PAGE_SIZE);
+	test_vmcs_addr(name, encoding, ignored,
+		       xfail_beyond_mapped_ram,
+		      (1ul << cpuid_maxphyaddr()) - PAGE_SIZE);
+	test_vmcs_addr(name, encoding, ignored,
+		       xfail_beyond_mapped_ram,
+		       -1ul);
 
 	vmcs_write(encoding, orig_val);
 }
 
 /*
- * Test a physical page reference in the VMCS, when the corresponding
+ * Test a physical address reference in the VMCS, when the corresponding
  * feature is enabled and when the corresponding feature is disabled.
  */
-static void test_vmcs_page_reference(u32 control_bit, enum Encoding field,
+static void test_vmcs_addr_reference(u32 control_bit, enum Encoding field,
 				     const char *field_name,
 				     const char *control_name,
 				     bool xfail_beyond_mapped_ram,
@@ -3540,7 +3539,7 @@ static void test_vmcs_page_reference(u32 control_bit, enum Encoding field,
 		vmcs_write(CPU_EXEC_CTRL0, primary | CPU_SECONDARY);
 		vmcs_write(CPU_EXEC_CTRL1, secondary | control_bit);
 	}
-	test_vmcs_page_values(field_name, field, false, xfail_beyond_mapped_ram);
+	test_vmcs_addr_values(field_name, field, false, xfail_beyond_mapped_ram);
 	report_prefix_pop();
 
 	report_prefix_pushf("%s disabled", control_name);
@@ -3550,7 +3549,7 @@ static void test_vmcs_page_reference(u32 control_bit, enum Encoding field,
 		vmcs_write(CPU_EXEC_CTRL0, primary & ~CPU_SECONDARY);
 		vmcs_write(CPU_EXEC_CTRL1, secondary & ~control_bit);
 	}
-	test_vmcs_page_values(field_name, field, true, false);
+	test_vmcs_addr_values(field_name, field, true, false);
 	report_prefix_pop();
 
 	vmcs_write(field, page_addr);
@@ -3565,10 +3564,10 @@ static void test_vmcs_page_reference(u32 control_bit, enum Encoding field,
  */
 static void test_io_bitmaps(void)
 {
-	test_vmcs_page_reference(CPU_IO_BITMAP, IO_BITMAP_A,
+	test_vmcs_addr_reference(CPU_IO_BITMAP, IO_BITMAP_A,
 				 "I/O bitmap A", "Use I/O bitmaps", false,
 				 true);
-	test_vmcs_page_reference(CPU_IO_BITMAP, IO_BITMAP_B,
+	test_vmcs_addr_reference(CPU_IO_BITMAP, IO_BITMAP_B,
 				 "I/O bitmap B", "Use I/O bitmaps", false,
 				 true);
 }
@@ -3581,7 +3580,7 @@ static void test_io_bitmaps(void)
  */
 static void test_msr_bitmap(void)
 {
-	test_vmcs_page_reference(CPU_MSR_BITMAP, MSR_BITMAP,
+	test_vmcs_addr_reference(CPU_MSR_BITMAP, MSR_BITMAP,
 				 "MSR bitmap", "Use MSR bitmaps", false,
 				 true);
 }
@@ -3596,7 +3595,7 @@ static void test_msr_bitmap(void)
  */
 static void test_apic_virt_addr(void)
 {
-	test_vmcs_page_reference(CPU_TPR_SHADOW, APIC_VIRT_ADDR,
+	test_vmcs_addr_reference(CPU_TPR_SHADOW, APIC_VIRT_ADDR,
 				 "virtual-APIC address", "Use TPR shadow",
 				 true, true);
 }
@@ -3615,7 +3614,7 @@ static void test_apic_access_addr(void)
 
 	vmcs_write(APIC_ACCS_ADDR, virt_to_phys(apic_access_page));
 
-	test_vmcs_page_reference(CPU_VIRT_APIC_ACCESSES, APIC_ACCS_ADDR,
+	test_vmcs_addr_reference(CPU_VIRT_APIC_ACCESSES, APIC_ACCS_ADDR,
 				 "APIC-access address",
 				 "virtualize APIC-accesses", false, false);
 }
@@ -3903,7 +3902,7 @@ static void test_posted_intr(void)
 	test_pi_desc_addr(0x00, true);
 	test_pi_desc_addr(0xc000, true);
 
-	test_vmcs_page_values("process-posted interrupts",
+	test_vmcs_addr_values("process-posted interrupts",
 	    POSTED_INTR_DESC_ADDR, false, false);
 
 	vmcs_write(CPU_EXEC_CTRL0, saved_primary);
@@ -4714,7 +4713,7 @@ static void test_pml(void)
 	test_vmx_controls(true, false);
 	report_prefix_pop();
 
-	test_vmcs_page_reference(CPU_PML, PMLADDR, "PML address",
+	test_vmcs_addr_reference(CPU_PML, PMLADDR, "PML address",
 	    "PML", false, false);
 
 	vmcs_write(CPU_EXEC_CTRL0, primary_saved);

From patchwork Thu Dec 13 18:23:54 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Krish Sadhukhan <krish.sadhukhan@oracle.com>
X-Patchwork-Id: 10729619
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id F3E4A13BF
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Dec 2018 18:48:29 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E771B2C855
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Dec 2018 18:48:29 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id DC49A2C858; Thu, 13 Dec 2018 18:48:29 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-8.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI,
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5FE642C855
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Dec 2018 18:48:29 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727375AbeLMSsZ (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Thu, 13 Dec 2018 13:48:25 -0500
Received: from aserp2130.oracle.com ([141.146.126.79]:40752 "EHLO
        aserp2130.oracle.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726997AbeLMSsY (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 13 Dec 2018 13:48:24 -0500
Received: from pps.filterd (aserp2130.oracle.com [127.0.0.1])
        by aserp2130.oracle.com (8.16.0.22/8.16.0.22) with SMTP id
 wBDIis6U067667;
        Thu, 13 Dec 2018 18:48:20 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
 h=from : to : cc :
 subject : date : message-id : in-reply-to : references; s=corp-2018-07-02;
 bh=6P1tk2YJE2KiX9lL05K3y9QYfLuNBFzfgZbhuOKHuwk=;
 b=IRwQio/TBXpI8D67aK/MKEO+DyL9NLJ/KHMiJGr/daqpWGDDO57aoJktVQi5zTI+Wn11
 czMT+iZFl+66ikj54fNvU9l4kTaUFlXfNET2ri3S/0bwy5TEZE4B1yNyPitgXKwE9Gtf
 aZao/6FwMMp7nbtWNB/S2ezjEObNyW8e14UJCOwZywBuPSA394AAvhf9zrYxE5kt5JSz
 w0m3ONv0iqamQXoLx7QPOn6GOqKmIxaKr+IjkP8IHR2zy+um8F+dNXgnYKnCkLxoacH4
 GX7YH/w6BBNREHhVWTWG0u5SIbAKh522BPLlQ7suGVEPD4Yr4oX7JY1uTwlKzviYtBlZ ew==
Received: from aserv0021.oracle.com (aserv0021.oracle.com [141.146.126.233])
        by aserp2130.oracle.com with ESMTP id 2pawwp9fkn-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
 verify=OK);
        Thu, 13 Dec 2018 18:48:20 +0000
Received: from userv0122.oracle.com (userv0122.oracle.com [156.151.31.75])
        by aserv0021.oracle.com (8.14.4/8.14.4) with ESMTP id wBDImJeY000770
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
 verify=OK);
        Thu, 13 Dec 2018 18:48:20 GMT
Received: from abhmp0016.oracle.com (abhmp0016.oracle.com [141.146.116.22])
        by userv0122.oracle.com (8.14.4/8.14.4) with ESMTP id wBDImJg7019913;
        Thu, 13 Dec 2018 18:48:19 GMT
Received: from ban25x6uut29.us.oracle.com (/10.153.73.29)
        by default (Oracle Beehive Gateway v4.0)
        with ESMTP ; Thu, 13 Dec 2018 10:48:19 -0800
From: Krish Sadhukhan <krish.sadhukhan@oracle.com>
To: kvm@vger.kernel.org
Cc: pbonzini@redhat.com, rkrcmar@redhat.com, jmattson@google.com
Subject: [kvm-unit-test v3 2/4] KVM nVMX: test_vmcs_page_* functions need to
 accept alignment size as a parameter
Date: Thu, 13 Dec 2018 13:23:54 -0500
Message-Id: <20181213182356.29124-3-krish.sadhukhan@oracle.com>
X-Mailer: git-send-email 2.9.5
In-Reply-To: <20181213182356.29124-1-krish.sadhukhan@oracle.com>
References: <20181213182356.29124-1-krish.sadhukhan@oracle.com>
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=9106
 signatures=668679
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 suspectscore=1
 malwarescore=0
 phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=707
 adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.0.1-1810050000 definitions=main-1812130160
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

.. because not all alignments fall on page size boundary.

Signed-off-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Reviewed-by: Mihai Carabas <mihai.carabas@oracle.com>
---
 x86/vmx_tests.c | 50 +++++++++++++++++++++++++++-----------------------
 1 file changed, 27 insertions(+), 23 deletions(-)

diff --git a/x86/vmx_tests.c b/x86/vmx_tests.c
index bdd23df..e5cdb4b 100644
--- a/x86/vmx_tests.c
+++ b/x86/vmx_tests.c
@@ -3461,18 +3461,19 @@ static void test_cr3_targets(void)
  */
 static void test_vmcs_addr(const char *name,
 			   enum Encoding encoding,
+			   u64 align,
 			   bool ignored,
 			   bool xfail_beyond_mapped_ram,
 			   u64 addr)
 {
 	bool xfail =
 		(xfail_beyond_mapped_ram &&
-		 addr > fwcfg_get_u64(FW_CFG_RAM_SIZE) - PAGE_SIZE &&
+		 addr > fwcfg_get_u64(FW_CFG_RAM_SIZE) - align &&
 		 addr < (1ul << cpuid_maxphyaddr()));
 
 	report_prefix_pushf("%s = %lx", name, addr);
 	vmcs_write(encoding, addr);
-	test_vmx_controls(ignored || (IS_ALIGNED(addr, PAGE_SIZE) &&
+	test_vmx_controls(ignored || (IS_ALIGNED(addr, align) &&
 				  addr < (1ul << cpuid_maxphyaddr())),
 			  xfail);
 	report_prefix_pop();
@@ -3484,6 +3485,7 @@ static void test_vmcs_addr(const char *name,
  */
 static void test_vmcs_addr_values(const char *name,
 				  enum Encoding encoding,
+				  u64 align,
 				  bool ignored,
 				  bool xfail_beyond_mapped_ram)
 {
@@ -3491,19 +3493,18 @@ static void test_vmcs_addr_values(const char *name,
 	u64 orig_val = vmcs_read(encoding);
 
 	for (i = 0; i < 64; i++)
-		test_vmcs_addr(name, encoding, ignored,
+		test_vmcs_addr(name, encoding, align, ignored,
 			       xfail_beyond_mapped_ram, 1ul << i);
 
-	test_vmcs_addr(name, encoding, ignored,
+	test_vmcs_addr(name, encoding, align, ignored,
 		       xfail_beyond_mapped_ram, PAGE_SIZE - 1);
-	test_vmcs_addr(name, encoding, ignored,
+	test_vmcs_addr(name, encoding, align, ignored,
 		       xfail_beyond_mapped_ram, PAGE_SIZE);
-	test_vmcs_addr(name, encoding, ignored,
+	test_vmcs_addr(name, encoding, align, ignored,
 		       xfail_beyond_mapped_ram,
 		      (1ul << cpuid_maxphyaddr()) - PAGE_SIZE);
-	test_vmcs_addr(name, encoding, ignored,
-		       xfail_beyond_mapped_ram,
-		       -1ul);
+	test_vmcs_addr(name, encoding, align, ignored,
+		       xfail_beyond_mapped_ram, -1ul);
 
 	vmcs_write(encoding, orig_val);
 }
@@ -3514,7 +3515,7 @@ static void test_vmcs_addr_values(const char *name,
  */
 static void test_vmcs_addr_reference(u32 control_bit, enum Encoding field,
 				     const char *field_name,
-				     const char *control_name,
+				     const char *control_name, u64 align,
 				     bool xfail_beyond_mapped_ram,
 				     bool control_primary)
 {
@@ -3539,7 +3540,8 @@ static void test_vmcs_addr_reference(u32 control_bit, enum Encoding field,
 		vmcs_write(CPU_EXEC_CTRL0, primary | CPU_SECONDARY);
 		vmcs_write(CPU_EXEC_CTRL1, secondary | control_bit);
 	}
-	test_vmcs_addr_values(field_name, field, false, xfail_beyond_mapped_ram);
+	test_vmcs_addr_values(field_name, field, align, false,
+			      xfail_beyond_mapped_ram);
 	report_prefix_pop();
 
 	report_prefix_pushf("%s disabled", control_name);
@@ -3549,7 +3551,7 @@ static void test_vmcs_addr_reference(u32 control_bit, enum Encoding field,
 		vmcs_write(CPU_EXEC_CTRL0, primary & ~CPU_SECONDARY);
 		vmcs_write(CPU_EXEC_CTRL1, secondary & ~control_bit);
 	}
-	test_vmcs_addr_values(field_name, field, true, false);
+	test_vmcs_addr_values(field_name, field, align, true, false);
 	report_prefix_pop();
 
 	vmcs_write(field, page_addr);
@@ -3565,11 +3567,11 @@ static void test_vmcs_addr_reference(u32 control_bit, enum Encoding field,
 static void test_io_bitmaps(void)
 {
 	test_vmcs_addr_reference(CPU_IO_BITMAP, IO_BITMAP_A,
-				 "I/O bitmap A", "Use I/O bitmaps", false,
-				 true);
+				 "I/O bitmap A", "Use I/O bitmaps",
+				 PAGE_SIZE, false, true);
 	test_vmcs_addr_reference(CPU_IO_BITMAP, IO_BITMAP_B,
-				 "I/O bitmap B", "Use I/O bitmaps", false,
-				 true);
+				 "I/O bitmap B", "Use I/O bitmaps",
+				 PAGE_SIZE, false, true);
 }
 
 /*
@@ -3581,8 +3583,8 @@ static void test_io_bitmaps(void)
 static void test_msr_bitmap(void)
 {
 	test_vmcs_addr_reference(CPU_MSR_BITMAP, MSR_BITMAP,
-				 "MSR bitmap", "Use MSR bitmaps", false,
-				 true);
+				 "MSR bitmap", "Use MSR bitmaps",
+				 PAGE_SIZE, false, true);
 }
 
 /*
@@ -3597,7 +3599,7 @@ static void test_apic_virt_addr(void)
 {
 	test_vmcs_addr_reference(CPU_TPR_SHADOW, APIC_VIRT_ADDR,
 				 "virtual-APIC address", "Use TPR shadow",
-				 true, true);
+				 PAGE_SIZE, true, true);
 }
 
 /*
@@ -3616,7 +3618,8 @@ static void test_apic_access_addr(void)
 
 	test_vmcs_addr_reference(CPU_VIRT_APIC_ACCESSES, APIC_ACCS_ADDR,
 				 "APIC-access address",
-				 "virtualize APIC-accesses", false, false);
+				 "virtualize APIC-accesses", PAGE_SIZE,
+				 false, false);
 }
 
 static bool set_bit_pattern(u8 mask, u32 *secondary)
@@ -3903,7 +3906,8 @@ static void test_posted_intr(void)
 	test_pi_desc_addr(0xc000, true);
 
 	test_vmcs_addr_values("process-posted interrupts",
-	    POSTED_INTR_DESC_ADDR, false, false);
+			       POSTED_INTR_DESC_ADDR, PAGE_SIZE,
+			       false, false);
 
 	vmcs_write(CPU_EXEC_CTRL0, saved_primary);
 	vmcs_write(CPU_EXEC_CTRL1, saved_secondary);
@@ -4713,8 +4717,8 @@ static void test_pml(void)
 	test_vmx_controls(true, false);
 	report_prefix_pop();
 
-	test_vmcs_addr_reference(CPU_PML, PMLADDR, "PML address",
-	    "PML", false, false);
+	test_vmcs_addr_reference(CPU_PML, PMLADDR, "PML address", "PML",
+				 PAGE_SIZE, false, false);
 
 	vmcs_write(CPU_EXEC_CTRL0, primary_saved);
 	vmcs_write(CPU_EXEC_CTRL1, secondary_saved);

From patchwork Thu Dec 13 18:23:55 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Krish Sadhukhan <krish.sadhukhan@oracle.com>
X-Patchwork-Id: 10729613
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 1D85113BF
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Dec 2018 18:48:27 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 083322C856
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Dec 2018 18:48:27 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id ED3BC2C858; Thu, 13 Dec 2018 18:48:26 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-8.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI,
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 79F372C855
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Dec 2018 18:48:26 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727403AbeLMSsZ (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Thu, 13 Dec 2018 13:48:25 -0500
Received: from userp2130.oracle.com ([156.151.31.86]:55606 "EHLO
        userp2130.oracle.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726453AbeLMSsZ (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 13 Dec 2018 13:48:25 -0500
Received: from pps.filterd (userp2130.oracle.com [127.0.0.1])
        by userp2130.oracle.com (8.16.0.22/8.16.0.22) with SMTP id
 wBDIjAAZ111816;
        Thu, 13 Dec 2018 18:48:20 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
 h=from : to : cc :
 subject : date : message-id : in-reply-to : references; s=corp-2018-07-02;
 bh=KUgkl6Nx44VOVxIZ4J9Sqoawz32xEbHEE0jc5XwoKlw=;
 b=TQWD7Jqam2NPcrZPxS3uHSGcTBrKo2AOAOQBAvLWsYBq3DwWBkKqHXhHYiwJi40EOG9k
 rbiJ5P8HIw3EtacBDJOPQBQ8H4Qe5jolnNi823Xa1p5fAmvxIWxFcjpDxEtmdmflhSfK
 im4By8KK5KATd9d45kO/2ogKGotnoHu6L4vLlo3XCPPs59qSzdfkHgowvYtDfOdbDpJ0
 jSCHi3AAO/s+vRxO95ZeFTWC769gUFfofD59/9Z5w8O3H3n7nn1FRz37PxRz7PrXDLes
 GOCAyf8cLVuOYz2ljbnheig/9KNT9+GYy+rnO6DB6Bz5LzXElQrT2pY0g7i4A5Lqixob XA==
Received: from userv0022.oracle.com (userv0022.oracle.com [156.151.31.74])
        by userp2130.oracle.com with ESMTP id 2pb3n77m7q-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
 verify=OK);
        Thu, 13 Dec 2018 18:48:20 +0000
Received: from userv0122.oracle.com (userv0122.oracle.com [156.151.31.75])
        by userv0022.oracle.com (8.14.4/8.14.4) with ESMTP id wBDImKvq025975
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
 verify=OK);
        Thu, 13 Dec 2018 18:48:20 GMT
Received: from abhmp0016.oracle.com (abhmp0016.oracle.com [141.146.116.22])
        by userv0122.oracle.com (8.14.4/8.14.4) with ESMTP id wBDImKtM019917;
        Thu, 13 Dec 2018 18:48:20 GMT
Received: from ban25x6uut29.us.oracle.com (/10.153.73.29)
        by default (Oracle Beehive Gateway v4.0)
        with ESMTP ; Thu, 13 Dec 2018 10:48:19 -0800
From: Krish Sadhukhan <krish.sadhukhan@oracle.com>
To: kvm@vger.kernel.org
Cc: pbonzini@redhat.com, rkrcmar@redhat.com, jmattson@google.com
Subject: [kvm-unit-test v3 3/4] KVM nVMX: test_vmcs_page_values() needs to
 accept a bit range
Date: Thu, 13 Dec 2018 13:23:55 -0500
Message-Id: <20181213182356.29124-4-krish.sadhukhan@oracle.com>
X-Mailer: git-send-email 2.9.5
In-Reply-To: <20181213182356.29124-1-krish.sadhukhan@oracle.com>
References: <20181213182356.29124-1-krish.sadhukhan@oracle.com>
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=9106
 signatures=668679
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 suspectscore=1
 malwarescore=0
 phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=999
 adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.0.1-1810050000 definitions=main-1812130160
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

... because various addresses need to be tested for various bit ranges.

Signed-off-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Reviewed-by: Mihai Carabas <mihai.carabas@oracle.com>
Reviewed-by: Jim Mattson <jmattson@google.com>
---
 x86/vmx_tests.c | 13 ++++++++-----
 1 file changed, 8 insertions(+), 5 deletions(-)

diff --git a/x86/vmx_tests.c b/x86/vmx_tests.c
index e5cdb4b..88d815a 100644
--- a/x86/vmx_tests.c
+++ b/x86/vmx_tests.c
@@ -3487,12 +3487,13 @@ static void test_vmcs_addr_values(const char *name,
 				  enum Encoding encoding,
 				  u64 align,
 				  bool ignored,
-				  bool xfail_beyond_mapped_ram)
+				  bool xfail_beyond_mapped_ram,
+				  u32 bit_start, u32 bit_end)
 {
 	unsigned i;
 	u64 orig_val = vmcs_read(encoding);
 
-	for (i = 0; i < 64; i++)
+	for (i = bit_start; i <= bit_end; i++)
 		test_vmcs_addr(name, encoding, align, ignored,
 			       xfail_beyond_mapped_ram, 1ul << i);
 
@@ -3540,8 +3541,9 @@ static void test_vmcs_addr_reference(u32 control_bit, enum Encoding field,
 		vmcs_write(CPU_EXEC_CTRL0, primary | CPU_SECONDARY);
 		vmcs_write(CPU_EXEC_CTRL1, secondary | control_bit);
 	}
+
 	test_vmcs_addr_values(field_name, field, align, false,
-			      xfail_beyond_mapped_ram);
+			      xfail_beyond_mapped_ram, 0, 63);
 	report_prefix_pop();
 
 	report_prefix_pushf("%s disabled", control_name);
@@ -3551,7 +3553,8 @@ static void test_vmcs_addr_reference(u32 control_bit, enum Encoding field,
 		vmcs_write(CPU_EXEC_CTRL0, primary & ~CPU_SECONDARY);
 		vmcs_write(CPU_EXEC_CTRL1, secondary & ~control_bit);
 	}
-	test_vmcs_addr_values(field_name, field, align, true, false);
+
+	test_vmcs_addr_values(field_name, field, align, true, false, 0, 63);
 	report_prefix_pop();
 
 	vmcs_write(field, page_addr);
@@ -3907,7 +3910,7 @@ static void test_posted_intr(void)
 
 	test_vmcs_addr_values("process-posted interrupts",
 			       POSTED_INTR_DESC_ADDR, PAGE_SIZE,
-			       false, false);
+			       false, false, 0, 63);
 
 	vmcs_write(CPU_EXEC_CTRL0, saved_primary);
 	vmcs_write(CPU_EXEC_CTRL1, saved_secondary);

From patchwork Thu Dec 13 18:23:56 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: Krish Sadhukhan <krish.sadhukhan@oracle.com>
X-Patchwork-Id: 10729615
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 3686014E2
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Dec 2018 18:48:27 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 26A3B2C855
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Dec 2018 18:48:27 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 1AD062C85C; Thu, 13 Dec 2018 18:48:27 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-8.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI,
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9A8E52C857
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Dec 2018 18:48:26 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727455AbeLMSs0 (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Thu, 13 Dec 2018 13:48:26 -0500
Received: from userp2130.oracle.com ([156.151.31.86]:55614 "EHLO
        userp2130.oracle.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727160AbeLMSsZ (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 13 Dec 2018 13:48:25 -0500
Received: from pps.filterd (userp2130.oracle.com [127.0.0.1])
        by userp2130.oracle.com (8.16.0.22/8.16.0.22) with SMTP id
 wBDIiTCe111285;
        Thu, 13 Dec 2018 18:48:21 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
 h=from : to : cc :
 subject : date : message-id : in-reply-to : references : mime-version :
 content-type : content-transfer-encoding; s=corp-2018-07-02;
 bh=xQZ9xQilMHUSFKkk88NHAs0Ipc+IBr9ym1Ex4ITMOOI=;
 b=ZsoHYJkjt9lmvDDjLz6MRBkBCmjOIH6maI5STYL+O4ahPuPOpossN0lAm4G4psUSPHDz
 wMIcGTc45yOGpPEEUuFiJKf9SkE0yYzI9MmEak8ClozhhO3w1jZ19aAnUsXzsirgyIy4
 5WZuSHM9BNnqNgyoFLnhhaqDsWjGe09wRk0jUHRVmZoLOE6C6X5q/fqsAMJ5XYq2gYNb
 cvsIgs0qDMS41L4wWEEG7db2KVoQ1D6NfojIKsACY+LsZ52JCc6oJkd028VYXVv/53pO
 VAXa/j3vnYFAv8e3KGQE2KQMVhEO3LuAMTHEKW8d08qO6LjaJ+oWxZz3z155U/DBLipR HA==
Received: from userv0021.oracle.com (userv0021.oracle.com [156.151.31.71])
        by userp2130.oracle.com with ESMTP id 2pb3n77m7r-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
 verify=OK);
        Thu, 13 Dec 2018 18:48:21 +0000
Received: from aserv0121.oracle.com (aserv0121.oracle.com [141.146.126.235])
        by userv0021.oracle.com (8.14.4/8.14.4) with ESMTP id wBDImKdB030750
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
 verify=OK);
        Thu, 13 Dec 2018 18:48:20 GMT
Received: from abhmp0016.oracle.com (abhmp0016.oracle.com [141.146.116.22])
        by aserv0121.oracle.com (8.14.4/8.13.8) with ESMTP id wBDImKGh025789;
        Thu, 13 Dec 2018 18:48:20 GMT
Received: from ban25x6uut29.us.oracle.com (/10.153.73.29)
        by default (Oracle Beehive Gateway v4.0)
        with ESMTP ; Thu, 13 Dec 2018 10:48:20 -0800
From: Krish Sadhukhan <krish.sadhukhan@oracle.com>
To: kvm@vger.kernel.org
Cc: pbonzini@redhat.com, rkrcmar@redhat.com, jmattson@google.com
Subject: [kvm-unit-test v3 4/4] KVM nVMX: Check VM-exit MSR-store address on
 vmentry of L2 guests
Date: Thu, 13 Dec 2018 13:23:56 -0500
Message-Id: <20181213182356.29124-5-krish.sadhukhan@oracle.com>
X-Mailer: git-send-email 2.9.5
In-Reply-To: <20181213182356.29124-1-krish.sadhukhan@oracle.com>
References: <20181213182356.29124-1-krish.sadhukhan@oracle.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=9106
 signatures=668679
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 suspectscore=1
 malwarescore=0
 phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=814
 adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.0.1-1810050000 definitions=main-1812130160
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

According to section "Checks on VMX Controls" in Intel SDM vol 3C, the
following checks performed for the VM-exit MSR-store address if the
the VM-exit MSR-store count field is non-zero:

    - The lower 4 bits of the VM-exit MSR-store address must be 0.
      The address should not set any bits beyond the processor’s
      physical-address width.

    - The address of the last byte in the VM-exit MSR-store area
      should not set any bits beyond the processor’s physical-address
      width. The address of this last byte is VM-exit MSR-store address
      + (MSR count * 16) - 1. (The arithmetic used for the computation
      uses more bits than the processor’s physical-address width.)

      If IA32_VMX_BASIC[48] is read as 1, neither address should set any bits
      in the range 63:32.

Signed-off-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Reviewed-by: Mihai Carabas <mihai.carabas@oracle.com>
---
 x86/vmx_tests.c | 78 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 78 insertions(+)

diff --git a/x86/vmx_tests.c b/x86/vmx_tests.c
index 88d815a..204f2e4 100644
--- a/x86/vmx_tests.c
+++ b/x86/vmx_tests.c
@@ -4728,6 +4728,83 @@ static void test_pml(void)
 }
 
 /*
+ * The following checks are performed for the VM-exit MSR-store address if
+ * the VM-exit MSR-store count field is non-zero:
+ *
+ *    - The lower 4 bits of the VM-exit MSR-store address must be 0.
+ *      The address should not set any bits beyond the processor’s
+ *      physical-address width.
+ *
+ *    - The address of the last byte in the VM-exit MSR-store area
+ *      should not set any bits beyond the processor’s physical-address
+ *      width. The address of this last byte is VM-exit MSR-store address
+ *      + (MSR count * 16) - 1. (The arithmetic used for the computation
+ *      uses more bits than the processor’s physical-address width.)
+ *
+ * If IA32_VMX_BASIC[48] is read as 1, neither address should set any bits
+ * in the range 63:32.
+ *
+ *  [Intel SDM]
+ */
+static void test_exit_msr_store(void)
+{
+	exit_msr_store = alloc_page();
+	u64 tmp;
+	u32 exit_msr_st_cnt = 1;
+	int i;
+	u32 addr_len = 64;
+
+	vmcs_write(EXI_MSR_ST_CNT, exit_msr_st_cnt);
+
+	/* Check first 4 bits of VM-exit MSR-store address */
+	for (i = 0; i < 4; i++) {
+		tmp = (u64)exit_msr_store | 1ull << i;
+		vmcs_write(EXIT_MSR_ST_ADDR, tmp);
+		report_prefix_pushf("VM-exit MSR-store addr [4:0] %lx",
+				    tmp & 0xf);
+		test_vmx_controls(false, false);
+		report_prefix_pop();
+	}
+
+	if (basic.val & (1ul << 48))
+		addr_len = 32;
+
+	test_vmcs_addr_values("VM-exit-MSR-store address",
+				EXIT_MSR_ST_ADDR, 16, false, false,
+				4, addr_len - 1);
+
+	/*
+	 * Check last byte of VM-exit MSR-store address
+	 */
+	exit_msr_store = (struct vmx_msr_entry *)((u64)exit_msr_store & ~0xf);
+
+	for (i = (addr_len == 64 ? cpuid_maxphyaddr(): addr_len);
+							i < 64; i++) {
+		tmp = ((u64)exit_msr_store + exit_msr_st_cnt * 16 - 1) |
+			1ul << i;
+		vmcs_write(EXIT_MSR_ST_ADDR,
+			   tmp - (exit_msr_st_cnt * 16 - 1));
+                test_vmx_controls(false, false);
+	}
+
+	vmcs_write(EXI_MSR_ST_CNT, 2);
+	vmcs_write(EXIT_MSR_ST_ADDR, (1ULL << cpuid_maxphyaddr()) - 16);
+	test_vmx_controls(false, false);
+	vmcs_write(EXIT_MSR_ST_ADDR, (1ULL << cpuid_maxphyaddr()) - 32);
+	test_vmx_controls(true, false);
+	vmcs_write(EXIT_MSR_ST_ADDR, (1ULL << cpuid_maxphyaddr()) - 48);
+	test_vmx_controls(true, false);
+}
+
+/*
+ * Tests for VM-exit controls
+ */
+static void test_vm_exit_ctls(void)
+{
+	test_exit_msr_store();
+}
+
+/*
  * Check that the virtual CPU checks all of the VMX controls as
  * documented in the Intel SDM.
  */
@@ -4753,6 +4830,7 @@ static void vmx_controls_test(void)
 	test_invalid_event_injection();
 	test_vpid();
 	test_eptp();
+	test_vm_exit_ctls();
 }
 
 static bool valid_vmcs_for_vmentry(void)
