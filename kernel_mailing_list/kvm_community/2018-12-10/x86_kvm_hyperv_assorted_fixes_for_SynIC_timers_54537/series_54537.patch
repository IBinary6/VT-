From patchwork Mon Dec 10 18:47:26 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Roman Kagan <rkagan@virtuozzo.com>
X-Patchwork-Id: 10722215
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 7315891E
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Dec 2018 18:47:34 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 629E32AC88
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Dec 2018 18:47:34 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 56FF42AC91; Mon, 10 Dec 2018 18:47:34 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-8.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham
	version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C326B2AC88
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Dec 2018 18:47:33 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728700AbeLJSrc (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Mon, 10 Dec 2018 13:47:32 -0500
Received: from mail-eopbgr20106.outbound.protection.outlook.com
 ([40.107.2.106]:63839
        "EHLO EUR02-VE1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1728580AbeLJSrc (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 10 Dec 2018 13:47:32 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=virtuozzo.com;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=S4WO1/7G3P+hFB8KEgIyKjWmBYBH4prLra4RrcOVMRs=;
 b=Gnk9Y3ZLeeXQdHBvTcxiw/OHdCFnVtIkJTbhyy5KbnbY7wmdRrtggdn7Ma6QwF55zoEIN+kVnmSZIwkSziWgfnOgj3Cg4rlqdu4Mn7fH871Z3cSdA0V5UKWNsb8U/zGULyWMEIIgZG/AwRPcgIxXNNYiBmrpYISx/1qB7oOzz3w=
Received: from DB8PR08MB4092.eurprd08.prod.outlook.com (20.179.10.210) by
 DB8PR08MB4091.eurprd08.prod.outlook.com (20.179.10.209) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1404.23; Mon, 10 Dec 2018 18:47:26 +0000
Received: from DB8PR08MB4092.eurprd08.prod.outlook.com
 ([fe80::d41:d012:1944:5810]) by DB8PR08MB4092.eurprd08.prod.outlook.com
 ([fe80::d41:d012:1944:5810%6]) with mapi id 15.20.1404.026; Mon, 10 Dec 2018
 18:47:26 +0000
From: Roman Kagan <rkagan@virtuozzo.com>
To: "kvm@vger.kernel.org" <kvm@vger.kernel.org>
CC: Paolo Bonzini <pbonzini@redhat.com>,
 =?iso-8859-2?q?Radim_Kr=E8m=E1=F8?= <rkrcmar@redhat.com>,
 Vitaly Kuznetsov <vkuznets@redhat.com>
Subject: [PATCH 1/2] x86: kvm: hyperv: simplify SynIC message delivery
Thread-Topic: [PATCH 1/2] x86: kvm: hyperv: simplify SynIC message delivery
Thread-Index: AQHUkLjL/T5iKfTusk61GkZoktj/sQ==
Date: Mon, 10 Dec 2018 18:47:26 +0000
Message-ID: <20181210184717.29086-2-rkagan@virtuozzo.com>
References: <20181210184717.29086-1-rkagan@virtuozzo.com>
In-Reply-To: <20181210184717.29086-1-rkagan@virtuozzo.com>
Accept-Language: en-US, ru-RU
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [185.231.240.5]
x-clientproxiedby: HE1PR05CA0181.eurprd05.prod.outlook.com
 (2603:10a6:3:f8::29) To DB8PR08MB4092.eurprd08.prod.outlook.com
 (2603:10a6:10:ab::18)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=rkagan@virtuozzo.com;
x-ms-exchange-messagesentrepresentingtype: 1
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 
 1;DB8PR08MB4091;20:J3pG3neJCo3TCI3Qs6bdPISB2+WKZmjur4mJwvTDRM29Av893UqTW3GUY9Wuma9EhFSxKjC/t6RYNNKVkTLDwwclygMS2ZbLZyxN/p9DV/zo2yJZCPIN2/vaPhzRwVzlY1h5X31Dnfk4OlLFvxFkIt+oH+c/oDGm1X0Vr7DvTrA=
x-ms-office365-filtering-correlation-id: 524a91bd-b37f-42e7-b5c4-08d65ecfedba
x-microsoft-antispam: 
 BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(2017052603328)(7153060)(7193020);SRVR:DB8PR08MB4091;
x-ms-traffictypediagnostic: DB8PR08MB4091:
x-microsoft-antispam-prvs: 
 <DB8PR08MB4091C420BBE393D4E922BA1DC9A50@DB8PR08MB4091.eurprd08.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: 
 BCL:0;PCL:0;RULEID:(6040522)(2401047)(8121501046)(5005006)(3231455)(999002)(944501520)(52105112)(3002001)(93006095)(93001095)(10201501046)(148016)(149066)(150057)(6041310)(20161123558120)(20161123562045)(20161123564045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(201708071742011)(7699051)(76991095);SRVR:DB8PR08MB4091;BCL:0;PCL:0;RULEID:;SRVR:DB8PR08MB4091;
x-forefront-prvs: 08828D20BC
x-forefront-antispam-report: 
 SFV:NSPM;SFS:(10019020)(366004)(346002)(136003)(376002)(39850400004)(396003)(189003)(199004)(54906003)(106356001)(71200400001)(105586002)(2906002)(86362001)(71190400001)(52116002)(486006)(316002)(2501003)(6116002)(3846002)(1076002)(476003)(8936002)(2616005)(256004)(14444005)(81156014)(1730700003)(8676002)(446003)(81166006)(2351001)(11346002)(102836004)(4326008)(15650500001)(53936002)(186003)(7736002)(6512007)(26005)(5660300001)(68736007)(6506007)(386003)(76176011)(305945005)(36756003)(14454004)(6486002)(99286004)(97736004)(66066001)(478600001)(6916009)(25786009)(5640700003)(6436002)(87944003);DIR:OUT;SFP:1102;SCL:1;SRVR:DB8PR08MB4091;H:DB8PR08MB4092.eurprd08.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
received-spf: None (protection.outlook.com: virtuozzo.com does not designate
 permitted sender hosts)
x-microsoft-antispam-message-info: 
 aiXWPun6RVoXeG/pA2GjBW4uoCuIs0X/v7ydHYeicBXY35NcGBhBtW/8lYE2c0M580xR7mu3+A+ZtGb/DsGrYH6Qy952iXPFsLfT1+lfafV5/pFyNgWGDotveoelB1VpMUoW00l6dqh3fmy1hRX5FmKzcYB8/VjZppgXZRym7IZDgcFmHYqy/0PuwI2YaFNlUcOJ2O+T6TKxkE7NMUlFEZbr0pQ54wrO7yuk3ZtAGyYOAk8rPiJ8UCSh+VRTwllLQ91gX33hL7L8nA4Ih16q1H2hgh5q+80abQQ4dh4DoqsCAkKM9dxAidmecluiFX+R
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-2"
MIME-Version: 1.0
X-OriginatorOrg: virtuozzo.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 524a91bd-b37f-42e7-b5c4-08d65ecfedba
X-MS-Exchange-CrossTenant-originalarrivaltime: 10 Dec 2018 18:47:26.3404
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 0bc7f26d-0264-416e-a6fc-8352af79c58f
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DB8PR08MB4091
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

SynIC message delivery is somewhat overengineered: it pretends to follow
the ordering rules when grabbing the message slot, using atomic
operations and all that, but does it incorrectly and unnecessarily.

The correct order would be to first set .msg_pending, then atomically
replace .message_type if it was zero, and then clear .msg_pending if
the previous step was successful.  But this all is done in vcpu context
so the whole update looks atomic to the guest (it's assumed to only
access the message page from this cpu), and therefore can be done in
whatever order is most convenient (and is also the reason why the
incorrect order didn't trigger any bugs so far).

While at this, also switch to kvm_vcpu_{read,write}_guest_page, and drop
the no longer needed synic_clear_sint_msg_pending.

Signed-off-by: Roman Kagan <rkagan@virtuozzo.com>
---
 arch/x86/kvm/hyperv.c | 100 ++++++++++++++++++------------------------
 1 file changed, 42 insertions(+), 58 deletions(-)

diff --git a/arch/x86/kvm/hyperv.c b/arch/x86/kvm/hyperv.c
index 4e80080f277a..17d04d2c6d4f 100644
--- a/arch/x86/kvm/hyperv.c
+++ b/arch/x86/kvm/hyperv.c
@@ -158,32 +158,6 @@ static struct kvm_vcpu_hv_synic *synic_get(struct kvm *kvm, u32 vpidx)
 	return (synic->active) ? synic : NULL;
 }
 
-static void synic_clear_sint_msg_pending(struct kvm_vcpu_hv_synic *synic,
-					u32 sint)
-{
-	struct kvm_vcpu *vcpu = synic_to_vcpu(synic);
-	struct page *page;
-	gpa_t gpa;
-	struct hv_message *msg;
-	struct hv_message_page *msg_page;
-
-	gpa = synic->msg_page & PAGE_MASK;
-	page = kvm_vcpu_gfn_to_page(vcpu, gpa >> PAGE_SHIFT);
-	if (is_error_page(page)) {
-		vcpu_err(vcpu, "Hyper-V SynIC can't get msg page, gpa 0x%llx\n",
-			 gpa);
-		return;
-	}
-	msg_page = kmap_atomic(page);
-
-	msg = &msg_page->sint_message[sint];
-	msg->header.message_flags.msg_pending = 0;
-
-	kunmap_atomic(msg_page);
-	kvm_release_page_dirty(page);
-	kvm_vcpu_mark_page_dirty(vcpu, gpa >> PAGE_SHIFT);
-}
-
 static void kvm_hv_notify_acked_sint(struct kvm_vcpu *vcpu, u32 sint)
 {
 	struct kvm *kvm = vcpu->kvm;
@@ -194,9 +168,6 @@ static void kvm_hv_notify_acked_sint(struct kvm_vcpu *vcpu, u32 sint)
 
 	trace_kvm_hv_notify_acked_sint(vcpu->vcpu_id, sint);
 
-	if (synic->msg_page & HV_SYNIC_SIMP_ENABLE)
-		synic_clear_sint_msg_pending(synic, sint);
-
 	/* Try to deliver pending Hyper-V SynIC timers messages */
 	stimers_pending = 0;
 	for (idx = 0; idx < ARRAY_SIZE(hv_vcpu->stimer); idx++) {
@@ -589,41 +560,54 @@ static int synic_deliver_msg(struct kvm_vcpu_hv_synic *synic, u32 sint,
 			     struct hv_message *src_msg)
 {
 	struct kvm_vcpu *vcpu = synic_to_vcpu(synic);
-	struct page *page;
-	gpa_t gpa;
-	struct hv_message *dst_msg;
+	int msg_off = offsetof(struct hv_message_page, sint_message[sint]);
+	gfn_t msg_page_gfn;
+	struct hv_message_header hv_hdr;
 	int r;
-	struct hv_message_page *msg_page;
 
 	if (!(synic->msg_page & HV_SYNIC_SIMP_ENABLE))
 		return -ENOENT;
 
-	gpa = synic->msg_page & PAGE_MASK;
-	page = kvm_vcpu_gfn_to_page(vcpu, gpa >> PAGE_SHIFT);
-	if (is_error_page(page))
+	msg_page_gfn = synic->msg_page >> PAGE_SHIFT;
+
+	/*
+	 * Strictly following the spec-mandated ordering would assume setting
+	 * .msg_pending before checking .message_type.  However, this function
+	 * is only called in vcpu context so the entire update is atomic from
+	 * guest POV and thus the exact order here doesn't matter.
+	 */
+	r = kvm_vcpu_read_guest_page(vcpu, msg_page_gfn, &hv_hdr.message_type,
+				     msg_off + offsetof(struct hv_message,
+							header.message_type),
+				     sizeof(hv_hdr.message_type));
+	if (r < 0)
+		return r;
+
+	if (hv_hdr.message_type != HVMSG_NONE) {
+		hv_hdr.message_flags.msg_pending = 1;
+		r = kvm_vcpu_write_guest_page(vcpu, msg_page_gfn,
+					      &hv_hdr.message_flags,
+					      msg_off +
+					      offsetof(struct hv_message,
+						       header.message_flags),
+					      sizeof(hv_hdr.message_flags));
+		if (r < 0)
+			return r;
+		return -EAGAIN;
+	}
+
+	r = kvm_vcpu_write_guest_page(vcpu, msg_page_gfn, src_msg, msg_off,
+				      sizeof(src_msg->header) +
+				      src_msg->header.payload_size);
+	if (r < 0)
+		return r;
+
+	r = synic_set_irq(synic, sint);
+	if (r < 0)
+		return r;
+	if (r == 0)
 		return -EFAULT;
-
-	msg_page = kmap_atomic(page);
-	dst_msg = &msg_page->sint_message[sint];
-	if (sync_cmpxchg(&dst_msg->header.message_type, HVMSG_NONE,
-			 src_msg->header.message_type) != HVMSG_NONE) {
-		dst_msg->header.message_flags.msg_pending = 1;
-		r = -EAGAIN;
-	} else {
-		memcpy(&dst_msg->u.payload, &src_msg->u.payload,
-		       src_msg->header.payload_size);
-		dst_msg->header.message_type = src_msg->header.message_type;
-		dst_msg->header.payload_size = src_msg->header.payload_size;
-		r = synic_set_irq(synic, sint);
-		if (r >= 1)
-			r = 0;
-		else if (r == 0)
-			r = -EFAULT;
-	}
-	kunmap_atomic(msg_page);
-	kvm_release_page_dirty(page);
-	kvm_vcpu_mark_page_dirty(vcpu, gpa >> PAGE_SHIFT);
-	return r;
+	return 0;
 }
 
 static int stimer_send_msg(struct kvm_vcpu_hv_stimer *stimer)

From patchwork Mon Dec 10 18:47:27 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Roman Kagan <rkagan@virtuozzo.com>
X-Patchwork-Id: 10722217
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 4BA326C5
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Dec 2018 18:47:36 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3C8922AC88
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Dec 2018 18:47:36 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 30A672AC91; Mon, 10 Dec 2018 18:47:36 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-8.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham
	version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BDDE42AC88
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Dec 2018 18:47:35 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728774AbeLJSrf (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Mon, 10 Dec 2018 13:47:35 -0500
Received: from mail-eopbgr20106.outbound.protection.outlook.com
 ([40.107.2.106]:63839
        "EHLO EUR02-VE1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1728650AbeLJSre (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 10 Dec 2018 13:47:34 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=virtuozzo.com;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=VbYtpjUlFHZAheEKdbLJ5whVESyUsaTguCH4873SovM=;
 b=hZ6DRKqQUzA3awCEGK5wT1CrHVGKXEt2Fdcf9HnUYGwRluUCFgYcNyjupj1SStSpUFfoXrgQWKS6BwL2Ui51fFECoHppadifS0DHjzfM7n32+PXX5O8u3Dg+3eB4keXbxKAOsmM4dEw9ibUlZMnyNC5vMqDxeV4oMuqsaKu4V2k=
Received: from DB8PR08MB4092.eurprd08.prod.outlook.com (20.179.10.210) by
 DB8PR08MB4091.eurprd08.prod.outlook.com (20.179.10.209) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1404.23; Mon, 10 Dec 2018 18:47:27 +0000
Received: from DB8PR08MB4092.eurprd08.prod.outlook.com
 ([fe80::d41:d012:1944:5810]) by DB8PR08MB4092.eurprd08.prod.outlook.com
 ([fe80::d41:d012:1944:5810%6]) with mapi id 15.20.1404.026; Mon, 10 Dec 2018
 18:47:27 +0000
From: Roman Kagan <rkagan@virtuozzo.com>
To: "kvm@vger.kernel.org" <kvm@vger.kernel.org>
CC: Paolo Bonzini <pbonzini@redhat.com>,
 =?iso-8859-2?q?Radim_Kr=E8m=E1=F8?= <rkrcmar@redhat.com>,
 Vitaly Kuznetsov <vkuznets@redhat.com>
Subject: [PATCH 2/2] x86: kvm: hyperv: don't retry message delivery for
 periodic timers
Thread-Topic: [PATCH 2/2] x86: kvm: hyperv: don't retry message delivery for
 periodic timers
Thread-Index: AQHUkLjLylqEzCX6CESL5mSMNKU7kg==
Date: Mon, 10 Dec 2018 18:47:27 +0000
Message-ID: <20181210184717.29086-3-rkagan@virtuozzo.com>
References: <20181210184717.29086-1-rkagan@virtuozzo.com>
In-Reply-To: <20181210184717.29086-1-rkagan@virtuozzo.com>
Accept-Language: en-US, ru-RU
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [185.231.240.5]
x-clientproxiedby: HE1PR05CA0181.eurprd05.prod.outlook.com
 (2603:10a6:3:f8::29) To DB8PR08MB4092.eurprd08.prod.outlook.com
 (2603:10a6:10:ab::18)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=rkagan@virtuozzo.com;
x-ms-exchange-messagesentrepresentingtype: 1
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 
 1;DB8PR08MB4091;20:L6EW5nviBIQaNcLMAQ7psUsJ9p4sM8JAZ+mGsyjU4pa3LW78sj3+mJXkUM4DXiAodByyn+VZ7lhmPxbVYK4ABN08xjOGFeUeOJi3M80DyrN5x44IZUZ1PYN9hCcwhcPowCQqyEWiU0B4aT4eTyZLplCMNbKcujpJJOCj6M3IlkE=
x-ms-office365-filtering-correlation-id: b2fda3d8-19bc-4b70-14da-08d65ecfee41
x-microsoft-antispam: 
 BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(2017052603328)(7153060)(7193020);SRVR:DB8PR08MB4091;
x-ms-traffictypediagnostic: DB8PR08MB4091:
x-microsoft-antispam-prvs: 
 <DB8PR08MB409110906E07B90AB2744D70C9A50@DB8PR08MB4091.eurprd08.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: 
 BCL:0;PCL:0;RULEID:(6040522)(2401047)(8121501046)(5005006)(3231455)(999002)(944501520)(52105112)(3002001)(93006095)(93001095)(10201501046)(148016)(149066)(150057)(6041310)(20161123558120)(20161123562045)(20161123564045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(201708071742011)(7699051)(76991095);SRVR:DB8PR08MB4091;BCL:0;PCL:0;RULEID:;SRVR:DB8PR08MB4091;
x-forefront-prvs: 08828D20BC
x-forefront-antispam-report: 
 SFV:NSPM;SFS:(10019020)(366004)(346002)(136003)(376002)(39850400004)(396003)(189003)(199004)(54906003)(106356001)(71200400001)(105586002)(2906002)(86362001)(71190400001)(52116002)(486006)(316002)(2501003)(6116002)(3846002)(1076002)(476003)(8936002)(2616005)(256004)(14444005)(81156014)(1730700003)(8676002)(446003)(81166006)(2351001)(11346002)(102836004)(4326008)(15650500001)(53936002)(186003)(7736002)(6512007)(26005)(5660300001)(68736007)(6506007)(386003)(76176011)(305945005)(36756003)(14454004)(6486002)(99286004)(97736004)(66066001)(478600001)(6916009)(25786009)(5640700003)(6436002);DIR:OUT;SFP:1102;SCL:1;SRVR:DB8PR08MB4091;H:DB8PR08MB4092.eurprd08.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
received-spf: None (protection.outlook.com: virtuozzo.com does not designate
 permitted sender hosts)
x-microsoft-antispam-message-info: 
 VGsEqZBJa0/OOg0JwNnC9+vkDh+aDE8tTYlLlADTr57sYGE1KeYxlyj18GA6I+RnTycFCsjDIkOKIpHwAu2lp4An3b1qKuanBpK/jLQoXGaD1JmMGqPve27fFFbA/nnS7/VL9/i4WdVZpoY5TXfFHnTlpXeSZBNuXFWunFDCZcH99wTifWc81dSKcb9joPAGNTAjIGioB25XPQ/89lWpavm6U0itBXn6PQkCwsAGUpFO/hO99VVcjKoUeLnuP0t4+EMV0k5KPuu7M+P+Lv8cTEqwAEgPQgz4e6bta2HqhmUcRZ+YmjDSN92QSK3Q6GFR
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-2"
MIME-Version: 1.0
X-OriginatorOrg: virtuozzo.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 b2fda3d8-19bc-4b70-14da-08d65ecfee41
X-MS-Exchange-CrossTenant-originalarrivaltime: 10 Dec 2018 18:47:27.2270
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 0bc7f26d-0264-416e-a6fc-8352af79c58f
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DB8PR08MB4091
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

The SynIC message delivery protocol allows the message originator to
request, should the message slot be busy, to be notified when it's free.

However, this is unnecessary and even undesirable for messages generated
by SynIC timers in periodic mode: if the period is short enough compared
to the time the guest spends in the timer interrupt handler, so the
timer ticks start piling up, the excessive interactions due to this
notification and retried message delivery only makes the things worse.

[This was observed, in particular, with Windows L2 guests setting
(temporarily) the periodic timer to 2 kHz, and spending hundreds of
microseconds in the timer interrupt handler due to several L2->L1 exits;
under some load in L0 this could exceed 500 us so the timer ticks
started to pile up and the guest livelocked.]

Relieve the situation somewhat by not retrying message delivery for
periodic SynIC timers.  This appears to remain within the "lazy" lost
ticks policy for SynIC timers as implemented in KVM.

Note that it doesn't solve the fundamental problem of livelocking the
guest with a periodic timer whose period is smaller than the time needed
to process a tick, but it makes it a bit less likely to be triggered.

Signed-off-by: Roman Kagan <rkagan@virtuozzo.com>
Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
---
 arch/x86/kvm/hyperv.c | 13 +++++++++++--
 1 file changed, 11 insertions(+), 2 deletions(-)

diff --git a/arch/x86/kvm/hyperv.c b/arch/x86/kvm/hyperv.c
index 17d04d2c6d4f..3f2b93ad9ccf 100644
--- a/arch/x86/kvm/hyperv.c
+++ b/arch/x86/kvm/hyperv.c
@@ -557,7 +557,7 @@ static int stimer_get_count(struct kvm_vcpu_hv_stimer *stimer, u64 *pcount)
 }
 
 static int synic_deliver_msg(struct kvm_vcpu_hv_synic *synic, u32 sint,
-			     struct hv_message *src_msg)
+			     struct hv_message *src_msg, bool no_retry)
 {
 	struct kvm_vcpu *vcpu = synic_to_vcpu(synic);
 	int msg_off = offsetof(struct hv_message_page, sint_message[sint]);
@@ -584,6 +584,9 @@ static int synic_deliver_msg(struct kvm_vcpu_hv_synic *synic, u32 sint,
 		return r;
 
 	if (hv_hdr.message_type != HVMSG_NONE) {
+		if (no_retry)
+			return 0;
+
 		hv_hdr.message_flags.msg_pending = 1;
 		r = kvm_vcpu_write_guest_page(vcpu, msg_page_gfn,
 					      &hv_hdr.message_flags,
@@ -616,11 +619,17 @@ static int stimer_send_msg(struct kvm_vcpu_hv_stimer *stimer)
 	struct hv_message *msg = &stimer->msg;
 	struct hv_timer_message_payload *payload =
 			(struct hv_timer_message_payload *)&msg->u.payload;
+	/*
+	 * don't retry message delivery for periodic ticks, otherwise they may
+	 * pile up
+	 */
+	bool no_retry = stimer->config & HV_STIMER_PERIODIC;
 
 	payload->expiration_time = stimer->exp_time;
 	payload->delivery_time = get_time_ref_counter(vcpu->kvm);
 	return synic_deliver_msg(vcpu_to_synic(vcpu),
-				 HV_STIMER_SINT(stimer->config), msg);
+				 HV_STIMER_SINT(stimer->config), msg,
+				 no_retry);
 }
 
 static void stimer_expiration(struct kvm_vcpu_hv_stimer *stimer)
