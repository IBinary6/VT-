From patchwork Tue Oct 16 21:29:18 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jim Mattson <jmattson@google.com>
X-Patchwork-Id: 10644217
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 14BAB1057
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:43 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 02DD12A9D3
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:43 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E90952A9DF; Tue, 16 Oct 2018 21:29:42 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-15.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI,
	USER_IN_DEF_DKIM_WL autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A02942A9D3
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:42 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726697AbeJQFV7 (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 17 Oct 2018 01:21:59 -0400
Received: from mail-qt1-f202.google.com ([209.85.160.202]:47697 "EHLO
        mail-qt1-f202.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726067AbeJQFV6 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 17 Oct 2018 01:21:58 -0400
Received: by mail-qt1-f202.google.com with SMTP id q6-v6so26313027qtb.14
        for <kvm@vger.kernel.org>; Tue, 16 Oct 2018 14:29:40 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:message-id:mime-version:subject:from:to:cc;
        bh=5Ts/0NkdqoWgY6PIu4fUvqQNr/PVE5Ppmc1DS6u8J1Y=;
        b=JNLDUjczQ/ikcH35VoXjff7ttxgMQSQA9lIycVp6LpqT6tUW5jeLzJ5UENXIrkiSUa
         XLzuJokc0NC7+FwWu7FA+1c+SWF6kIsDAowD7dW6y3GenbTHkDjC53XL53SqeAwyqbQq
         TvyBm39WRv4EMKpkKiVOVdKLVI6jI1tteJDJVVwYViGJBTAkvVc4GWvCNQb1dHwAy0eG
         v3wGv12grq0qL81BvRzD3TMsdhvOiFpRAoPe74PsLy/VkvDiuteLW5JXUyCO78+BAd1d
         CttRENRz1Tb98KwtZm0uWFth2WLHytHEcy1pq4HdJXNitYc60ZpJvZncKVxUfYHnXghq
         Yxhw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:message-id:mime-version:subject:from:to:cc;
        bh=5Ts/0NkdqoWgY6PIu4fUvqQNr/PVE5Ppmc1DS6u8J1Y=;
        b=bMJwwym33Yowwx1Fs33Cqmz4jeZFKdUEoT9NyS139RoNLtDDHxJPcrCjJPELX5/uCo
         hRX1l6cg9VS4Sr0Tt/014ootPEk9/UkWtrRJRwf7hVQX3VggPhsh7a5TCFds4LbjHp+v
         DPq3YZPNxJ3uruJARTlFyeRWe2npu2uGENA425bOGo3AVg+y4OXrEWakfTtmx2Qjmpjj
         LrIHVjRZDEogYJeTnmIjLrxgl1f/p1Tm5mrxmmwTrVqU988saPs+8xKSRNdMufw61gD4
         Tcmz3AsVFLNiu+h2d1Hp2YmwNOq9MYtxLA+wUqeARPbs37fIhHMrZNMaMiu5/JoKmnl9
         YNLQ==
X-Gm-Message-State: ABuFfogkm8eAEVjNj0VpV30bSg16Wv1O9iUj4d9+FcGkXaZ1dD7V0ydE
        znGp5wNf6/JCmGURDTpsHmqcOQmz3MpiTkvq2Rt5EFgI8v01qepQDDUUAe3NKiI3TbbB2LAaAVM
        11B/93KfAcfC8/Pwa9xWJcDkRsPkoxxYogJzi/JQyNE/oAhpyZCdadglyBpCoQ+g=
X-Google-Smtp-Source: 
 ACcGV63qCHrubzWkcbPNCsDhxY4uLtSoa/eNnwhDAU5xTr6dgrqdYUlrqNIYpuBmQWDrQS3C+G9RBzxRnt4UYw==
X-Received: by 2002:ae9:c00b:: with SMTP id
 u11-v6mr6389812qkk.53.1539725379981;
 Tue, 16 Oct 2018 14:29:39 -0700 (PDT)
Date: Tue, 16 Oct 2018 14:29:18 -0700
Message-Id: <20181016212924.130307-1-jmattson@google.com>
Mime-Version: 1.0
X-Mailer: git-send-email 2.19.1.331.ge82ca0e54c-goog
Subject: [PATCH v2 1/7] KVM: Documentation: Fix omission in struct
 kvm_vcpu_events
From: Jim Mattson <jmattson@google.com>
To: kvm@vger.kernel.org
Cc: Peter Shier <pshier@google.com>,
        Liran Alon <liran.alon@oracle.com>,
        Paolo Bonzini <pbonzini@redhat.com>,
        Jim Mattson <jmattson@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

The header file indicates that there are 36 reserved bytes at the end
of this structure. Adjust the documentation to agree with the header
file.

Signed-off-by: Jim Mattson <jmattson@google.com>
---
 Documentation/virtual/kvm/api.txt | 1 +
 1 file changed, 1 insertion(+)

diff --git a/Documentation/virtual/kvm/api.txt b/Documentation/virtual/kvm/api.txt
index 647f94128a85..c6121f660b51 100644
--- a/Documentation/virtual/kvm/api.txt
+++ b/Documentation/virtual/kvm/api.txt
@@ -873,6 +873,7 @@ struct kvm_vcpu_events {
 		__u8 smm_inside_nmi;
 		__u8 latched_init;
 	} smi;
+	__u32 reserved[9];
 };
 
 Only two fields are defined in the flags field:

From patchwork Tue Oct 16 21:29:19 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jim Mattson <jmattson@google.com>
X-Patchwork-Id: 10644219
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id B7D3F1057
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:45 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A97962A9D3
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:45 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 9DB062A9DF; Tue, 16 Oct 2018 21:29:45 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-15.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI,
	USER_IN_DEF_DKIM_WL autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BD4FB2A9D3
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:44 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726957AbeJQFWB (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 17 Oct 2018 01:22:01 -0400
Received: from mail-qt1-f201.google.com ([209.85.160.201]:35019 "EHLO
        mail-qt1-f201.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726067AbeJQFWB (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 17 Oct 2018 01:22:01 -0400
Received: by mail-qt1-f201.google.com with SMTP id s56-v6so26324275qtk.2
        for <kvm@vger.kernel.org>; Tue, 16 Oct 2018 14:29:42 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=cHl3tynkaR04a7D0zzKIExoPIkAlOHpBDrUKtcxKEos=;
        b=jKjVoR1pN6xGooAHiN9Cb+EAc4mj4ozuId5FHLIi/HUW/cqCJ55vsZScab28cBcqcg
         4CJwWLvJSeWiWA03yLLlqowu0irhrtO6613HZazoMeBnpVg3SLqZMREy5vyk1a+t1VEC
         cC1ysao0W/mtRn6SEGBkfPOXwToIDw08ZKUhqNCrNq2A7OUbxLETSxpusG6qXlCSpzTF
         EZjcO05fQ2EPvDOIMzR8XUkQFeYfYR/iYpbCu6Ac5XiLPO2/V59/SejScqMlUlVyq/CJ
         +VmAhFkaExsZImQjJ05m38VhC1xc6nkZASmYQIigSk1SPwpZteJWzsrsLiFENXo5Aatp
         jjdw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=cHl3tynkaR04a7D0zzKIExoPIkAlOHpBDrUKtcxKEos=;
        b=A4sTkdMG3JqeTiIL1dQiwjaynv6BG7Ji5oFRhvSJAvswQp7nLLpwRQKaG0rEPIBtjo
         MkyMMvvWjWTnRtrGHcxDRJKZkffjbCiGwB2qIJCOqoJDfyQmRD16JKIiLPO/i+UgnLnB
         byaMT6dZwh0cATHFXaD6tGkSqn4JhNQOyxT9yYNBJnlK4oUT8dFQaquxSe7KLSui5qB0
         PIzIXHy8F9tRVhJXGTOmmsa8G9kC2ty6N3liJJT7H7ylzkCPFPKqDC3F2TXNm/pSAUw0
         r1F8WC34ZvuGHkKh2+NJk59k4TNoqLdUbgTCkjg9HbOLTP1y7VRhxuw8T6NqgolimwNx
         UD+w==
X-Gm-Message-State: ABuFfoh/QUb0xZp0GVxqnzhxYFVa9DPM7Stfg4CRD8QIJQ1IlnEICkDg
        qlSfkoo8eGBoKMzbj6t7VG6DhiCfB0DhvXCGwy58KZbJ72PO3LkFlag1EyOaaobTSCoKdM/aSa5
        S44douF02ShLRMdPy16Hdm7xWJ+ln2wRE3tiuCW0N1CGEROydnwUR88nf097RCTY=
X-Google-Smtp-Source: 
 ACcGV62DAC8XXTM1PZT0vw1K8GSN3wgOHS1EgBDkh9nXSWQVjlA5vQU8G+wOFq/rCx9GWYagFVPuxgESTpLGog==
X-Received: by 2002:ac8:2d62:: with SMTP id
 o31-v6mr19730358qta.11.1539725382109;
 Tue, 16 Oct 2018 14:29:42 -0700 (PDT)
Date: Tue, 16 Oct 2018 14:29:19 -0700
In-Reply-To: <20181016212924.130307-1-jmattson@google.com>
Message-Id: <20181016212924.130307-2-jmattson@google.com>
Mime-Version: 1.0
References: <20181016212924.130307-1-jmattson@google.com>
X-Mailer: git-send-email 2.19.1.331.ge82ca0e54c-goog
Subject: [PATCH v2 2/7] kvm: x86: Add has_payload and payload to
 kvm_queued_exception
From: Jim Mattson <jmattson@google.com>
To: kvm@vger.kernel.org
Cc: Peter Shier <pshier@google.com>,
        Liran Alon <liran.alon@oracle.com>,
        Paolo Bonzini <pbonzini@redhat.com>,
        Jim Mattson <jmattson@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

The payload associated with a #PF exception is the linear address of
the fault to be loaded into CR2 when the fault is delivered. The
payload associated with a #DB exception is a mask of the DR6 bits to
be set (or in the case of DR6.RTM, cleared) when the fault is
delivered. Add fields has_payload and payload to kvm_queued_exception
to track payloads for pending exceptions.

The new fields are introduced here, but for now, they are just cleared.

Reported-by: Jim Mattson <jmattson@google.com>
Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Jim Mattson <jmattson@google.com>
---
 arch/x86/include/asm/kvm_host.h | 2 ++
 arch/x86/kvm/x86.c              | 8 ++++++++
 2 files changed, 10 insertions(+)

diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h
index 09b2e3e2cf1b..69aea8886435 100644
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@ -585,6 +585,8 @@ struct kvm_vcpu_arch {
 		bool has_error_code;
 		u8 nr;
 		u32 error_code;
+		unsigned long payload;
+		bool has_payload;
 		u8 nested_apf;
 	} exception;
 
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index ca717737347e..eae639ce52be 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -431,6 +431,8 @@ static void kvm_multiple_exception(struct kvm_vcpu *vcpu,
 		vcpu->arch.exception.has_error_code = has_error;
 		vcpu->arch.exception.nr = nr;
 		vcpu->arch.exception.error_code = error_code;
+		vcpu->arch.exception.has_payload = false;
+		vcpu->arch.exception.payload = 0;
 		return;
 	}
 
@@ -455,6 +457,8 @@ static void kvm_multiple_exception(struct kvm_vcpu *vcpu,
 		vcpu->arch.exception.has_error_code = true;
 		vcpu->arch.exception.nr = DF_VECTOR;
 		vcpu->arch.exception.error_code = 0;
+		vcpu->arch.exception.has_payload = false;
+		vcpu->arch.exception.payload = 0;
 	} else
 		/* replace previous exception with a new one in a hope
 		   that instruction re-execution will regenerate lost
@@ -3429,6 +3433,8 @@ static int kvm_vcpu_ioctl_x86_set_vcpu_events(struct kvm_vcpu *vcpu,
 	vcpu->arch.exception.nr = events->exception.nr;
 	vcpu->arch.exception.has_error_code = events->exception.has_error_code;
 	vcpu->arch.exception.error_code = events->exception.error_code;
+	vcpu->arch.exception.has_payload = false;
+	vcpu->arch.exception.payload = 0;
 
 	vcpu->arch.interrupt.injected = events->interrupt.injected;
 	vcpu->arch.interrupt.nr = events->interrupt.nr;
@@ -9463,6 +9469,8 @@ void kvm_arch_async_page_present(struct kvm_vcpu *vcpu,
 			vcpu->arch.exception.nr = 0;
 			vcpu->arch.exception.has_error_code = false;
 			vcpu->arch.exception.error_code = 0;
+			vcpu->arch.exception.has_payload = false;
+			vcpu->arch.exception.payload = 0;
 		} else if (!apf_put_user(vcpu, KVM_PV_REASON_PAGE_READY)) {
 			fault.vector = PF_VECTOR;
 			fault.error_code_valid = true;

From patchwork Tue Oct 16 21:29:20 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jim Mattson <jmattson@google.com>
X-Patchwork-Id: 10644221
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 02CAF109C
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:48 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E63FE2A9D3
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:47 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D89F52A9DF; Tue, 16 Oct 2018 21:29:47 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-15.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI,
	USER_IN_DEF_DKIM_WL autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1BBEB2A9D3
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:47 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726067AbeJQFWE (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 17 Oct 2018 01:22:04 -0400
Received: from mail-qk1-f202.google.com ([209.85.222.202]:46816 "EHLO
        mail-qk1-f202.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726936AbeJQFWD (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 17 Oct 2018 01:22:03 -0400
Received: by mail-qk1-f202.google.com with SMTP id p128-v6so25356796qke.13
        for <kvm@vger.kernel.org>; Tue, 16 Oct 2018 14:29:44 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=dl3miHqEtDT7kq+acxo3oyJnceGywhi6XVSRntJrLXo=;
        b=ppT1WS+UWJQ5kR6s6sL2NsF0d1BBOIEGKUdyqITRThQK5ljnS0v6nDTC9e1PkkZ2Wz
         1yIGb1gkLRdsfNK/FSkXXq56PwOFTnOpXd6qSfLMZJ1edHG/pyAqk7SY8myIj6QR8Wmx
         +1/exHVyrX+ROGVMSKnh0ZWTPOAC5qHaBKnM5VbFlfQLpYyK9t9e7k4i8o//dL+WJd8c
         8OgGR4abQ5ZBJaoRTSPfP6I2TX/0nCjeFzpEngXKhXLBHXWUZvA7Sva2AJ+8hIFYdUNP
         cC82anluJIYVB6kvsGm956GaivC7wj4PZCYvBXmQs/4UGaQL2LzUH0DsaItdXcyQHqbP
         Hp8g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=dl3miHqEtDT7kq+acxo3oyJnceGywhi6XVSRntJrLXo=;
        b=nNsOsrt+NYYqF6P8EKx4x4tKdGKQZQ51iPN4v61O7W/SIm6qyehLNWLcMkv8wwrGMb
         iA7HJmp5aWCLsbwd68Gm02Wxqm4QJxI7ymxdsjWTRB1M1IBoFpF8Ywxp14stOoOzgZpt
         BnO1XxtSalA4rOtHtmyNWy90WGYDR6IarVLiyb2kmcsoThEbf+B0637luF960OCKrug0
         R1jBR5GPFNqwI+fLB9Y4ssb23JDDVKBJjUgbKRgUZTXkMsavtIjYsJy6wN03SkvS0fvb
         p9fylGGgmLx2Oc63M/+TWf6dxkqgPj56JkvyjrOqQmXufGgjnr5GFAR2RXwbEiQ2cJIR
         v8Ew==
X-Gm-Message-State: ABuFfohK39bixM+iXj5Lr8EK5uJA7ge+M3pFk+y9DFPLbJ3inx0eTgPq
        BlknZluwxOgT4bhQeVpmbbDELB6ZjWIKshGfZzwcRRWQyZm6M9H1sdAyUBmXEsqy1LDlLmFbrQq
        X+/xIZOYo6M+aZRpkAd3XSugd7pLGafI/BaES6MwyJNybgim8PkUU/c0HdeTW3TI=
X-Google-Smtp-Source: 
 ACcGV62ZLrQobexNy5fjXdTr4paWWcgfZG+hHWPA0TokZeUslYxD8ZCzsA9QP0YyGf90cSnLziGKKbT9Atdi4Q==
X-Received: by 2002:a0c:d4b3:: with SMTP id u48mr19829271qvh.12.1539725384169;
 Tue, 16 Oct 2018 14:29:44 -0700 (PDT)
Date: Tue, 16 Oct 2018 14:29:20 -0700
In-Reply-To: <20181016212924.130307-1-jmattson@google.com>
Message-Id: <20181016212924.130307-3-jmattson@google.com>
Mime-Version: 1.0
References: <20181016212924.130307-1-jmattson@google.com>
X-Mailer: git-send-email 2.19.1.331.ge82ca0e54c-goog
Subject: [PATCH v2 3/7] kvm: x86: Add exception payload fields to
 kvm_vcpu_events
From: Jim Mattson <jmattson@google.com>
To: kvm@vger.kernel.org
Cc: Peter Shier <pshier@google.com>,
        Liran Alon <liran.alon@oracle.com>,
        Paolo Bonzini <pbonzini@redhat.com>,
        Jim Mattson <jmattson@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

The per-VM capability KVM_CAP_EXCEPTION_PAYLOAD (to be introduced in a
later commit) adds the following fields to struct kvm_vcpu_events:
exception_has_payload, exception_payload, and exception.pending.

With this capability set, all of the details of vcpu->arch.exception,
including the payload for a pending exception, are reported to
userspace in response to KVM_GET_VCPU_EVENTS.

With this capability clear, the original ABI is preserved, and the
exception.injected field is set for either pending or injected
exceptions.

When userspace calls KVM_SET_VCPU_EVENTS with
KVM_CAP_EXCEPTION_PAYLOAD clear, exception.injected is no longer
translated to exception.pending. KVM_SET_VCPU_EVENTS can now only
establish a pending exception when KVM_CAP_EXCEPTION_PAYLOAD is set.

Reported-by: Jim Mattson <jmattson@google.com>
Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Jim Mattson <jmattson@google.com>
---
 Documentation/virtual/kvm/api.txt     | 24 ++++++++---
 arch/x86/include/asm/kvm_host.h       |  1 +
 arch/x86/include/uapi/asm/kvm.h       |  7 ++-
 arch/x86/kvm/x86.c                    | 61 ++++++++++++++++++++-------
 tools/arch/x86/include/uapi/asm/kvm.h |  7 ++-
 5 files changed, 74 insertions(+), 26 deletions(-)

diff --git a/Documentation/virtual/kvm/api.txt b/Documentation/virtual/kvm/api.txt
index c6121f660b51..065093f5be92 100644
--- a/Documentation/virtual/kvm/api.txt
+++ b/Documentation/virtual/kvm/api.txt
@@ -850,7 +850,7 @@ struct kvm_vcpu_events {
 		__u8 injected;
 		__u8 nr;
 		__u8 has_error_code;
-		__u8 pad;
+		__u8 pending;
 		__u32 error_code;
 	} exception;
 	struct {
@@ -873,16 +873,23 @@ struct kvm_vcpu_events {
 		__u8 smm_inside_nmi;
 		__u8 latched_init;
 	} smi;
-	__u32 reserved[9];
+	__u8 reserved[27];
+	__u8 exception_has_payload;
+	__u64 exception_payload;
 };
 
-Only two fields are defined in the flags field:
+The following bits are defined in the flags field:
 
-- KVM_VCPUEVENT_VALID_SHADOW may be set in the flags field to signal that
+- KVM_VCPUEVENT_VALID_SHADOW may be set to signal that
   interrupt.shadow contains a valid state.
 
-- KVM_VCPUEVENT_VALID_SMM may be set in the flags field to signal that
-  smi contains a valid state.
+- KVM_VCPUEVENT_VALID_SMM may be set to signal that smi contains a
+  valid state.
+
+- KVM_VCPUEVENT_VALID_PAYLOAD may be set to signal that the
+  exception_has_payload, exception_payload, and exception.pending
+  fields contain a valid state. This bit will be set whenever
+  KVM_CAP_EXCEPTION_PAYLOAD is enabled.
 
 ARM/ARM64:
 
@@ -962,6 +969,11 @@ shall be written into the VCPU.
 
 KVM_VCPUEVENT_VALID_SMM can only be set if KVM_CAP_X86_SMM is available.
 
+If KVM_CAP_EXCEPTION_PAYLOAD is enabled, KVM_VCPUEVENT_VALID_PAYLOAD
+can be set in the flags field to signal that the
+exception_has_payload, exception_payload, and exception.pending fields
+contain a valid state and shall be written into the VCPU.
+
 ARM/ARM64:
 
 Set the pending SError exception state for this VCPU. It is not possible to
diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h
index 69aea8886435..026229a593f2 100644
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@ -873,6 +873,7 @@ struct kvm_arch {
 	bool x2apic_broadcast_quirk_disabled;
 
 	bool guest_can_read_msr_platform_info;
+	bool exception_payload_enabled;
 };
 
 struct kvm_vm_stat {
diff --git a/arch/x86/include/uapi/asm/kvm.h b/arch/x86/include/uapi/asm/kvm.h
index fd23d5778ea1..b3a1d75be030 100644
--- a/arch/x86/include/uapi/asm/kvm.h
+++ b/arch/x86/include/uapi/asm/kvm.h
@@ -288,6 +288,7 @@ struct kvm_reinject_control {
 #define KVM_VCPUEVENT_VALID_SIPI_VECTOR	0x00000002
 #define KVM_VCPUEVENT_VALID_SHADOW	0x00000004
 #define KVM_VCPUEVENT_VALID_SMM		0x00000008
+#define KVM_VCPUEVENT_VALID_PAYLOAD	0x00000010
 
 /* Interrupt shadow states */
 #define KVM_X86_SHADOW_INT_MOV_SS	0x01
@@ -299,7 +300,7 @@ struct kvm_vcpu_events {
 		__u8 injected;
 		__u8 nr;
 		__u8 has_error_code;
-		__u8 pad;
+		__u8 pending;
 		__u32 error_code;
 	} exception;
 	struct {
@@ -322,7 +323,9 @@ struct kvm_vcpu_events {
 		__u8 smm_inside_nmi;
 		__u8 latched_init;
 	} smi;
-	__u32 reserved[9];
+	__u8 reserved[27];
+	__u8 exception_has_payload;
+	__u64 exception_payload;
 };
 
 /* for KVM_GET/SET_DEBUGREGS */
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index eae639ce52be..851dabef7ff3 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -3366,19 +3366,33 @@ static void kvm_vcpu_ioctl_x86_get_vcpu_events(struct kvm_vcpu *vcpu,
 					       struct kvm_vcpu_events *events)
 {
 	process_nmi(vcpu);
+
 	/*
-	 * FIXME: pass injected and pending separately.  This is only
-	 * needed for nested virtualization, whose state cannot be
-	 * migrated yet.  For now we can combine them.
+	 * The API doesn't provide the instruction length for software
+	 * exceptions, so don't report them. As long as the guest RIP
+	 * isn't advanced, we should expect to encounter the exception
+	 * again.
 	 */
-	events->exception.injected =
-		(vcpu->arch.exception.pending ||
-		 vcpu->arch.exception.injected) &&
-		!kvm_exception_is_soft(vcpu->arch.exception.nr);
+	if (kvm_exception_is_soft(vcpu->arch.exception.nr)) {
+		events->exception.injected = 0;
+		events->exception.pending = 0;
+	} else {
+		events->exception.injected = vcpu->arch.exception.injected;
+		events->exception.pending = vcpu->arch.exception.pending;
+		/*
+		 * For ABI compatibility, deliberately conflate
+		 * pending and injected exceptions when
+		 * KVM_CAP_EXCEPTION_PAYLOAD isn't enabled.
+		 */
+		if (!vcpu->kvm->arch.exception_payload_enabled)
+			events->exception.injected |=
+				vcpu->arch.exception.pending;
+	}
 	events->exception.nr = vcpu->arch.exception.nr;
 	events->exception.has_error_code = vcpu->arch.exception.has_error_code;
-	events->exception.pad = 0;
 	events->exception.error_code = vcpu->arch.exception.error_code;
+	events->exception_has_payload = vcpu->arch.exception.has_payload;
+	events->exception_payload = vcpu->arch.exception.payload;
 
 	events->interrupt.injected =
 		vcpu->arch.interrupt.injected && !vcpu->arch.interrupt.soft;
@@ -3402,6 +3416,9 @@ static void kvm_vcpu_ioctl_x86_get_vcpu_events(struct kvm_vcpu *vcpu,
 	events->flags = (KVM_VCPUEVENT_VALID_NMI_PENDING
 			 | KVM_VCPUEVENT_VALID_SHADOW
 			 | KVM_VCPUEVENT_VALID_SMM);
+	if (vcpu->kvm->arch.exception_payload_enabled)
+		events->flags |= KVM_VCPUEVENT_VALID_PAYLOAD;
+
 	memset(&events->reserved, 0, sizeof(events->reserved));
 }
 
@@ -3413,12 +3430,24 @@ static int kvm_vcpu_ioctl_x86_set_vcpu_events(struct kvm_vcpu *vcpu,
 	if (events->flags & ~(KVM_VCPUEVENT_VALID_NMI_PENDING
 			      | KVM_VCPUEVENT_VALID_SIPI_VECTOR
 			      | KVM_VCPUEVENT_VALID_SHADOW
-			      | KVM_VCPUEVENT_VALID_SMM))
+			      | KVM_VCPUEVENT_VALID_SMM
+			      | KVM_VCPUEVENT_VALID_PAYLOAD))
 		return -EINVAL;
 
-	if (events->exception.injected &&
-	    (events->exception.nr > 31 || events->exception.nr == NMI_VECTOR ||
-	     is_guest_mode(vcpu)))
+	if (events->flags & KVM_VCPUEVENT_VALID_PAYLOAD) {
+		if (!vcpu->kvm->arch.exception_payload_enabled)
+			return -EINVAL;
+		if (events->exception.pending)
+			events->exception.injected = 0;
+		else
+			events->exception_has_payload = 0;
+	} else {
+		events->exception.pending = 0;
+		events->exception_has_payload = 0;
+	}
+
+	if ((events->exception.injected || events->exception.pending) &&
+	    (events->exception.nr > 31 || events->exception.nr == NMI_VECTOR))
 		return -EINVAL;
 
 	/* INITs are latched while in SMM */
@@ -3428,13 +3457,13 @@ static int kvm_vcpu_ioctl_x86_set_vcpu_events(struct kvm_vcpu *vcpu,
 		return -EINVAL;
 
 	process_nmi(vcpu);
-	vcpu->arch.exception.injected = false;
-	vcpu->arch.exception.pending = events->exception.injected;
+	vcpu->arch.exception.injected = events->exception.injected;
+	vcpu->arch.exception.pending = events->exception.pending;
 	vcpu->arch.exception.nr = events->exception.nr;
 	vcpu->arch.exception.has_error_code = events->exception.has_error_code;
 	vcpu->arch.exception.error_code = events->exception.error_code;
-	vcpu->arch.exception.has_payload = false;
-	vcpu->arch.exception.payload = 0;
+	vcpu->arch.exception.has_payload = events->exception_has_payload;
+	vcpu->arch.exception.payload = events->exception_payload;
 
 	vcpu->arch.interrupt.injected = events->interrupt.injected;
 	vcpu->arch.interrupt.nr = events->interrupt.nr;
diff --git a/tools/arch/x86/include/uapi/asm/kvm.h b/tools/arch/x86/include/uapi/asm/kvm.h
index 86299efa804a..e833dbf34bfd 100644
--- a/tools/arch/x86/include/uapi/asm/kvm.h
+++ b/tools/arch/x86/include/uapi/asm/kvm.h
@@ -288,6 +288,7 @@ struct kvm_reinject_control {
 #define KVM_VCPUEVENT_VALID_SIPI_VECTOR	0x00000002
 #define KVM_VCPUEVENT_VALID_SHADOW	0x00000004
 #define KVM_VCPUEVENT_VALID_SMM		0x00000008
+#define KVM_VCPUEVENT_VALID_PAYLOAD	0x00000010
 
 /* Interrupt shadow states */
 #define KVM_X86_SHADOW_INT_MOV_SS	0x01
@@ -299,7 +300,7 @@ struct kvm_vcpu_events {
 		__u8 injected;
 		__u8 nr;
 		__u8 has_error_code;
-		__u8 pad;
+		__u8 pending;
 		__u32 error_code;
 	} exception;
 	struct {
@@ -322,7 +323,9 @@ struct kvm_vcpu_events {
 		__u8 smm_inside_nmi;
 		__u8 latched_init;
 	} smi;
-	__u32 reserved[9];
+	__u8 reserved[27];
+	__u8 exception_has_payload;
+	__u64 exception_payload;
 };
 
 /* for KVM_GET/SET_DEBUGREGS */

From patchwork Tue Oct 16 21:29:21 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jim Mattson <jmattson@google.com>
X-Patchwork-Id: 10644223
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 9D83B109C
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:49 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8B3892A9D3
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:49 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 799EA2A9DF; Tue, 16 Oct 2018 21:29:49 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-15.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI,
	USER_IN_DEF_DKIM_WL autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0D52E2A9D3
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:49 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727017AbeJQFWF (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 17 Oct 2018 01:22:05 -0400
Received: from mail-it1-f202.google.com ([209.85.166.202]:37629 "EHLO
        mail-it1-f202.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726936AbeJQFWF (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 17 Oct 2018 01:22:05 -0400
Received: by mail-it1-f202.google.com with SMTP id y73-v6so27374154ita.2
        for <kvm@vger.kernel.org>; Tue, 16 Oct 2018 14:29:46 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=Lz14G+tECSYvrr2AFJEm/F7tRZzrUrUogAk5E8VBy/E=;
        b=mORBkI73YP2DFK75juvTSCWIEdNQpTBkRhYLnlSqbYlNuFjl2B8REZhF7tSy8I+g5u
         lzI9BxVh1IoIgkR6bdxHxEuk1mFaEEE91mGRSM5WYy4lp7ZBDxA4QpKMUFANaCOeVUsa
         QKM89SaX41rPhjXjo5Axk39RVvZYGIt+8I+zD2624XH5xRIteTZdwBgq90UGsN+zO66z
         SB4IsviDemEjNNYW0dN8ELftSvn/7TtfIj1oIbWB5LVuAcINr3TJSLsnUHAnKnCjrGoD
         E6+oVfD0EviquYPDly3c4ZxlIcW6bZf3L0XV1mscTSU56Vrq4FoTM6U2Eu9+GaY3ffXm
         QI1A==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=Lz14G+tECSYvrr2AFJEm/F7tRZzrUrUogAk5E8VBy/E=;
        b=VrgDzXeM569RiHwEq2CacnwpedRrVxB1vFLTaRqAjDSjsaGCTgYbYAZU7r33Borsu3
         xqoO2kjl2TM34E533zZ4efBphYoa6OC0VIGqPZweF5nzbZyma1idZ65UVqAKhmcuseV6
         X3xKiBR6EXhQryoT9Miecm/R6qwwv0PJZz5KA/udAEBpeyD8A/8EEZbL7l+r64FeZ7jm
         LNVpNP/Cit4Dobssl9lIrCX5t2/D5j9bBD9Rtk2TbsatVPKqhXH5hzY3IStwjO5Db6PJ
         THB+SG8GlagXbQ1E8wlCWWDIu5AT6RXMki5FDx1VXNwzaAZYdS7C8VHtvMy9I2JRjDtA
         C7uQ==
X-Gm-Message-State: ABuFfoiEk4WeSFxCsINBUDut7EBo93M9IBgXkJ2rr6wvcSU4MPcDn58S
        Ygr102SfcGPTdgqel6j0uzG8rTZ2lFKRn3OjJLWXbKc2Zo2yU02eeJkiU5FRi7XN8CqEc01hlTQ
        9Vv1BgSDTnxqKGh14Qeq+Z5Au6LbzwAGVEqekVxPbaEt09cWjPUtrFgocGL+LfJk=
X-Google-Smtp-Source: 
 ACcGV629QeUL7Ji8HdZgP4nSDVOT1xgkajsgN1Uq7izKpAvUe1q++j17Ridos1g4a9ljsnwbTt4/nRQk8uC09g==
X-Received: by 2002:a24:fe01:: with SMTP id
 w1-v6mr21448680ith.0.1539725386134;
 Tue, 16 Oct 2018 14:29:46 -0700 (PDT)
Date: Tue, 16 Oct 2018 14:29:21 -0700
In-Reply-To: <20181016212924.130307-1-jmattson@google.com>
Message-Id: <20181016212924.130307-4-jmattson@google.com>
Mime-Version: 1.0
References: <20181016212924.130307-1-jmattson@google.com>
X-Mailer: git-send-email 2.19.1.331.ge82ca0e54c-goog
Subject: [PATCH v2 4/7] kvm: x86: Add payload operands to
 kvm_multiple_exception
From: Jim Mattson <jmattson@google.com>
To: kvm@vger.kernel.org
Cc: Peter Shier <pshier@google.com>,
        Liran Alon <liran.alon@oracle.com>,
        Paolo Bonzini <pbonzini@redhat.com>,
        Jim Mattson <jmattson@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

kvm_multiple_exception now takes two additional operands: has_payload
and payload, so that updates to CR2 (and DR6 under VMX) can be delayed
until the exception is delivered. This is necessary to properly
emulate VMX or SVM hardware behavior for nested virtualization.

The new behavior is triggered by
vcpu->kvm->arch.exception_payload_enabled, which will (later) be set
by a new per-VM capability, KVM_CAP_EXCEPTION_PAYLOAD.

Reported-by: Jim Mattson <jmattson@google.com>
Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Jim Mattson <jmattson@google.com>
---
 arch/x86/kvm/x86.c | 22 +++++++++++++++-------
 1 file changed, 15 insertions(+), 7 deletions(-)

diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 851dabef7ff3..dcd2cd6351fb 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -402,7 +402,7 @@ static int exception_type(int vector)
 
 static void kvm_multiple_exception(struct kvm_vcpu *vcpu,
 		unsigned nr, bool has_error, u32 error_code,
-		bool reinject)
+	        bool has_payload, unsigned long payload, bool reinject)
 {
 	u32 prev_nr;
 	int class1, class2;
@@ -424,6 +424,14 @@ static void kvm_multiple_exception(struct kvm_vcpu *vcpu,
 			 */
 			WARN_ON_ONCE(vcpu->arch.exception.pending);
 			vcpu->arch.exception.injected = true;
+			if (WARN_ON_ONCE(has_payload)) {
+				/*
+				 * A reinjected event has already
+				 * delivered its payload.
+				 */
+				has_payload = false;
+				payload = 0;
+			}
 		} else {
 			vcpu->arch.exception.pending = true;
 			vcpu->arch.exception.injected = false;
@@ -431,8 +439,8 @@ static void kvm_multiple_exception(struct kvm_vcpu *vcpu,
 		vcpu->arch.exception.has_error_code = has_error;
 		vcpu->arch.exception.nr = nr;
 		vcpu->arch.exception.error_code = error_code;
-		vcpu->arch.exception.has_payload = false;
-		vcpu->arch.exception.payload = 0;
+		vcpu->arch.exception.has_payload = has_payload;
+		vcpu->arch.exception.payload = payload;
 		return;
 	}
 
@@ -468,13 +476,13 @@ static void kvm_multiple_exception(struct kvm_vcpu *vcpu,
 
 void kvm_queue_exception(struct kvm_vcpu *vcpu, unsigned nr)
 {
-	kvm_multiple_exception(vcpu, nr, false, 0, false);
+	kvm_multiple_exception(vcpu, nr, false, 0, false, 0, false);
 }
 EXPORT_SYMBOL_GPL(kvm_queue_exception);
 
 void kvm_requeue_exception(struct kvm_vcpu *vcpu, unsigned nr)
 {
-	kvm_multiple_exception(vcpu, nr, false, 0, true);
+	kvm_multiple_exception(vcpu, nr, false, 0, false, 0, true);
 }
 EXPORT_SYMBOL_GPL(kvm_requeue_exception);
 
@@ -521,13 +529,13 @@ EXPORT_SYMBOL_GPL(kvm_inject_nmi);
 
 void kvm_queue_exception_e(struct kvm_vcpu *vcpu, unsigned nr, u32 error_code)
 {
-	kvm_multiple_exception(vcpu, nr, true, error_code, false);
+	kvm_multiple_exception(vcpu, nr, true, error_code, false, 0, false);
 }
 EXPORT_SYMBOL_GPL(kvm_queue_exception_e);
 
 void kvm_requeue_exception_e(struct kvm_vcpu *vcpu, unsigned nr, u32 error_code)
 {
-	kvm_multiple_exception(vcpu, nr, true, error_code, true);
+	kvm_multiple_exception(vcpu, nr, true, error_code, false, 0, true);
 }
 EXPORT_SYMBOL_GPL(kvm_requeue_exception_e);
 

From patchwork Tue Oct 16 21:29:22 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jim Mattson <jmattson@google.com>
X-Patchwork-Id: 10644225
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 7DE621057
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:51 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6F12C2A9D3
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:51 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 632FD2A9DF; Tue, 16 Oct 2018 21:29:51 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-15.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI,
	USER_IN_DEF_DKIM_WL autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B64182A9D3
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:50 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727042AbeJQFWH (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 17 Oct 2018 01:22:07 -0400
Received: from mail-qk1-f201.google.com ([209.85.222.201]:51561 "EHLO
        mail-qk1-f201.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726936AbeJQFWH (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 17 Oct 2018 01:22:07 -0400
Received: by mail-qk1-f201.google.com with SMTP id x75-v6so24879716qka.18
        for <kvm@vger.kernel.org>; Tue, 16 Oct 2018 14:29:48 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=xaCxoW4tBwgLfUca2HzN2KL9ZMTCiTfV/4NCplqiscs=;
        b=kgs5fiC2+njJbIm0KSr/yqMD9NhGEHHAZyzWiX2O3RDIonzWSq29hxl/eMtrqiFGVd
         hUXx/U1OjwqIREzyI1eUJFKvIjooqhVleynPuzrJ8cfQrNBJBKf4fME69sDsR/Toy3oj
         JOkGaBqvbjqZOz7U1CR7F37exLXnqNqS2NYCztDpZoXBRjtK27b51MLVE0tiSAzPxiNX
         igPoOot5x5gAYLWTZR0NuM/F3Y4gnw9SUt9zMZPEKKqg4JbSopSPAMeviYVqBvMl263O
         xpZEH9UTMorRN9ituY37DYeIf1evHP3JwOiiZdMPv2u4rnJiw0OiT+yYucaBdbpl7GH1
         QoKA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=xaCxoW4tBwgLfUca2HzN2KL9ZMTCiTfV/4NCplqiscs=;
        b=kNLnqzPpxzWiqSzBHidHX3OhgwaWJQrnM5EjMuLXWTLB2INjrno6W8GOGZ3keCGu+L
         KbsqJUANqr7khEALxybGpYOXsP3N90i4WQ2YR+X/4mrM8q5xDxQ3KQSO/z3785l4ZbNo
         3bsjXmGAcjU3l2uCInpfw+YOXGFyQQ1U/UgEIfO/DjIgvaxlqRjAt3c7mb3lhPVmsYcS
         l6lSPTzXmfNXJEwbLrBTanjcX+rKBmyhOTuJ20Fpz+ijxOFy4QLiC2Zl1IR0Wk9tAVvB
         inxuA51DzkAdfrOmKOzolJkLT1UtjTqB1l4RgC3wmlxDCJdsQqfg8jhw/kfHn1W6TFHo
         zEIA==
X-Gm-Message-State: ABuFfoh/GyEDzAGwmn2CKeaGTAJD++gXXq7oUrThSJf4137rHhavLNgp
        FxlD4MuzYjJA+aS3L3K1x7a+j7PDVP5vDdkyeIB+y2mHtgbkHQXnvDyzR55E3Jm4a3rSHRKHPMR
        MaJ4FxG7fzXidXl6bA+X2lXwjtXRrlUDHnj+e0hqeEHI774R01sq1MK2AsiH8XKA=
X-Google-Smtp-Source: 
 ACcGV61OnFbTtH+56+EjEyMX97qYeF96H6DtEla98Q8e7defsOtQMSp8DxjH5t0xhnqomhL0DDgmNPCrvU2PcQ==
X-Received: by 2002:aed:25dd:: with SMTP id
 y29-v6mr19574613qtc.10.1539725388476;
 Tue, 16 Oct 2018 14:29:48 -0700 (PDT)
Date: Tue, 16 Oct 2018 14:29:22 -0700
In-Reply-To: <20181016212924.130307-1-jmattson@google.com>
Message-Id: <20181016212924.130307-5-jmattson@google.com>
Mime-Version: 1.0
References: <20181016212924.130307-1-jmattson@google.com>
X-Mailer: git-send-email 2.19.1.331.ge82ca0e54c-goog
Subject: [PATCH v2 5/7] kvm: x86: Defer setting of CR2 until #PF delivery
From: Jim Mattson <jmattson@google.com>
To: kvm@vger.kernel.org
Cc: Peter Shier <pshier@google.com>,
        Liran Alon <liran.alon@oracle.com>,
        Paolo Bonzini <pbonzini@redhat.com>,
        Jim Mattson <jmattson@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

When exception payloads are enabled by userspace (which is not yet
possible) and a #PF is raised in L2, defer the setting of CR2 until
the #PF is delivered. This allows the L1 hypervisor to intercept the
fault before CR2 is modified.

For backwards compatibility, when exception payloads are not enabled
by userspace, kvm_multiple_exception modifies CR2 when the #PF
exception is raised.

Reported-by: Jim Mattson <jmattson@google.com>
Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Jim Mattson <jmattson@google.com>
---
 arch/x86/kvm/svm.c | 13 ++++++------
 arch/x86/kvm/vmx.c | 19 +++++++++---------
 arch/x86/kvm/x86.c | 49 ++++++++++++++++++++++++++++++++++++++++++----
 arch/x86/kvm/x86.h |  2 ++
 4 files changed, 62 insertions(+), 21 deletions(-)

diff --git a/arch/x86/kvm/svm.c b/arch/x86/kvm/svm.c
index 61ccfb13899e..6079e4dec263 100644
--- a/arch/x86/kvm/svm.c
+++ b/arch/x86/kvm/svm.c
@@ -809,6 +809,8 @@ static void svm_queue_exception(struct kvm_vcpu *vcpu)
 	    nested_svm_check_exception(svm, nr, has_error_code, error_code))
 		return;
 
+	kvm_deliver_exception_payload(&svm->vcpu);
+
 	if (nr == BP_VECTOR && !static_cpu_has(X86_FEATURE_NRIPS)) {
 		unsigned long rip, old_rip = kvm_rip_read(&svm->vcpu);
 
@@ -2969,16 +2971,13 @@ static int nested_svm_check_exception(struct vcpu_svm *svm, unsigned nr,
 	svm->vmcb->control.exit_info_1 = error_code;
 
 	/*
-	 * FIXME: we should not write CR2 when L1 intercepts an L2 #PF exception.
-	 * The fix is to add the ancillary datum (CR2 or DR6) to structs
-	 * kvm_queued_exception and kvm_vcpu_events, so that CR2 and DR6 can be
-	 * written only when inject_pending_event runs (DR6 would written here
-	 * too).  This should be conditional on a new capability---if the
-	 * capability is disabled, kvm_multiple_exception would write the
-	 * ancillary information to CR2 or DR6, for backwards ABI-compatibility.
+	 * EXITINFO2 is undefined for all exception intercepts other
+	 * than #PF.
 	 */
 	if (svm->vcpu.arch.exception.nested_apf)
 		svm->vmcb->control.exit_info_2 = svm->vcpu.arch.apf.nested_apf_token;
+	else if (svm->vcpu.arch.exception.has_payload)
+		svm->vmcb->control.exit_info_2 = svm->vcpu.arch.exception.payload;
 	else
 		svm->vmcb->control.exit_info_2 = svm->vcpu.arch.cr2;
 
diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index e665aa7167cf..6d55a2213e12 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -3272,27 +3272,24 @@ static int nested_vmx_check_exception(struct kvm_vcpu *vcpu, unsigned long *exit
 {
 	struct vmcs12 *vmcs12 = get_vmcs12(vcpu);
 	unsigned int nr = vcpu->arch.exception.nr;
+	bool has_payload = vcpu->arch.exception.has_payload;
+	unsigned long payload = vcpu->arch.exception.payload;
 
 	if (nr == PF_VECTOR) {
 		if (vcpu->arch.exception.nested_apf) {
 			*exit_qual = vcpu->arch.apf.nested_apf_token;
 			return 1;
 		}
-		/*
-		 * FIXME: we must not write CR2 when L1 intercepts an L2 #PF exception.
-		 * The fix is to add the ancillary datum (CR2 or DR6) to structs
-		 * kvm_queued_exception and kvm_vcpu_events, so that CR2 and DR6
-		 * can be written only when inject_pending_event runs.  This should be
-		 * conditional on a new capability---if the capability is disabled,
-		 * kvm_multiple_exception would write the ancillary information to
-		 * CR2 or DR6, for backwards ABI-compatibility.
-		 */
 		if (nested_vmx_is_page_fault_vmexit(vmcs12,
 						    vcpu->arch.exception.error_code)) {
-			*exit_qual = vcpu->arch.cr2;
+			*exit_qual = has_payload ? payload : vcpu->arch.cr2;
 			return 1;
 		}
 	} else {
+		/*
+		 * FIXME: we must not write DR6 when L1 intercepts an
+		 * L2 #DB exception.
+		 */
 		if (vmcs12->exception_bitmap & (1u << nr)) {
 			if (nr == DB_VECTOR)
 				*exit_qual = vcpu->arch.dr6;
@@ -3326,6 +3323,8 @@ static void vmx_queue_exception(struct kvm_vcpu *vcpu)
 	u32 error_code = vcpu->arch.exception.error_code;
 	u32 intr_info = nr | INTR_INFO_VALID_MASK;
 
+	kvm_deliver_exception_payload(vcpu);
+
 	if (has_error_code) {
 		vmcs_write32(VM_ENTRY_EXCEPTION_ERROR_CODE, error_code);
 		intr_info |= INTR_INFO_DELIVER_CODE_MASK;
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index dcd2cd6351fb..872da22c7514 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -400,6 +400,26 @@ static int exception_type(int vector)
 	return EXCPT_FAULT;
 }
 
+void kvm_deliver_exception_payload(struct kvm_vcpu *vcpu)
+{
+	unsigned nr = vcpu->arch.exception.nr;
+	bool has_payload = vcpu->arch.exception.has_payload;
+	unsigned long payload = vcpu->arch.exception.payload;
+
+	if (!has_payload)
+		return;
+
+	switch (nr) {
+	case PF_VECTOR:
+		vcpu->arch.cr2 = payload;
+		break;
+	}
+
+	vcpu->arch.exception.has_payload = false;
+	vcpu->arch.exception.payload = 0;
+}
+EXPORT_SYMBOL_GPL(kvm_deliver_exception_payload);
+
 static void kvm_multiple_exception(struct kvm_vcpu *vcpu,
 		unsigned nr, bool has_error, u32 error_code,
 	        bool has_payload, unsigned long payload, bool reinject)
@@ -441,6 +461,18 @@ static void kvm_multiple_exception(struct kvm_vcpu *vcpu,
 		vcpu->arch.exception.error_code = error_code;
 		vcpu->arch.exception.has_payload = has_payload;
 		vcpu->arch.exception.payload = payload;
+		/*
+		 * In guest mode, payload delivery should be deferred,
+		 * so that the L1 hypervisor can intercept #PF before
+		 * CR2 is modified.  However, for ABI compatibility
+		 * with KVM_GET_VCPU_EVENTS and KVM_SET_VCPU_EVENTS,
+		 * we can't delay payload delivery unless userspace
+		 * has enabled this functionality via the per-VM
+		 * capability, KVM_CAP_EXCEPTION_PAYLOAD.
+		 */
+		if (!vcpu->kvm->arch.exception_payload_enabled ||
+		    !is_guest_mode(vcpu))
+			kvm_deliver_exception_payload(vcpu);
 		return;
 	}
 
@@ -486,6 +518,13 @@ void kvm_requeue_exception(struct kvm_vcpu *vcpu, unsigned nr)
 }
 EXPORT_SYMBOL_GPL(kvm_requeue_exception);
 
+static void kvm_queue_exception_e_p(struct kvm_vcpu *vcpu, unsigned nr,
+				    u32 error_code, unsigned long payload)
+{
+	kvm_multiple_exception(vcpu, nr, true, error_code,
+			       true, payload, false);
+}
+
 int kvm_complete_insn_gp(struct kvm_vcpu *vcpu, int err)
 {
 	if (err)
@@ -502,11 +541,13 @@ void kvm_inject_page_fault(struct kvm_vcpu *vcpu, struct x86_exception *fault)
 	++vcpu->stat.pf_guest;
 	vcpu->arch.exception.nested_apf =
 		is_guest_mode(vcpu) && fault->async_page_fault;
-	if (vcpu->arch.exception.nested_apf)
+	if (vcpu->arch.exception.nested_apf) {
 		vcpu->arch.apf.nested_apf_token = fault->address;
-	else
-		vcpu->arch.cr2 = fault->address;
-	kvm_queue_exception_e(vcpu, PF_VECTOR, fault->error_code);
+		kvm_queue_exception_e(vcpu, PF_VECTOR, fault->error_code);
+	} else {
+		kvm_queue_exception_e_p(vcpu, PF_VECTOR, fault->error_code,
+					fault->address);
+	}
 }
 EXPORT_SYMBOL_GPL(kvm_inject_page_fault);
 
diff --git a/arch/x86/kvm/x86.h b/arch/x86/kvm/x86.h
index 67b9568613f3..224cd0a47568 100644
--- a/arch/x86/kvm/x86.h
+++ b/arch/x86/kvm/x86.h
@@ -266,6 +266,8 @@ int kvm_write_guest_virt_system(struct kvm_vcpu *vcpu,
 
 int handle_ud(struct kvm_vcpu *vcpu);
 
+void kvm_deliver_exception_payload(struct kvm_vcpu *vcpu);
+
 void kvm_vcpu_mtrr_init(struct kvm_vcpu *vcpu);
 u8 kvm_mtrr_get_guest_memory_type(struct kvm_vcpu *vcpu, gfn_t gfn);
 bool kvm_mtrr_valid(struct kvm_vcpu *vcpu, u32 msr, u64 data);

From patchwork Tue Oct 16 21:29:23 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jim Mattson <jmattson@google.com>
X-Patchwork-Id: 10644227
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 01B12109C
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:54 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E5FA32A9D3
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:53 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D91CC2A9DF; Tue, 16 Oct 2018 21:29:53 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-15.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI,
	USER_IN_DEF_DKIM_WL autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 513832A9D3
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:53 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727074AbeJQFWK (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 17 Oct 2018 01:22:10 -0400
Received: from mail-io1-f74.google.com ([209.85.166.74]:32847 "EHLO
        mail-io1-f74.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726936AbeJQFWK (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 17 Oct 2018 01:22:10 -0400
Received: by mail-io1-f74.google.com with SMTP id c5-v6so22996671ioa.0
        for <kvm@vger.kernel.org>; Tue, 16 Oct 2018 14:29:50 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=5zndTkr8W4c/jKOuDMvmm1BdmYkimk+6/dr5INJij+c=;
        b=J673UMP8DKGdCI/6Bl/8nd/c6pCtt/hxUjSs9gRZs/AYaQYlMxIl30FZ431vw2Hnf9
         Tloal/V+XB0x1OWPpjnnbjCJpqXgLIhzhxb1e64/88BaPHNn+4YtrM4Eu4hCzv9d+Ywt
         EIvuZPNyRBhQ+f4193/kZxQZoYIEx28q9i9QA5KkjVsgFsuhFcsW8SnFQYGR76oOr3KQ
         yPOihTA6GSfEWrp/KovrFvuaz4QJ66kfmUUWsVRvWE/Bwr1OxFodHqaG4KzBzzg3iTCh
         JZt6cOIuqEr8jC6TF7ByWLz5dRUlWmO1aLoeEW+dFHtX2xXOKyIitdqCKoxjUtE5fjn7
         X45w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=5zndTkr8W4c/jKOuDMvmm1BdmYkimk+6/dr5INJij+c=;
        b=Visti7pEJjSxeMLBjjglxEJjgXOZPANMG1IYQWn9i4N4GNlHRPL7U/5wXx7nIScMm5
         ZvTarizOpLzgjuA3GwumcEEIynvbcsP9pMzeYpmRS21ttihBzV9rjCPmWj4/7jUeZ5n9
         ERKPYm7zPO6Ec0+Aq3Kmpk5aOhDc5lPC0i9Oym4eI3Hym2i694o1c5sunsS1hpWoHyWD
         ilKVN84md1mlhS1jraOC51XZQBmauEqgvU8obqBKkzCRnIwuFHVirSkQ4r4ddZ0YU6IC
         P8oQ4+oIbg0RuhZoOcJUX+BRpuFC+coU7aO+BM9VzS5I0HiiZnp5NlnjnpmRXP9kGNb+
         l+kg==
X-Gm-Message-State: ABuFfoiT1byhCec0yAY8a60VvkrdeJuaNl8ecsZwHrfw6YDaDP+rAz64
        lLEzUE3gtR9i3jYLAVCknpWvglL7wlbfz+Wb17u3nh7OM6Oh1OnNHiDJvnniYaIT8EOPl29v5HA
        uC4MkZ2g5rG7cyqDLlV0J9whB8Ve0k0HqRDm6M1Y46ph8Ey7K4ZrUilMhNpJI4Zk=
X-Google-Smtp-Source: 
 ACcGV62J4kAIc2JtbcNkUbrysHBXd5KDshxlDIlEJG4sTVvGcOUOpgE4GQnUEW9bgXfriOzwc4tlWVqq0zY6wA==
X-Received: by 2002:a24:7f05:: with SMTP id
 r5-v6mr17603012itc.2.1539725390374;
 Tue, 16 Oct 2018 14:29:50 -0700 (PDT)
Date: Tue, 16 Oct 2018 14:29:23 -0700
In-Reply-To: <20181016212924.130307-1-jmattson@google.com>
Message-Id: <20181016212924.130307-6-jmattson@google.com>
Mime-Version: 1.0
References: <20181016212924.130307-1-jmattson@google.com>
X-Mailer: git-send-email 2.19.1.331.ge82ca0e54c-goog
Subject: [PATCH v2 6/7] kvm: vmx: Defer setting of DR6 until #DB delivery
From: Jim Mattson <jmattson@google.com>
To: kvm@vger.kernel.org
Cc: Peter Shier <pshier@google.com>,
        Liran Alon <liran.alon@oracle.com>,
        Paolo Bonzini <pbonzini@redhat.com>,
        Jim Mattson <jmattson@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

When exception payloads are enabled by userspace (which is not yet
possible) and a #DB is raised in L2, defer the setting of DR6 until
later. Under VMX, this allows the L1 hypervisor to intercept the fault
before DR6 is modified. Under SVM, DR6 is modified before L1 can
intercept the fault (as has always been the case with DR7).

Note that the payload associated with a #DB exception includes only
the "new DR6 bits." When the payload is delievered, DR6.B0-B3 will be
cleared and DR6.RTM will be set prior to merging in the new DR6 bits.

Also note that bit 16 in the "new DR6 bits" is set to indicate that a
debug exception (#DB) or a breakpoint exception (#BP) occurred inside
an RTM region while advanced debugging of RTM transactional regions
was enabled. Though the reverse of DR6.RTM, this makes the #DB payload
field compatible with both the pending debug exceptions field under
VMX and the exit qualification for #DB exceptions under VMX.

Reported-by: Jim Mattson <jmattson@google.com>
Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Jim Mattson <jmattson@google.com>
---
 arch/x86/kvm/vmx.c | 18 ++++--------
 arch/x86/kvm/x86.c | 69 ++++++++++++++++++++++++++++++++++------------
 2 files changed, 58 insertions(+), 29 deletions(-)

diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index 6d55a2213e12..fd61a0ad3e6d 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -3285,18 +3285,12 @@ static int nested_vmx_check_exception(struct kvm_vcpu *vcpu, unsigned long *exit
 			*exit_qual = has_payload ? payload : vcpu->arch.cr2;
 			return 1;
 		}
-	} else {
-		/*
-		 * FIXME: we must not write DR6 when L1 intercepts an
-		 * L2 #DB exception.
-		 */
-		if (vmcs12->exception_bitmap & (1u << nr)) {
-			if (nr == DB_VECTOR)
-				*exit_qual = vcpu->arch.dr6;
-			else
-				*exit_qual = 0;
-			return 1;
-		}
+	} else if (vmcs12->exception_bitmap & (1u << nr)) {
+		if (nr == DB_VECTOR)
+			*exit_qual = has_payload ? payload : vcpu->arch.dr6;
+		else
+			*exit_qual = 0;
+		return 1;
 	}
 
 	return 0;
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 872da22c7514..d68c34a74590 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -410,6 +410,28 @@ void kvm_deliver_exception_payload(struct kvm_vcpu *vcpu)
 		return;
 
 	switch (nr) {
+	case DB_VECTOR:
+		/*
+		 * "Certain debug exceptions may clear bit 0-3.  The
+		 * remaining contents of the DR6 register are never
+		 * cleared by the processor".
+		 */
+		vcpu->arch.dr6 &= ~DR_TRAP_BITS;
+		/*
+		 * DR6.RTM is set by all #DB exceptions that don't clear it.
+		 */
+		vcpu->arch.dr6 |= DR6_RTM;
+		vcpu->arch.dr6 |= payload;
+		/*
+		 * Bit 16 should be set in the payload whenever the #DB
+		 * exception should clear DR6.RTM. This makes the payload
+		 * compatible with the pending debug exceptions under VMX.
+		 * Though not currently documented in the SDM, this also
+		 * makes the payload compatible with the exit qualification
+		 * for #DB exceptions under VMX.
+		 */
+		vcpu->arch.dr6 ^= payload & DR6_RTM;
+		break;
 	case PF_VECTOR:
 		vcpu->arch.cr2 = payload;
 		break;
@@ -464,11 +486,13 @@ static void kvm_multiple_exception(struct kvm_vcpu *vcpu,
 		/*
 		 * In guest mode, payload delivery should be deferred,
 		 * so that the L1 hypervisor can intercept #PF before
-		 * CR2 is modified.  However, for ABI compatibility
-		 * with KVM_GET_VCPU_EVENTS and KVM_SET_VCPU_EVENTS,
-		 * we can't delay payload delivery unless userspace
-		 * has enabled this functionality via the per-VM
-		 * capability, KVM_CAP_EXCEPTION_PAYLOAD.
+		 * CR2 is modified (or intercept #DB before DR6 is
+		 * modified under nVMX).  However, for ABI
+		 * compatibility with KVM_GET_VCPU_EVENTS and
+		 * KVM_SET_VCPU_EVENTS, we can't delay payload
+		 * delivery unless userspace has enabled this
+		 * functionality via the per-VM capability,
+		 * KVM_CAP_EXCEPTION_PAYLOAD.
 		 */
 		if (!vcpu->kvm->arch.exception_payload_enabled ||
 		    !is_guest_mode(vcpu))
@@ -518,6 +542,12 @@ void kvm_requeue_exception(struct kvm_vcpu *vcpu, unsigned nr)
 }
 EXPORT_SYMBOL_GPL(kvm_requeue_exception);
 
+static void kvm_queue_exception_p(struct kvm_vcpu *vcpu, unsigned nr,
+				  unsigned long payload)
+{
+	kvm_multiple_exception(vcpu, nr, false, 0, true, payload, false);
+}
+
 static void kvm_queue_exception_e_p(struct kvm_vcpu *vcpu, unsigned nr,
 				    u32 error_code, unsigned long payload)
 {
@@ -6133,14 +6163,7 @@ static void kvm_vcpu_do_singlestep(struct kvm_vcpu *vcpu, int *r)
 		kvm_run->exit_reason = KVM_EXIT_DEBUG;
 		*r = EMULATE_USER_EXIT;
 	} else {
-		/*
-		 * "Certain debug exceptions may clear bit 0-3.  The
-		 * remaining contents of the DR6 register are never
-		 * cleared by the processor".
-		 */
-		vcpu->arch.dr6 &= ~15;
-		vcpu->arch.dr6 |= DR6_BS | DR6_RTM;
-		kvm_queue_exception(vcpu, DB_VECTOR);
+		kvm_queue_exception_p(vcpu, DB_VECTOR, DR6_BS);
 	}
 }
 
@@ -7079,10 +7102,22 @@ static int inject_pending_event(struct kvm_vcpu *vcpu, bool req_int_win)
 			__kvm_set_rflags(vcpu, kvm_get_rflags(vcpu) |
 					     X86_EFLAGS_RF);
 
-		if (vcpu->arch.exception.nr == DB_VECTOR &&
-		    (vcpu->arch.dr7 & DR7_GD)) {
-			vcpu->arch.dr7 &= ~DR7_GD;
-			kvm_update_dr7(vcpu);
+		if (vcpu->arch.exception.nr == DB_VECTOR) {
+			/*
+			 * This code assumes that nSVM doesn't use
+			 * check_nested_events(). If it does, the
+			 * DR6/DR7 changes should happen before L1
+			 * gets a #VMEXIT for an intercepted #DB in
+			 * L2.  (Under VMX, on the other hand, the
+			 * DR6/DR7 changes should not happen in the
+			 * event of a VM-exit to L1 for an intercepted
+			 * #DB in L2.)
+			 */
+			kvm_deliver_exception_payload(vcpu);
+			if (vcpu->arch.dr7 & DR7_GD) {
+				vcpu->arch.dr7 &= ~DR7_GD;
+				kvm_update_dr7(vcpu);
+			}
 		}
 
 		kvm_x86_ops->queue_exception(vcpu);

From patchwork Tue Oct 16 21:29:24 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Jim Mattson <jmattson@google.com>
X-Patchwork-Id: 10644229
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 8478B109C
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:55 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 757392A9D3
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:55 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 69F132A9DF; Tue, 16 Oct 2018 21:29:55 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-15.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI,
	USER_IN_DEF_DKIM_WL autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EEB272A9D3
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 16 Oct 2018 21:29:54 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727059AbeJQFWL (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 17 Oct 2018 01:22:11 -0400
Received: from mail-pg1-f202.google.com ([209.85.215.202]:33481 "EHLO
        mail-pg1-f202.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727050AbeJQFWL (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 17 Oct 2018 01:22:11 -0400
Received: by mail-pg1-f202.google.com with SMTP id t3-v6so18382902pgp.0
        for <kvm@vger.kernel.org>; Tue, 16 Oct 2018 14:29:53 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=zVGPdWwjQpYEjZ9wVk1C68kQJiUOgREi3pvqdfVIpqU=;
        b=p5pFY0RB9uaLeje2ws2vXLI3OfwS7j33XTBUkEUYzTRy/PTipLeyrL6fWWeibXAE2h
         Ev2wSqzlqC4QIL1xLSfCRvx4gs4wQGZgKzrPGTyM1ByIn5oEMiBmhL4pW615niClxaLa
         qIVWaIRtG/j2NjTIJ/O8NQxyLsBNweB6g4avECU5croqb4vGj3FFafvnEIs0GbEcNfzL
         NwyaY5l5eiloXuM3A5Yg2V6JmQ1qPpW873Q0CpoLnu5ob73XIckl9Ofkwu6YPeoWUMef
         VzSgPkTbkXp6zCQaZtYOa761onm1iMdZo1kAFSzo/UadtBvpd0UUJ5bTf+bS52AxR0ya
         RaxQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=zVGPdWwjQpYEjZ9wVk1C68kQJiUOgREi3pvqdfVIpqU=;
        b=qfC9aiJpt3bDTBlC+uLPEaiep5jQbx/Vj/fxT6MZH7OGKIdCVjlI7ikahcevig3+od
         T/3KY7zPoHwo1NybprXQ5ijRlvHvIcyWR1i3iZG9TLIUQei9Mu2E6UUea4In3Tfsoahs
         PdmKeqVsSvo4afaXDjxymUeCF05sRIbYl2kPW3o2pgiqrZ9FnVxxXxZQ6zWUGQii99S2
         9JoG5lkPYoO4YSIgaIR5LY+OmsFrYy8mPtYMouHxFwfRoaEti+EOMWv4JGB5fiPFgWkU
         Ae4ZbhaDAT56LkuHUe4m8MPi2lXyanwPivEtq3J/zZ4/WE/thDLn+y6dot3MTDwKS+lv
         8vcw==
X-Gm-Message-State: ABuFfoiVfc+sBiOiVwPIp/z3EA+2P5w6aLoV9MW2FHgEwrc7ckCQCbfm
        9eFBibW2NofqyrE9ZjcmZ/gJ0esbT7fowSLN6vbTOQc9R+GjgWhiDYrjPb5bsCZqwL6dKfYoTTX
        Zi2vuYW6hQ0taMXH86Zm4kfwGgrUSExk92cKq2bO6w99MTD2wYSGBK0eu92UwoJg=
X-Google-Smtp-Source: 
 ACcGV60hP2B7+Ibvvs+WxcdBzWgIj4leJW3ToaI/6lZV1BLM0JVKrUV4+3ix50ukCYLohcY2SLwOl9afi6FXgA==
X-Received: by 2002:a62:939b:: with SMTP id
 r27-v6mr11611827pfk.3.1539725392627;
 Tue, 16 Oct 2018 14:29:52 -0700 (PDT)
Date: Tue, 16 Oct 2018 14:29:24 -0700
In-Reply-To: <20181016212924.130307-1-jmattson@google.com>
Message-Id: <20181016212924.130307-7-jmattson@google.com>
Mime-Version: 1.0
References: <20181016212924.130307-1-jmattson@google.com>
X-Mailer: git-send-email 2.19.1.331.ge82ca0e54c-goog
Subject: [PATCH v2 7/7] kvm: x86: Introduce KVM_CAP_EXCEPTION_PAYLOAD
From: Jim Mattson <jmattson@google.com>
To: kvm@vger.kernel.org
Cc: Peter Shier <pshier@google.com>,
        Liran Alon <liran.alon@oracle.com>,
        Paolo Bonzini <pbonzini@redhat.com>,
        Jim Mattson <jmattson@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

This is a per-VM capability which can be enabled by userspace so that
the faulting linear address will be included with the information
about a pending #PF in L2, and the "new DR6 bits" will be included
with the information about a pending #DB in L2. With this capability
enabled, the L1 hypervisor can now intercept #PF before CR2 is
modified. Under VMX, the L1 hypervisor can now intercept #DB before
DR6 and DR7 are modified.

When userspace has enabled KVM_CAP_EXCEPTION_PAYLOAD, it should
generally provide an appropriate payload when injecting a #PF or #DB
exception via KVM_SET_VCPU_EVENTS. However, to support restoring old
checkpoints, this payload is not required.

Note that bit 16 of the "new DR6 bits" is set to indicate that a debug
exception (#DB) or a breakpoint exception (#BP) occurred inside an RTM
region while advanced debugging of RTM transactional regions was
enabled. This is the reverse of DR6.RTM, which is cleared in this
scenario.

This capability also enables exception.pending in struct
kvm_vcpu_events, which allows userspace to distinguish between pending
and injected exceptions.

Reported-by: Jim Mattson <jmattson@google.com>
Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Jim Mattson <jmattson@google.com>
---
 Documentation/virtual/kvm/api.txt | 25 +++++++++++++++++++++++++
 arch/x86/kvm/x86.c                |  5 +++++
 include/uapi/linux/kvm.h          |  1 +
 3 files changed, 31 insertions(+)

diff --git a/Documentation/virtual/kvm/api.txt b/Documentation/virtual/kvm/api.txt
index 065093f5be92..cd22478739d8 100644
--- a/Documentation/virtual/kvm/api.txt
+++ b/Documentation/virtual/kvm/api.txt
@@ -4544,6 +4544,31 @@ With this capability, a guest may read the MSR_PLATFORM_INFO MSR. Otherwise,
 a #GP would be raised when the guest tries to access. Currently, this
 capability does not enable write permissions of this MSR for the guest.
 
+7.15 KVM_CAP_EXCEPTION_PAYLOAD
+
+Architectures: x86
+Parameters: args[0] whether feature should be enabled or not
+
+With this capability enabled, CR2 will not be modified prior to the
+emulated VM-exit when L1 intercepts a #PF exception that occurs in
+L2. Similarly, for kvm-intel only, DR6 will not be modified prior to
+the emulated VM-exit when L1 intercepts a #DB exception that occurs in
+L2. As a result, when KVM_GET_VCPU_EVENTS reports a pending #PF (or
+#DB) exception for L2, exception.has_payload will be set and the
+faulting address (or the new DR6 bits*) will be reported in the
+exception_payload field. Similarly, when userspace injects a #PF (or
+#DB) into L2 using KVM_SET_VCPU_EVENTS, it is expected to set
+exception.has_payload and to put the faulting address (or the new DR6
+bits*) in the exception_payload field.
+
+This capability also enables exception.pending in struct
+kvm_vcpu_events, which allows userspace to distinguish between pending
+and injected exceptions.
+
+
+* For the new DR6 bits, note that bit 16 is set iff the #DB exception
+  will clear DR6.RTM.
+
 8. Other capabilities.
 ----------------------
 
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index d68c34a74590..abe5c29c4323 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -3013,6 +3013,7 @@ int kvm_vm_ioctl_check_extension(struct kvm *kvm, long ext)
 	case KVM_CAP_IMMEDIATE_EXIT:
 	case KVM_CAP_GET_MSR_FEATURES:
 	case KVM_CAP_MSR_PLATFORM_INFO:
+	case KVM_CAP_EXCEPTION_PAYLOAD:
 		r = 1;
 		break;
 	case KVM_CAP_SYNC_REGS:
@@ -4477,6 +4478,10 @@ static int kvm_vm_ioctl_enable_cap(struct kvm *kvm,
 		kvm->arch.guest_can_read_msr_platform_info = cap->args[0];
 		r = 0;
 		break;
+	case KVM_CAP_EXCEPTION_PAYLOAD:
+		kvm->arch.exception_payload_enabled = cap->args[0];
+		r = 0;
+		break;
 	default:
 		r = -EINVAL;
 		break;
diff --git a/include/uapi/linux/kvm.h b/include/uapi/linux/kvm.h
index 251be353f950..531da3d1fd55 100644
--- a/include/uapi/linux/kvm.h
+++ b/include/uapi/linux/kvm.h
@@ -953,6 +953,7 @@ struct kvm_ppc_resize_hpt {
 #define KVM_CAP_NESTED_STATE 157
 #define KVM_CAP_ARM_INJECT_SERROR_ESR 158
 #define KVM_CAP_MSR_PLATFORM_INFO 159
+#define KVM_CAP_EXCEPTION_PAYLOAD 160
 
 #ifdef KVM_CAP_IRQ_ROUTING
 
