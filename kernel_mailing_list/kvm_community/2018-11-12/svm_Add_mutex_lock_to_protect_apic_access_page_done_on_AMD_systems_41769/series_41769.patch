From patchwork Mon Nov 12 12:23:14 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: "Suthikulpanit,
 Suravee" <Suravee.Suthikulpanit@amd.com>
X-Patchwork-Id: 10678585
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 8793513B5
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 12 Nov 2018 12:23:23 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 724B92858F
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 12 Nov 2018 12:23:23 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 617F129EBE; Mon, 12 Nov 2018 12:23:23 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A1FDE2858F
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 12 Nov 2018 12:23:22 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729396AbeKLWQT (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Mon, 12 Nov 2018 17:16:19 -0500
Received: from mail-eopbgr700071.outbound.protection.outlook.com
 ([40.107.70.71]:23520
        "EHLO NAM04-SN1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726725AbeKLWQT (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 12 Nov 2018 17:16:19 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=ewPNmnwJ5iM2XQaie3reByXSCBGTSPGnN2E25FVr6Ak=;
 b=EEPapDzch6PwRTfbp3gRANRg5ETpEBei75Z4ZD423CJriyzKOy9kdUNh+IGXOeIgXexPCeyPNO93VGYJ/wC5UQA37ND89smnIW0JVBIHmg510vqlAyenBG+J5wLaniuKQZ1qq1QHkXq34XquqMEODzknnV0xnbUMbtntNmRwjSU=
Received: from DM6PR12MB2844.namprd12.prod.outlook.com (20.176.117.96) by
 DM6PR12MB2748.namprd12.prod.outlook.com (20.176.118.90) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1294.29; Mon, 12 Nov 2018 12:23:14 +0000
Received: from DM6PR12MB2844.namprd12.prod.outlook.com
 ([fe80::9da0:57ec:ca4:8b1]) by DM6PR12MB2844.namprd12.prod.outlook.com
 ([fe80::9da0:57ec:ca4:8b1%3]) with mapi id 15.20.1294.044; Mon, 12 Nov 2018
 12:23:14 +0000
From: "Suthikulpanit, Suravee" <Suravee.Suthikulpanit@amd.com>
To: "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "kvm@vger.kernel.org" <kvm@vger.kernel.org>
CC: "joro@8bytes.org" <joro@8bytes.org>,
        "pbonzini@redhat.com" <pbonzini@redhat.com>,
        "rkrcmar@redhat.com" <rkrcmar@redhat.com>,
        Wei Wang <wawei@amazon.de>,
        Amadeusz Juskowiak <ajusk@amazon.de>,
        Julian Stecklina <jsteckli@amazon.de>,
        "Suthikulpanit, Suravee" <Suravee.Suthikulpanit@amd.com>
Subject: [PATCH] svm: Add mutex_lock to protect apic_access_page_done on AMD
 systems
Thread-Topic: [PATCH] svm: Add mutex_lock to protect apic_access_page_done on
 AMD systems
Thread-Index: AQHUeoJ79/wMfPe91UKWDtZmjbe/HA==
Date: Mon, 12 Nov 2018 12:23:14 +0000
Message-ID: <20181112122255.128953-1-Suravee.Suthikulpanit@amd.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [114.109.129.36]
x-clientproxiedby: SG2PR0601CA0015.apcprd06.prod.outlook.com (2603:1096:3::25)
 To DM6PR12MB2844.namprd12.prod.outlook.com (2603:10b6:5:45::32)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=Suravee.Suthikulpanit@amd.com;
x-ms-exchange-messagesentrepresentingtype: 1
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 
 1;DM6PR12MB2748;20:cJwiFxrEIHU/KqAu9eXRAfvR+CuH50nO+J0vkmPAS9BB1S1/w1R4fqFiQpfhKjJ9vcDHFGEo1VdH1OGr0qOCqkQjHWfy5Wvy5j1g2s+tpccA4GohlaFkObt3xginKv0vyXNiB5e+KBnb3LrHBReimzkmKEhurFE6RB9gjGl2NP7wj/b68bDvW6SFpi3ofjMoKxYOt4jih8dMwuK8DeVe0z4H83uTjkFuC5ayZNrZSMUyGKwoFYZbRlXLX9dP5EA5
x-ms-office365-filtering-correlation-id: d3f3655a-c39e-40db-9140-08d648999e44
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: 
 BCL:0;PCL:0;RULEID:(2390040)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:DM6PR12MB2748;
x-ms-traffictypediagnostic: DM6PR12MB2748:
x-microsoft-antispam-prvs: 
 <DM6PR12MB274899CE11B2527FD84FEE3DF3C10@DM6PR12MB2748.namprd12.prod.outlook.com>
x-exchange-antispam-report-test: UriScan:(767451399110);
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(823302103)(10201501046)(93006095)(93001095)(3002001)(3231382)(944501410)(52105112)(6055026)(148016)(149066)(150057)(6041310)(20161123564045)(20161123558120)(20161123562045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(201708071742011)(7699051)(76991095);SRVR:DM6PR12MB2748;BCL:0;PCL:0;RULEID:;SRVR:DM6PR12MB2748;
x-forefront-prvs: 0854128AF0
x-forefront-antispam-report: 
 SFV:NSPM;SFS:(10009020)(366004)(39860400002)(376002)(136003)(346002)(396003)(189003)(199004)(2616005)(25786009)(305945005)(316002)(106356001)(105586002)(8676002)(66066001)(7736002)(8936002)(2900100001)(186003)(97736004)(5660300001)(86362001)(6116002)(81166006)(386003)(3846002)(2906002)(110136005)(54906003)(1076002)(1857600001)(6486002)(99286004)(14444005)(478600001)(256004)(476003)(6512007)(102836004)(14454004)(71190400001)(2501003)(486006)(26005)(71200400001)(4326008)(36756003)(68736007)(6506007)(52116002)(72206003)(81156014)(6436002)(53936002);DIR:OUT;SFP:1101;SCL:1;SRVR:DM6PR12MB2748;H:DM6PR12MB2844.namprd12.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
received-spf: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
x-microsoft-antispam-message-info: 
 XsZV9DOYrzbGXFawsc+vaW3YsIPL8KB2ewQtnYRPZzjwf2IH+4UV0BHYMFtl38jo1k5BdORxSfyiJbNuGCftAG7EfU/qTcaoaxTkgHv8aNEkTeWhUPWGCcOGSUWhhS5dOcxkm7Vdk5QV3v3kOK5Wy1Qeb/WDf0YJkUHzFmszWsgOKmoDRPmCMIz21AEPwtHsBeYoFf/RiToY5ceorX8tWI0oohe/QLAic+uvrhEV7b2hpUctqhiXAtao+WHzX0IxhL/ffuOBtuBL8KzHIgRpo4iTnPVNEaz7cZY1j+KSP/829UTOSATZPAr4jz+ctRKxGnZPlx04uC+ge5H4ceKx4/rC3W9ZUx0xlvK6mV2RkWw=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
MIME-Version: 1.0
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 d3f3655a-c39e-40db-9140-08d648999e44
X-MS-Exchange-CrossTenant-originalarrivaltime: 12 Nov 2018 12:23:14.4665
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR12MB2748
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

From: Wei Wang <wawei@amazon.de>

There is a race condition when accessing kvm->arch.apic_access_page_done.
Due to it, x86_set_memory_region will fail when creating the second vcpu
for a svm guest.

Add a mutex_lock to serialize the accesses to apic_access_page_done.
This lock is also used by vmx for the same purpose.

Signed-off-by: Wei Wang <wawei@amazon.de>
Signed-off-by: Amadeusz Juskowiak <ajusk@amazon.de>
Signed-off-by: Julian Stecklina <jsteckli@amazon.de>
Signed-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
Reviewed-by: Joerg Roedel <jroedel@suse.de>
---
 arch/x86/kvm/svm.c | 19 +++++++++++--------
 1 file changed, 11 insertions(+), 8 deletions(-)

diff --git a/arch/x86/kvm/svm.c b/arch/x86/kvm/svm.c
index d96092b35936..8be1718fed1d 100644
--- a/arch/x86/kvm/svm.c
+++ b/arch/x86/kvm/svm.c
@@ -1658,20 +1658,23 @@ static u64 *avic_get_physical_id_entry(struct kvm_vcpu *vcpu,
 static int avic_init_access_page(struct kvm_vcpu *vcpu)
 {
 	struct kvm *kvm = vcpu->kvm;
-	int ret;
+	int ret = 0;
 
+	mutex_lock(&kvm->slots_lock);
 	if (kvm->arch.apic_access_page_done)
-		return 0;
+		goto out;
 
-	ret = x86_set_memory_region(kvm,
-				    APIC_ACCESS_PAGE_PRIVATE_MEMSLOT,
-				    APIC_DEFAULT_PHYS_BASE,
-				    PAGE_SIZE);
+	ret = __x86_set_memory_region(kvm,
+				      APIC_ACCESS_PAGE_PRIVATE_MEMSLOT,
+				      APIC_DEFAULT_PHYS_BASE,
+				      PAGE_SIZE);
 	if (ret)
-		return ret;
+		goto out;
 
 	kvm->arch.apic_access_page_done = true;
-	return 0;
+out:
+	mutex_unlock(&kvm->slots_lock);
+	return ret;
 }
 
 static int avic_init_backing_page(struct kvm_vcpu *vcpu)
