From patchwork Fri Sep 14 13:45:58 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10600801
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 5349B15A7
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 14 Sep 2018 13:46:55 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 38B272B700
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 14 Sep 2018 13:46:55 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 2C4DE2B70B; Fri, 14 Sep 2018 13:46:55 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 67B002B700
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 14 Sep 2018 13:46:54 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728067AbeINTBP (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 14 Sep 2018 15:01:15 -0400
Received: from mail-eopbgr720041.outbound.protection.outlook.com
 ([40.107.72.41]:36592
        "EHLO NAM05-CO1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727640AbeINTBP (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 14 Sep 2018 15:01:15 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Mmagr4YWhACZSvbAbRnCh8iYcEVsXE+e7zOss2fX+9k=;
 b=HHAwrGJkfCG063T/QfV8TAhFPGF+Av18YQW6phhIZgSAuufyHo1sL3g86Ng3RwGLEWO4dvpwbhQMaGROVqfuehS9Soka37SgbWK7hnVyEs3LwdVr4P+sSj1fiPKFXxD2/lkpA+C6qMDL3di9oPoqtgFd9vNJDKj/sTRiX4XBEiI=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 BYAPR12MB2679.namprd12.prod.outlook.com (2603:10b6:a03:69::28) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1143.15; Fri, 14 Sep 2018 13:46:16 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v9 1/2] x86/mm: add .bss..decrypted section to hold shared
 variables
Date: Fri, 14 Sep 2018 08:45:58 -0500
Message-Id: <1536932759-12905-2-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1536932759-12905-1-git-send-email-brijesh.singh@amd.com>
References: <1536932759-12905-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: BN6PR21CA0013.namprd21.prod.outlook.com
 (2603:10b6:404:8e::23) To BYAPR12MB2679.namprd12.prod.outlook.com
 (2603:10b6:a03:69::28)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 3c1b24fd-9df9-4815-c009-08d61a487260
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:BYAPR12MB2679;
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2679;3:IiVC/YXfGOxT0oYKhii6LFVDf93hKq0RKTr5XjqoAqcUkqnkFVVA7pBbo2T5cAMOgoF2fU27+6zPSvwwZneWvK1+iWaEsCuhqIH7hP0T+/fi3lm1va5I+MTqPpIfASvksI2MAjYMB1x1MC4/Zgpv3yMPs7bZRVKLyMOBZ73B28Z0U0lf4mxsZUWLv9BvNTi0Im36Wgd1BJJeIxKHPmSiMIRfqAkGkts91ersQXhafCYqbbuo3HYBhUN4Ww9hUQZe;25:lqmvuRbj2e6lGdIxmZH5aIKKhIG+MWZ/1dfZuljQ+Ex0OLXPKuOUDc0ptQN6iDt1XZ5A+R9YQxtVYIag26PckO2PF+MNWjHQgksJARuf0zrpuzJWMp8HABCWD0lLYDbSqy7Rngv3xmRb8OT/yvZ1hbutq+kVpzijK7qENk5oQjeWXHeMy91xQc+5Nv32PkesHkHWwWvVGLM5V6GwpSasYRToNkf2sOb8iXk12vTjdpoXswKxkuaj+CMGnPPwqiponsnhW6mGKP2+59itnnCZWYyLHrY5H68M3ebqbe/Ck78OOf9+YEUEk9WbH+iSM2Cuj/68ghpmczhWJCTM7s6z1w==;31:FaA7jUjwlbu7xdNaXb5zcV4CjtE/4TPZ2Rv/KpQPq611/rOBT2ZCJ5+0ZQL24f8r6gz97nL0b3nyBQH0+KOBMULPwarGtQ97xmPHqAE1XRVqcMGXlVmmNFIdvKSLlVz3hJpEKO5ZRqGi+ycUCV60VlH929oACiFtbke+s9RhgWB8foJM4PxnP+VgrKuPzQ4p/BqWj31qx4ekbhNpAn09zUgwwtbl0AaMWjWxTg68jwA=
X-MS-TrafficTypeDiagnostic: BYAPR12MB2679:
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2679;20:YaZndIvUOQ5lemsyAk9NgvpXtFROIy9ygO/PVtBlopdhOzsWI3Ja0YI4Qwz1MyLsHgImVAc6szt9LpZctdGmpwaLmnzkWHxyPVhbN5QUA/KTND9/0VdbGXNKtrpw2qcx4llGltyTWbHffZEGJ2fxP4iVB3UcpXalwqnOOiyjAT0jzVf1B0e+gDge4gaBuBui68RLPoXJRw9SSJU9mLvjyKatXjlAATXybWLxUykhr9LiFx31S/RSzQs2A6tmmq/n4frCs03KfmvRyfuELGdVxco1hMeUDDGYLc3CtGY1xBW8wI3SHojLwm3We/0v7oD5CcY5/zbhrTFOzLmAXq37cyxQ8NsxAowLFPWX8UU0Ui+ZsN7qf5bCxrM8xjbCG/R2ffRf6oXKb6CiCnSKNuHKjOcjlYQ9fIoJkrfRm71ynGqWA0RhjR8WDYQOfstSh4YBPhqMvmhGGDILNVGBzOTr8lorH1D1UYQxVsoPaQPYYqSKwPuMgXq1z0wVw2KmkTeI;4:4TNeAhd/LIEBwSqWTOz8+0bLMWD/tQJauSpGia+i5xOxUhDZMDMi6+EMYhsCZWR035s/KCSO2mWmvQ6cY87JdrV0ars9j3/Kx3y0cZPfnkQDv8g5HzAmM+WTBcqEz22eFH54lclagd9me06D/YPUvdM3l608NHDXTGNnG3K6mbxv3XnPN0CdTEry5FHEm0uZh2qmVQ6ORF0cmWHsZ/0mmfhE3ihkySYl7iv47RDx7lVXyZHVAqW2rlvGC8l6QV4iTJ+e4xmLlAyIqS7LgttcELoyTFggZeficEJoA3lGTS62vpe4Y/5mdRjOrbOySZexJReggt1z09g2SCi1VUoqWazNyZJYpGhkPVn9kIQ8PrvmJsP0lrNLia93fTg4+X3H
X-Microsoft-Antispam-PRVS: 
 <BYAPR12MB267906E209E3B7B034956DF1E5190@BYAPR12MB2679.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(823301075)(93006095)(93001095)(3231311)(944501410)(52105095)(10201501046)(3002001)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123564045)(20161123562045)(20161123560045)(20161123558120)(201708071742011)(7699050);SRVR:BYAPR12MB2679;BCL:0;PCL:0;RULEID:;SRVR:BYAPR12MB2679;
X-Forefront-PRVS: 07954CC105
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(366004)(39860400002)(346002)(396003)(376002)(136003)(189003)(199004)(2906002)(386003)(36756003)(8676002)(81156014)(5660300001)(2870700001)(81166006)(47776003)(53416004)(316002)(54906003)(50466002)(86362001)(97736004)(6486002)(476003)(26005)(68736007)(50226002)(7736002)(66066001)(486006)(956004)(44832011)(53936002)(6116002)(106356001)(16526019)(11346002)(305945005)(446003)(186003)(76176011)(25786009)(7696005)(4326008)(3846002)(52116002)(478600001)(2616005)(6666003)(105586002)(23676004)(8936002)(142923001)(101420200001);DIR:OUT;SFP:1101;SCL:1;SRVR:BYAPR12MB2679;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BBYAPR12MB2679=3B23=3A09Dd157?=
	=?utf-8?q?2Qm5wMUyau6kwwM19lc8LE5su2gHjNKn8OOHeYfenLxH8a/XZHyQSPxc3Skn7ZU37?=
	=?utf-8?q?ru/HUdsqy6VGZ9PYvpy07YjQahArExSnk4GCiYt8PkLS2CIC0gjhYS8dL5HVgQcGx?=
	=?utf-8?q?lc2SR+BXLDbt6ajsF0BBa0OzSQkj3PT8A8xKtMLrBc1J2ZoJX/Fq7GGQs9A5o7APx?=
	=?utf-8?q?dWxBKvmEN+LE5rXc02EkRz9ZMunM2rIpsm/Q7jqazGlp+A/mg5fMYf4Vbl5C5Jt1R?=
	=?utf-8?q?WZtAll5nAtcLPD05eqFY/1DLHSXpUDUhhbqyp2cGvktQobmB86y5JThqrZ+97fz9I?=
	=?utf-8?q?vU4syjgHbXLsVnRC4Fw3SOD6XcBH4TzUGkdtrjk06fu9SuF4f/YTGjHAKD8gvqF5h?=
	=?utf-8?q?aF7R2Y2hjp5+6sr08SwBseOquDEj6vH9bBaXyw0e6M+tQk+pRIL3T1WZFao2p/1uL?=
	=?utf-8?q?w7uaSyLQMn1z8IAE923ypaefwE0k/pmHJyVHVr0wyZVaGcJV83YOGdnRS51tAOhgO?=
	=?utf-8?q?M4feIW+fw9z9KflfHZ9Ho81PnxPttwsKtokX8BM6SnxvWBG80KhKCnGOJOtfof96t?=
	=?utf-8?q?hQS2vdz8LZ+YuXgM/qFdpjfgvQBR2o46JoLKk/EtSo9jlVkUy1eyop++km81a3iXg?=
	=?utf-8?q?ybDwzvAfYPWTzwiz43LrNwZAiB5Y4Wivh3icv3G/9LJeWHIr96YLIsl3rjmUadAXJ?=
	=?utf-8?q?MAPYjsVSKsZjGEmfujKKOmUrCo+0OUAOS/Cg1YlhVhe6StjCy+ik/SotVhy9Zbmf6?=
	=?utf-8?q?LLnYdmTJatCBa2uL6ZvjVqedetC4brANyWrNGLBucDwVAZCCw9hWQXekpHv7FgMNk?=
	=?utf-8?q?IqUrGr+piENpMxRNkOTDaIrieSxWWDX3iJHf/UdBysB1+WZjsXqgjHf6MCsGibvcE?=
	=?utf-8?q?YojOoI0un4iIzU+5CLP9gu+JnmC56qAzgUjZ+fS/IRsSA6ryjKbbyKKajjqK14ZcY?=
	=?utf-8?q?ologPBsCq3UpsVZPMzHTysljP0nLvvkUnZcA5LfnKueAoHihwe3xxd4auLZ/St57j?=
	=?utf-8?q?/5WcQqUzIcBHNDu8ZQj99OpAwpJlx4Vs/ToK9t7B7KvTjRSYsBlimrZaXpg2TBb3E?=
	=?utf-8?q?Ff18+82xjEXTUz/90G9TTELsYezjhowQM+KGTd/3TzlxoNHe2U7xVvS2s41yYJFPc?=
	=?utf-8?q?z28ZAkbfJ89wD+Hv68wMJX3J5YFngmciOjYxp3ny36RQFybnKLGJDqT37MNKg=3D?=
	=?utf-8?q?=3D?=
X-Microsoft-Antispam-Message-Info: 
 bUd55T9bKiu1qFvSQj2DQXdJm1v6ivucCIbTAdkYtJi1j/fw8JLF0CD7+jRZMUcMZGv3PaFNfeNeuOBWrdUGB9e9nFvKFmApojdvQ4TmUJ88OpWkTXQoD4gyAXwcyxLGTi5eNBU9/o1Wn8MySpyey6ZM+oyTc7DPfqW18hQemp3TuLwNKvypbfWxIz6K8N/hP8PW8Kr54GChWXI6Sg/XAtR/dCQOa3gj7OV5cw97jlFJn3Q+N2ScBhmPuqOtfXozAuIU7l2KKqGaaXlVmueT00j2q5C+RWjSAMR2yQmst1iyHl9iXkMueOlmcSxYOAskQv7ZvarMZrZiqN/AbZ20su5TUjvkdPP2V/H+jG+zGqI=
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2679;6:onfzS90zH/mCCcWIOu6cBpGQkt1e47Tp+aeNj+ySsXBbKbuUqFVT5LZQclizjeVUKB6H1FkTFFhwFZ9uFod37t2nFzXLJmtxfAbovD6T/mlzZjVC7rUGb1z3TyLtcT03LY+hdDcMw03X91a/9G5MKpJBdj4dv7/fay88dLWgpGcep8y+l6U/h/AzA7TC96rByyzUSB3ajN2pffygN8hOZc0c+LJuEP5gwR86ew/A3sDltY4qcDfJbo+JhKjl2OMLjPhJV2BGG+dbVlyjJg4N7JsRVE8ajMLPOIEk9/pBpUYhI4TtJFCtAAaGjhODRh2tEOWISlwtmy4r3rG5XQA4JERZqkx9y0TMHpuYkUleLdZGbKYC383L5ACoVBPmNXqJIiml2zUjiIMeHdCctIndfuROBq8wgZalXtqdYlq/OwFTiLGmkEKemHzzxPVrjrhxReDTtql+qdZ+u/J0S/kgwA==;5:qreZLQP51sro//Pjd8tNKrzeHjbb+mVOW/Qb8zHXou5iX8Z30KPO4AuqwCBncTdh6POD3I3uEedqvL4AdKhswgG1CyINPD9ydWxikyrK0fJ5rdv931X2/yYTHpJFCg6Hq+TDWLwwqpNeUtvFuXEAxBYkQbq5+yCttvYwaOP5tQA=;7:wAOQV3ILnZ3LqzPgZyD05nb2LFDVENyRJz84qegDkMmccjjQajjEKBmmnAcyUZZxHjOSNyBU3y70dqckIpbw8DrUWVAQQ5bn5AtjjvO47WWeRA9adcz5tms/EV4bzkG2xUKCDU6qWBPiK98Aq735xF7lrAF3v8d7eQBYe9zZE7HIC6SSfqhFx9+3l0FUMoWXpJ9aYpi8nT3oaoY1xvU3lMRaifSAv9XDT+BP4A6yBXPeIPqI6sL92gLIygiBSckk
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2679;20:CzJNeVNaFVfD9caYZ1VvOI7GBDyoMjZNnLb7/BGV29gRBEMx92TMXe2GFLf3T8BAhDoKa3k98nYQdWXcz80r0IWFnjHthITe4qLyXOAgwUO9FPcEnBKJV8s1UNDpwwLsjgZpJzaQry6GWcS5GXDqUGZnmQ0jhDOrewZsmxiH9DZ/2l3UHZPdmyEnA1+bxbSTl2vCiTDAC4HpNMdxMPXmYxCZwBnKOetpqTonOJWCj9GSucBa+3jYzqtrBiLx6s7p
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 14 Sep 2018 13:46:16.3102 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 3c1b24fd-9df9-4815-c009-08d61a487260
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BYAPR12MB2679
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

kvmclock defines few static variables which are shared with the
hypervisor during the kvmclock initialization.

When SEV is active, memory is encrypted with a guest-specific key, and
if the guest OS wants to share the memory region with the hypervisor
then it must clear the C-bit before sharing it.

Currently, we use kernel_physical_mapping_init() to split large pages
before clearing the C-bit on shared pages. But it fails when called from
the kvmclock initialization (mainly because the memblock allocator is
not ready that early during boot).

Add a __bss_decrypted section attribute which can be used when defining
such shared variable. The so-defined variables will be placed in the
.bss..decrypted section. This section will be mapped with C=0 early
during boot.

The .bss..decrypted section has a big chunk of memory that may be unused
when memory encryption is not active, free it when memory encryption is
not active.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Suggested-by: Thomas Gleixner <tglx@linutronix.de>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/include/asm/mem_encrypt.h |  7 +++++++
 arch/x86/kernel/head64.c           | 16 ++++++++++++++++
 arch/x86/kernel/vmlinux.lds.S      | 19 +++++++++++++++++++
 arch/x86/mm/init.c                 |  4 ++++
 arch/x86/mm/mem_encrypt.c          | 24 ++++++++++++++++++++++++
 5 files changed, 70 insertions(+)

diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h
index c064383..616f8e6 100644
--- a/arch/x86/include/asm/mem_encrypt.h
+++ b/arch/x86/include/asm/mem_encrypt.h
@@ -48,10 +48,13 @@ int __init early_set_memory_encrypted(unsigned long vaddr, unsigned long size);
 
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void);
+void __init mem_encrypt_free_decrypted_mem(void);
 
 bool sme_active(void);
 bool sev_active(void);
 
+#define __bss_decrypted __attribute__((__section__(".bss..decrypted")))
+
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
 #define sme_me_mask	0ULL
@@ -77,6 +80,8 @@ early_set_memory_decrypted(unsigned long vaddr, unsigned long size) { return 0;
 static inline int __init
 early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0; }
 
+#define __bss_decrypted
+
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
 /*
@@ -88,6 +93,8 @@ early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0;
 #define __sme_pa(x)		(__pa(x) | sme_me_mask)
 #define __sme_pa_nodebug(x)	(__pa_nodebug(x) | sme_me_mask)
 
+extern char __start_bss_decrypted[], __end_bss_decrypted[], __start_bss_decrypted_unused[];
+
 #endif	/* __ASSEMBLY__ */
 
 #endif	/* __X86_MEM_ENCRYPT_H__ */
diff --git a/arch/x86/kernel/head64.c b/arch/x86/kernel/head64.c
index 8047379..c16af27 100644
--- a/arch/x86/kernel/head64.c
+++ b/arch/x86/kernel/head64.c
@@ -112,6 +112,7 @@ static bool __head check_la57_support(unsigned long physaddr)
 unsigned long __head __startup_64(unsigned long physaddr,
 				  struct boot_params *bp)
 {
+	unsigned long vaddr, vaddr_end;
 	unsigned long load_delta, *p;
 	unsigned long pgtable_flags;
 	pgdval_t *pgd;
@@ -235,6 +236,21 @@ unsigned long __head __startup_64(unsigned long physaddr,
 	sme_encrypt_kernel(bp);
 
 	/*
+	 * Clear the memory encryption mask from the .bss..decrypted section.
+	 * The bss section will be memset to zero later in the initialization so
+	 * there is no need to zero it after changing the memory encryption
+	 * attribute.
+	 */
+	if (mem_encrypt_active()) {
+		vaddr = (unsigned long)__start_bss_decrypted;
+		vaddr_end = (unsigned long)__end_bss_decrypted;
+		for (; vaddr < vaddr_end; vaddr += PMD_SIZE) {
+			i = pmd_index(vaddr);
+			pmd[i] -= sme_get_me_mask();
+		}
+	}
+
+	/*
 	 * Return the SME encryption mask (if SME is active) to be used as a
 	 * modifier for the initial pgdir entry programmed into CR3.
 	 */
diff --git a/arch/x86/kernel/vmlinux.lds.S b/arch/x86/kernel/vmlinux.lds.S
index 9c77d2d..0d618ee 100644
--- a/arch/x86/kernel/vmlinux.lds.S
+++ b/arch/x86/kernel/vmlinux.lds.S
@@ -65,6 +65,23 @@ jiffies_64 = jiffies;
 #define ALIGN_ENTRY_TEXT_BEGIN	. = ALIGN(PMD_SIZE);
 #define ALIGN_ENTRY_TEXT_END	. = ALIGN(PMD_SIZE);
 
+/*
+ * This section contains data which will be mapped as decrypted. Memory
+ * encryption operates on a page basis. Make this section PMD-aligned
+ * to avoid splitting the pages while mapping the section early.
+ *
+ * Note: We use a separate section so that only this section gets
+ * decrypted to avoid exposing more than we wish.
+ */
+#define BSS_DECRYPTED						\
+	. = ALIGN(PMD_SIZE);					\
+	__start_bss_decrypted = .;				\
+	*(.bss..decrypted);					\
+	. = ALIGN(PAGE_SIZE);					\
+	__start_bss_decrypted_unused = .;			\
+	. = ALIGN(PMD_SIZE);					\
+	__end_bss_decrypted = .;				\
+
 #else
 
 #define X86_ALIGN_RODATA_BEGIN
@@ -74,6 +91,7 @@ jiffies_64 = jiffies;
 
 #define ALIGN_ENTRY_TEXT_BEGIN
 #define ALIGN_ENTRY_TEXT_END
+#define BSS_DECRYPTED
 
 #endif
 
@@ -345,6 +363,7 @@ SECTIONS
 		__bss_start = .;
 		*(.bss..page_aligned)
 		*(.bss)
+		BSS_DECRYPTED
 		. = ALIGN(PAGE_SIZE);
 		__bss_stop = .;
 	}
diff --git a/arch/x86/mm/init.c b/arch/x86/mm/init.c
index 7a8fc26..faca978 100644
--- a/arch/x86/mm/init.c
+++ b/arch/x86/mm/init.c
@@ -815,10 +815,14 @@ void free_kernel_image_pages(void *begin, void *end)
 		set_memory_np_noalias(begin_ul, len_pages);
 }
 
+void __weak mem_encrypt_free_decrypted_mem(void) { }
+
 void __ref free_initmem(void)
 {
 	e820__reallocate_tables();
 
+	mem_encrypt_free_decrypted_mem();
+
 	free_kernel_image_pages(&__init_begin, &__init_end);
 }
 
diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c
index b2de398..006f373 100644
--- a/arch/x86/mm/mem_encrypt.c
+++ b/arch/x86/mm/mem_encrypt.c
@@ -348,6 +348,30 @@ bool sev_active(void)
 EXPORT_SYMBOL(sev_active);
 
 /* Architecture __weak replacement functions */
+void __init mem_encrypt_free_decrypted_mem(void)
+{
+	unsigned long vaddr, vaddr_end, npages;
+	int r;
+
+	vaddr = (unsigned long)__start_bss_decrypted_unused;
+	vaddr_end = (unsigned long)__end_bss_decrypted;
+	npages = (vaddr_end - vaddr) >> PAGE_SHIFT;
+
+	/*
+	 * The unused memory range was mapped decrypted, change the encryption
+	 * attribute from decrypted to encrypted before freeing it.
+	 */
+	if (mem_encrypt_active()) {
+		r = set_memory_encrypted(vaddr, npages);
+		if (r) {
+			pr_warn("failed to free unused decrypted pages\n");
+			return;
+		}
+	}
+
+	free_init_pages("unused decrypted", vaddr, vaddr_end);
+}
+
 void __init mem_encrypt_init(void)
 {
 	if (!sme_me_mask)

From patchwork Fri Sep 14 13:45:59 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10600799
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 35ED6933
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 14 Sep 2018 13:46:50 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1C0D12B700
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 14 Sep 2018 13:46:50 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 104B02B70A; Fri, 14 Sep 2018 13:46:50 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 66D622B70E
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 14 Sep 2018 13:46:49 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728170AbeINTBR (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 14 Sep 2018 15:01:17 -0400
Received: from mail-eopbgr720041.outbound.protection.outlook.com
 ([40.107.72.41]:36592
        "EHLO NAM05-CO1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1728054AbeINTBQ (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 14 Sep 2018 15:01:16 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=/Gq28C+dXKwSYwLiQsF5aGq7BMURAtYgUC3uPMGV97s=;
 b=UBqdL8NI6wvQzXrbKirKn87xlJUO/zrdglzX/Z7HbMjaemHFWTQ7QVfscnxolx5QFuvY+yEQhm/TIrofSAlUXkpeeKiash77n3o6OCO5mWtrzVt1LjyayGhzgH/vtwC+4V7E665g+vBDaSHJYpzR6IoGnrtLW5eTYAqkOZceJsg=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 BYAPR12MB2679.namprd12.prod.outlook.com (2603:10b6:a03:69::28) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1143.15; Fri, 14 Sep 2018 13:46:19 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v9 2/2] x86/kvm: use __bss_decrypted attribute in shared
 variables
Date: Fri, 14 Sep 2018 08:45:59 -0500
Message-Id: <1536932759-12905-3-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1536932759-12905-1-git-send-email-brijesh.singh@amd.com>
References: <1536932759-12905-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: BN6PR21CA0013.namprd21.prod.outlook.com
 (2603:10b6:404:8e::23) To BYAPR12MB2679.namprd12.prod.outlook.com
 (2603:10b6:a03:69::28)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 064d95d6-b6c1-468a-2bdd-08d61a48745a
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:BYAPR12MB2679;
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2679;3:lKUTgcK7m9E/jfNMaxszVb4LKV0JVc+sO/8Ajt5z7/RAGFaT1QVuGGhRY+m8LB0Ptrek8AlpB6T4sqF0nqKdTucLeYug+nbxxvtUYtkd1NxvRDjQ7j71at5Rz4puyMolBS2D8XOLf4A9DrzbUXZoGYHBsNqgo2FzIEgzYe1g2Clk/Yx8zB6kLf+eqWaQ0z3uM7xLjdAG1MS4IUp/WequP05PxLf/aLXpU6rhOUKg7bB3Ndl/y54LZ5D3tqcG1JrP;25:L8x3NCcI6Ci1+VwxKagti4caQID7vOCd8wQm6pLaB5iBrZQrZagJOp/GzHdNq6Rp86rT8XsNT1dkqBqwC8I4A3MhXAGbHjnbSi58+7QQmApCA9oidDMa4MUs/xcggi3B0h+PtJDUHPGDfKpBs7L6SxJOKYgEf9eaQ6BlJYYYSdoSGC+YX5yjwIyu/USV4SFt6cVX+Xer73nfcPHhgaRa8uw7olzcxZs9aOR69iCl2twWISCtQkhfSIXOz0ebJ5bnq4N9QYq6Kp/BXt4vNd/VVW/c0eTgJvZjN55LWchlnBHswPQdgx583uKXfc2iVSPDelawh07s+U5m/9NJSltTiA==;31:s7/Q/wg3TforsKwkxrgKJ9YW7AZRXzmYgq0PznDCIX6Yao7vZ9kV1NbOzc2wdMEncZs4i0MAO60RFd1DV4dzU355/GzSfnXzMjfuNL6Fru/K/ZeTP0RykZlQ5+lSwrbwE2BJO5qQQtv2KyiHO5nNFVjEHE7U8AvsSTxFyfHp7B7DneCtyUAgrwpR8s40EbhpJ/RI80LK6UN9ICfDzqAx+p+g6qCOB6T+flJehbCjPLE=
X-MS-TrafficTypeDiagnostic: BYAPR12MB2679:
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2679;20:bZziR3zFPRiBtSuyI/t+xzSo9gTn2yIlZDOMhiI1+TUkQUahiX1XPFHCp32hPTDbc5hjAV+ViT86ERV7gMDagfOpiizAn4Y3TSOugciNM35l/Xy9BdHhSp6dKHwsQAeMmk8j3Ga/wdHewJDTSOgFLhmBNfn2KwnhyEzKHy6F1TfW39MBVvH0IEkNx+El4gGXI2Gzgmq97g8Xnx2CbwAdY2UkG1DkwhgWFMr6U2jv3uDvQrU512jIbaFNidDKQ/iWYn8Qb8CnlLPpcxZ0geNKruMCNkm4pZR/LiWdiZNseljrB08JPTXT4dVGKplwCRB41weWx6sHd47rDjtBU8/gAf9fXKQDcb8tir0zyrpHbnkCdzOVu3PvmAsYIgCHQP0RF4qoD6nwaTm2xZzEGizrMDmpqcBjE6Sg146PxiegKdwWYiFMFXE6OJiojOxQl8dS1jwS3L//DgOOO1KIe+/UwXoCYvh1nFFk5yRsw6WjV5ATOp3vz8+B+c3ux3UFmo42;4:cYvAY976yaw+nvXNDRDbe5bCdVcXztBnOKpFoeJfjb+QEMevEheb8rNA0eY9WiHkhTE+ZgCAmW0QmMCEZYTGJB3adu+bvYP3sB/Z6zWzNvbAYkEkD/Id3A3Bp4VLrn80/19BYTf2zCr9qObVYUI9DDXCtlK0YqMPHoLn16r+Y6i1KivWlcf4G+EHjIOQp1thz5/DIC4FBES22PIZCj5zsJiQOz/dogBdoQ/G6VM7YZtoA8GZSEw9c4XfGI7JN1/dJJ0mIt6cQwMk/2JSN/9Y0ZsTVczTAZLPWLuz3e219MKVZhk8XEx65ZdB4R7w8OaiyXYwXi8df5yWqaUXpdzrdGOm00vwaHGgFj3rcy5TORlntvQJlrVzCfz7m4g1MarC
X-Microsoft-Antispam-PRVS: 
 <BYAPR12MB26794ADAE475F0F72B286209E5190@BYAPR12MB2679.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(823301075)(93006095)(93001095)(3231311)(944501410)(52105095)(10201501046)(3002001)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123564045)(20161123562045)(20161123560045)(20161123558120)(201708071742011)(7699050);SRVR:BYAPR12MB2679;BCL:0;PCL:0;RULEID:;SRVR:BYAPR12MB2679;
X-Forefront-PRVS: 07954CC105
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(136003)(376002)(366004)(39860400002)(346002)(396003)(199004)(189003)(53936002)(6116002)(106356001)(44832011)(305945005)(186003)(446003)(16526019)(11346002)(26005)(6486002)(476003)(956004)(486006)(50226002)(68736007)(66066001)(7736002)(2616005)(478600001)(105586002)(23676004)(8936002)(6666003)(7696005)(4326008)(25786009)(76176011)(52116002)(3846002)(81156014)(8676002)(47776003)(81166006)(2870700001)(5660300001)(2906002)(386003)(36756003)(50466002)(316002)(54906003)(97736004)(14444005)(86362001)(53416004);DIR:OUT;SFP:1101;SCL:1;SRVR:BYAPR12MB2679;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BBYAPR12MB2679=3B23=3AfUTQ2+0?=
	=?utf-8?q?he9e5if5FgN4ZXtmMru6EhuKRhDo6maMk1bTmuiC0gG4uJrBtrsFmZBpqK6k88jX6?=
	=?utf-8?q?hfPX700wjd1xmcQ5fYr0feX/Zb6oZ0zfeD/fjOyD0Uh+Pc3R8UmAlkoy8SIYJxYJt?=
	=?utf-8?q?IcACJpBxEk4He3IfM+6wh4qsbUHAQPkpjnTOWgLXtAEIacUzoVMA0t5V7APWfGVeS?=
	=?utf-8?q?jUsHEn8dfsSdaDimiV/XmbrNBe291iMRFGzZE/ENIw/LEbr/THyoosb7hssrclMt4?=
	=?utf-8?q?Yd5dV2ijU7/V/3ZTOk6umzBDTpM5y3M/0sDejBU12vFWb9blQVqbi4yZsYmSf160/?=
	=?utf-8?q?x0LzHLYc1XNwpdJG2/XvRy2B2WIuwwdGF4PMQkNBJ8W27JnZATK0+SNevvh1VWOGw?=
	=?utf-8?q?Fchpfi566SWhiRpTsyBkqB6J5BxAF2gre41WflobtOWoDb/+k0NCuMvGlXISQQgYe?=
	=?utf-8?q?CswAbUeylGqdYW1/+gmyW8zaNGH1ByFSS9aTEZ80/CrSo8znlZ2MHxkLGAB3YoN8H?=
	=?utf-8?q?X4L8B0u3TlOvr97yVnOE6PQ6E5QMO7HfSrF+O5vqYsVtprEIs67qOOfcEWEgObX3Q?=
	=?utf-8?q?54UDvD4Cm6g9HloPJyeyOPFf8FGSZYTNwqzTtXyOAiKr+Z/0Hb1IMmFaadP9zk6cQ?=
	=?utf-8?q?0d53X+XbEEX4VanO8xtj8SSg00UhpgtLFfJSvAWhbt49IhWoDfnzjsG3Ra9SlxYqa?=
	=?utf-8?q?xvscKjvXPW6aAxxUvyy8nekAUKKSkxaEWLVHOeAYNHbnAHU6giZW0811Aglr9uUtv?=
	=?utf-8?q?pnPL9x2yGXm52I1btP5jEJQ/SPW5z+e076GziiYGPNjnTWVdjqBIgn6jbUvO9/kK6?=
	=?utf-8?q?cgDIwoD7fFDyQsL2SRdKrmJUoelA3RJ5G5xRxUZkw/Ubk7hGC8twgsbxV8WRoPWRR?=
	=?utf-8?q?xUCs2eOG13ld3/1O6sOnMYnsOZ3cpokxzc9+G1AD2dOg497Wbnzcy1XKFGIEwhiqZ?=
	=?utf-8?q?6mCxc/AuXbv0feCZ2ZSnlyihDl5PMEW9Px7kwVMqXNlMce48V+DGuQSaVWOBfubB7?=
	=?utf-8?q?Q1B4TjOk0L3ln/OrKucpyDT7YqlmXIHp00p27+Kb5bvYDv2shVrShpbwf4GkjlToI?=
	=?utf-8?q?iG/hCBiwqpu0T1G0ymd/es5kBlzhbYPgjYZgabEn7zbAht0PJrkKXVuPmCOIaSkcp?=
	=?utf-8?q?t8Z1NDN5yHFZQNWsC1w1E9adRrTm1EyvLLeTSXh?=
X-Microsoft-Antispam-Message-Info: 
 gJPENmkzw8Mmdr53E+C8GrigHDyJGfm2g8/kEqV2r5SZabkAoBQqed3QZEJp5TsQ4EdYqO38JmvVyM6Ozh8qcBXz1J2r5Hd6CzSM5bmTCKLITzb4mWO1TbPANCVxHgxFZ2EUrCCk5i06s1cCl0sbnlqIYjMBnJcUcL1XbDTvcUXJDudU50kyIv+tJQdWebwhh8NrpTkxjlWQpVn2ImaWY558Ysjqf6r7H1G7Hgzfc1BHqrs5qqTzLMOqYxKQftP9tEe6ehUMNBMpQfwRBvJsrV3BUXO11I1e9aHVyGowWbpx52/0NbaJCFuXAgXop9TdbbpbGWVtFpSeNwlqhqsTXaY1fDCkPI3Xzh558HVz/GU=
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2679;6:Lcm209nmriV2ZNspvtu40IlXNVjNAM0T7otCwaHsH7bUa/0cUwrB2RSZRqOFJJZVVy4jfJg1ojiekCOr78/N8aWJuLh8ULQzXz27NXqOa0CFBsgG+PzXPowvddPb4sNj/HzKwwVZN4ifAzZB6o+2DR7KgSeMchwyVsPRqLAvUMpEj3p/Q8YZzwHNDAMi6eZi+v/0cIg99fL3boA8BeQmB/zoFgzryJW+8XZuRR4He8/U6lm4rwjlCEY5AFKvLwghcaKs3hgpOoSGtP7RfeVZ8A1/mnHyTRbYlseZXPT93Zt4gEHrZWtXqAGuGvxy/bO0otuRVzqKF/+3/7ijGfu9ogsCsU9oYIF1EqzpQFmtl641sahSThgio2tfznKrK7DmZBxg5aiLf7l0KZJ+lVm1hS1jAPnt0Cqqt1k2ezS+LtzAWz8SKatdwT+qCvuH/kDPpa4YgT5wO2f62xTHU1/mZA==;5:MNIsYgmgPiTw8beGaqBqmC7A4GIw9DnVaBcJ18XywxyqS9IxiIKTbYzLSBWOdxHWceQfgNksemBH4GtNu1XKQq4A+Wt3B2zo9W1i8UpG0n8jAn8N3cTnGkiP16kliI3i2Rse1kU4JQhMMMzoWG1XeXeia9tg4nLSrZJVxhbVY0A=;7:pfUrouFwPfy8HYysdlOIzdUpFxvnXD0K6uMCq+2JEPCQVd/ev7PuMBzRMR6sF0u7oftRYteMsBNEoYtx/LmtjOCX54qF4rubJiGsZtzmP2OZTqlYZu7J17WuTB58GuNjA/WicerPtF7wCSa/Ir/o3OUD0onafEggKI6mjQJj2lzsv7TkXdDFITdCLKl1Cu59okXNepIVYzUXrSV7qzM5mWhSrmdy/3md1db3jHN6ayUaRPK9bqgOWn6SNPK0mrzR
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2679;20:0zsk8O5qkiSIxIB7zLKnRYdfagv6aEF5xciNn4tH41UFpY6r17eXh5HnWU4ciTgCqTdVldEMG85BGi+/mH9lz14MtchhncoDVBLwWgXMn25Xsp49GBfrmJUcR6H9cUe0TugkbMCSVQMcHy9vhpQO1+BR7+JAnzI5VffiJC5gf/yq+Zp3d5z1lDJZsW7aKBVkl5r5waE8UiRUjMfTDdD41+YdG7BDVyjbezP2aQkoi5FQmh1RV18t5ELWSUem5EYP
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 14 Sep 2018 13:46:19.6382 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 064d95d6-b6c1-468a-2bdd-08d61a48745a
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BYAPR12MB2679
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

The recent removal of the memblock dependency from kvmclock caused a SEV
guest regression because the wall_clock and hv_clock_boot variables are
no longer mapped decrypted when SEV is active.

Use the __bss_decrypted attribute to put the static wall_clock and
hv_clock_boot in the .bss..decrypted section so that they are mapped
decrypted during boot.

In the preparatory stage of CPU hotplug, the per-cpu pvclock data pointer
assigns either an element of the static array or dynamically allocated
memory for the pvclock data pointer. The static array are now mapped
decrypted but the dynamically allocated memory is not mapped decrypted.
However, when SEV is active this memory range must be mapped decrypted.

Add a function which is called after the page allocator is up, and
allocate memory for the pvclock data pointers for the all possible cpus.
Map this memory range as decrypted when SEV is active.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Suggested-by: Thomas Gleixner <tglx@linutronix.de>
Fixes: 368a540e0232 ("x86/kvmclock: Remove memblock dependency")
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/kernel/kvmclock.c | 52 +++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 49 insertions(+), 3 deletions(-)

diff --git a/arch/x86/kernel/kvmclock.c b/arch/x86/kernel/kvmclock.c
index a36b93a..6378f1a 100644
--- a/arch/x86/kernel/kvmclock.c
+++ b/arch/x86/kernel/kvmclock.c
@@ -28,6 +28,7 @@
 #include <linux/sched/clock.h>
 #include <linux/mm.h>
 #include <linux/slab.h>
+#include <linux/set_memory.h>
 
 #include <asm/hypervisor.h>
 #include <asm/mem_encrypt.h>
@@ -61,9 +62,10 @@ early_param("no-kvmclock-vsyscall", parse_no_kvmclock_vsyscall);
 	(PAGE_SIZE / sizeof(struct pvclock_vsyscall_time_info))
 
 static struct pvclock_vsyscall_time_info
-			hv_clock_boot[HVC_BOOT_ARRAY_SIZE] __aligned(PAGE_SIZE);
-static struct pvclock_wall_clock wall_clock;
+			hv_clock_boot[HVC_BOOT_ARRAY_SIZE] __bss_decrypted __aligned(PAGE_SIZE);
+static struct pvclock_wall_clock wall_clock __bss_decrypted;
 static DEFINE_PER_CPU(struct pvclock_vsyscall_time_info *, hv_clock_per_cpu);
+static struct pvclock_vsyscall_time_info *hvclock_mem;
 
 static inline struct pvclock_vcpu_time_info *this_cpu_pvti(void)
 {
@@ -236,6 +238,45 @@ static void kvm_shutdown(void)
 	native_machine_shutdown();
 }
 
+static void __init kvmclock_init_mem(void)
+{
+	unsigned long ncpus;
+	unsigned int order;
+	struct page *p;
+	int r;
+
+	if (HVC_BOOT_ARRAY_SIZE >= num_possible_cpus())
+		return;
+
+	ncpus = num_possible_cpus() - HVC_BOOT_ARRAY_SIZE;
+	order = get_order(ncpus * sizeof(*hvclock_mem));
+
+	p = alloc_pages(GFP_KERNEL, order);
+	if (!p) {
+		pr_warn("%s: failed to alloc %d pages", __func__, (1U << order));
+		return;
+	}
+
+	hvclock_mem = page_address(p);
+
+	/*
+	 * hvclock is shared between the guest and the hypervisor, must
+	 * be mapped decrypted.
+	 */
+	if (sev_active()) {
+		r = set_memory_decrypted((unsigned long) hvclock_mem,
+					 1UL << order);
+		if (r) {
+			__free_pages(p, order);
+			hvclock_mem = NULL;
+			pr_warn("%s: set_memory_decrypted() failed", __func__);
+			return;
+		}
+	}
+
+	memset(hvclock_mem, 0, PAGE_SIZE << order);
+}
+
 static int __init kvm_setup_vsyscall_timeinfo(void)
 {
 #ifdef CONFIG_X86_64
@@ -250,6 +291,9 @@ static int __init kvm_setup_vsyscall_timeinfo(void)
 
 	kvm_clock.archdata.vclock_mode = VCLOCK_PVCLOCK;
 #endif
+
+	kvmclock_init_mem();
+
 	return 0;
 }
 early_initcall(kvm_setup_vsyscall_timeinfo);
@@ -269,8 +313,10 @@ static int kvmclock_setup_percpu(unsigned int cpu)
 	/* Use the static page for the first CPUs, allocate otherwise */
 	if (cpu < HVC_BOOT_ARRAY_SIZE)
 		p = &hv_clock_boot[cpu];
+	else if (hvclock_mem)
+		p = hvclock_mem + cpu - HVC_BOOT_ARRAY_SIZE;
 	else
-		p = kzalloc(sizeof(*p), GFP_KERNEL);
+		return -ENOMEM;
 
 	per_cpu(hv_clock_per_cpu, cpu) = p;
 	return p ? 0 : -ENOMEM;
