From patchwork Wed Oct  3 11:47:47 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: Paolo Bonzini <pbonzini@redhat.com>
X-Patchwork-Id: 10624689
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 0777615A7
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed,  3 Oct 2018 11:48:02 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EE3A72890C
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed,  3 Oct 2018 11:48:01 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E172128927; Wed,  3 Oct 2018 11:48:01 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.7 required=2.0 tests=BAYES_00,DKIM_INVALID,
	DKIM_SIGNED,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 764852890C
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed,  3 Oct 2018 11:48:01 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726819AbeJCSf6 (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 3 Oct 2018 14:35:58 -0400
Received: from mail-wm1-f67.google.com ([209.85.128.67]:39425 "EHLO
        mail-wm1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726710AbeJCSf5 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 3 Oct 2018 14:35:57 -0400
Received: by mail-wm1-f67.google.com with SMTP id q8-v6so5306611wmq.4;
        Wed, 03 Oct 2018 04:47:53 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=sender:from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=JuzfczhLlmrJYUGS3HkZzgMkIcgs4yXjieCh43v5oQk=;
        b=DxxQOKOev6RTLN6BGmdX4wTl1b+76xphkEwjV2Fzf2PAdefnveZ7aOReccRNbVr0Z9
         A9Hu1+srl8Dfvz7zg6meaCAX4yy7DkjfZDGOTjFscsKgweDCSSzTDJCtO0z1S8+UhY/2
         Hhb8f7HIwiEO414i9wQlSwqP33MWlctIcXXClk0JrKXsb2Mv7+E6XrmVDPW/Dpx2A9ud
         cuYd5RRSUSruqAsIZl/K1hPoQY9WYww3mt69j9c31vEI7I2HFw+xHxNHGm7aHkKxmhK4
         DRJpaBoBXez9LPPyJKUeGBQ7PNg0DV8pOv4LZm9Gsw5caMTfxY3QKA5MKbqMhZeeD73U
         0L6A==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:sender:from:to:cc:subject:date:message-id
         :mime-version:content-transfer-encoding;
        bh=JuzfczhLlmrJYUGS3HkZzgMkIcgs4yXjieCh43v5oQk=;
        b=JaF9UpwyCArxu6DbFXOQ3yLkOr53nKw4YUA6tsju/wuuOcKdMCj89O9Lu2/Cj/mCCF
         luPRPvVvzYeSdptXa1bgiDtPKSZixH1y6cX01LyJ4N5M7eufz2FZttPg8DaeHDI81daH
         8KRT1mCSfsUNvNjn+9frfKUWcFVjFI44u1dxD2GOuZ0aV4m6GALdU8sWfFBgsvzIe/1N
         i9UZ4NOaWgXvEvrlXPWazqJBtonNaQRViiwoKpI72C4ATTqmlgUGwVwc4kkKQTTTrn5E
         tTIrTMvbJviQjRTuEgaw9dBhPiVGvCFyM3z9aMEJO4ZRrOXFMuxuiYlS2xQHAOfGPGGz
         V2Bw==
X-Gm-Message-State: ABuFfohkNp2CJmQ66aXaN+ozl69W0iAdqaMqEYMfqh6yDWnpuF/qiIHP
        WzesyeW/1e0WAY+4nIxxpR6rse64
X-Google-Smtp-Source: 
 ACcGV609N0WNUu1w1YEtJh7mz/+ScFBytOw/naIfcqazmLkSljZ+xCLN6liBwQbfuOs5L0uzAVOVng==
X-Received: by 2002:a1c:8f0e:: with SMTP id
 r14-v6mr1198355wmd.79.1538567272153;
        Wed, 03 Oct 2018 04:47:52 -0700 (PDT)
Received: from 640k.lan (94-36-187-248.adsl-ull.clienti.tiscali.it.
 [94.36.187.248])
        by smtp.gmail.com with ESMTPSA id
 c8-v6sm2112445wrb.6.2018.10.03.04.47.49
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 03 Oct 2018 04:47:51 -0700 (PDT)
From: Paolo Bonzini <pbonzini@redhat.com>
To: linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Nikita Leshchenko <nikita.leshchenko@oracle.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>,
 Liran Alon <liran.alon@oracle.com>,
 =?utf-8?b?UmFkaW0gS3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH] kvm: nVMX: fix entry with pending interrupt if APICv is
 enabled
Date: Wed,  3 Oct 2018 13:47:47 +0200
Message-Id: <1538567267-2343-1-git-send-email-pbonzini@redhat.com>
X-Mailer: git-send-email 1.8.3.1
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Commit b5861e5cf2fcf83031ea3e26b0a69d887adf7d21 introduced a check on
the interrupt-window and NMI-window CPU execution controls in order to
inject an external interrupt vmexit before the first guest instruction
executes.  However, when APIC virtualization is enabled the host does not
need a vmexit in order to inject an interrupt at the next interrupt window;
instead, it just places the interrupt vector in RVI and the processor will
inject it as soon as possible.  Therefore, on machines with APICv it is
not enough to check the CPU execution controls: the same scenario can also
happen if RVI>0.

Fixes: b5861e5cf2fcf83031ea3e26b0a69d887adf7d21
Cc: Nikita Leshchenko <nikita.leshchenko@oracle.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: Liran Alon <liran.alon@oracle.com>
Cc: Radim Krčmář <rkrcmar@redhat.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
Reviewed-by: Nikita Leshenko <nikita.leshchenko@oracle.com>
---
 arch/x86/kvm/vmx.c | 16 +++++++++++-----
 1 file changed, 11 insertions(+), 5 deletions(-)

diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index 6ef2d5b139b9..c0c7689f0049 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -10280,6 +10280,11 @@ static void vmx_hwapic_isr_update(struct kvm_vcpu *vcpu, int max_isr)
 	}
 }
 
+static u8 vmx_get_rvi(void)
+{
+	return vmcs_read16(GUEST_INTR_STATUS) & 0xff;
+}
+
 static void vmx_set_rvi(int vector)
 {
 	u16 status;
@@ -12593,10 +12598,13 @@ static int enter_vmx_non_root_mode(struct kvm_vcpu *vcpu, u32 *exit_qual)
 	struct vmcs12 *vmcs12 = get_vmcs12(vcpu);
 	bool from_vmentry = !!exit_qual;
 	u32 dummy_exit_qual;
-	u32 vmcs01_cpu_exec_ctrl;
+	bool evaluate_pending_interrupts;
 	int r = 0;
 
-	vmcs01_cpu_exec_ctrl = vmcs_read32(CPU_BASED_VM_EXEC_CONTROL);
+	evaluate_pending_interrupts = vmcs_read32(CPU_BASED_VM_EXEC_CONTROL) &
+		(CPU_BASED_VIRTUAL_INTR_PENDING | CPU_BASED_VIRTUAL_NMI_PENDING);
+	if (enable_apicv && kvm_vcpu_apicv_active(vcpu))
+		evaluate_pending_interrupts |= vmx_get_rvi() > 0;
 
 	enter_guest_mode(vcpu);
 
@@ -12650,10 +12658,8 @@ static int enter_vmx_non_root_mode(struct kvm_vcpu *vcpu, u32 *exit_qual)
 	 * instead. Thus, we force L0 to perform pending event
 	 * evaluation by requesting a KVM_REQ_EVENT.
 	 */
-	if (vmcs01_cpu_exec_ctrl &
-		(CPU_BASED_VIRTUAL_INTR_PENDING | CPU_BASED_VIRTUAL_NMI_PENDING)) {
+	if (evaluate_pending_interrupts)
 		kvm_make_request(KVM_REQ_EVENT, vcpu);
-	}
 
 	/*
 	 * Note no nested_vmx_succeed or nested_vmx_fail here. At this point
