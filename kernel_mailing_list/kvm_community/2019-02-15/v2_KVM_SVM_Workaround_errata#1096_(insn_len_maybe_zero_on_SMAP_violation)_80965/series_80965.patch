From patchwork Fri Feb 15 17:24:12 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10815593
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 474FF139A
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 15 Feb 2019 17:24:41 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7F09F2EA35
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 15 Feb 2019 17:24:19 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 725212EB3B; Fri, 15 Feb 2019 17:24:19 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 938922EA35
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 15 Feb 2019 17:24:18 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728567AbfBORYR (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 15 Feb 2019 12:24:17 -0500
Received: from mail-eopbgr790088.outbound.protection.outlook.com
 ([40.107.79.88]:32105
        "EHLO NAM03-CO1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726847AbfBORYR (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 15 Feb 2019 12:24:17 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=n009Q8Ny1+zlTYVDGG+AttVren6sAqmjLM9p/4H6Dos=;
 b=uLgobfCo+ftZaW/1T+zf/As0iEphSIdKY3L2mmdhqnjVux6GlRvKuKMu0FHRsUXL3LQSrlRK23+dNHJWiw9Uyj+Sjhi8Af4629tlnW/lpZr41KpsROW7aeSbbpCL6oOFC/1e4Bh41aBgrOm9fK+LDJx1vV/hwyHRingt7BefboM=
Received: from DM6PR12MB2682.namprd12.prod.outlook.com (20.176.116.31) by
 DM6PR12MB2811.namprd12.prod.outlook.com (20.176.117.92) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1622.19; Fri, 15 Feb 2019 17:24:12 +0000
Received: from DM6PR12MB2682.namprd12.prod.outlook.com
 ([fe80::2073:3d8a:bf05:4686]) by DM6PR12MB2682.namprd12.prod.outlook.com
 ([fe80::2073:3d8a:bf05:4686%4]) with mapi id 15.20.1622.018; Fri, 15 Feb 2019
 17:24:12 +0000
From: "Singh, Brijesh" <brijesh.singh@amd.com>
To: "kvm@vger.kernel.org" <kvm@vger.kernel.org>
CC: "venkateshs@google.com" <venkateshs@google.com>, "Singh,
 Brijesh" <brijesh.singh@amd.com>, Jim Mattson <jmattson@google.com>,
 "Lendacky, Thomas" <Thomas.Lendacky@amd.com>, Borislav Petkov <bp@alien8.de>,
 Joerg Roedel <joro@8bytes.org>,
 =?utf-8?b?UmFkaW0gS3LEjW3DocWZ?= <rkrcmar@redhat.com>,
 Paolo Bonzini <pbonzini@redhat.com>
Subject: [PATCH v2] KVM: SVM: Workaround errata#1096 (insn_len maybe zero on
 SMAP violation)
Thread-Topic: [PATCH v2] KVM: SVM: Workaround errata#1096 (insn_len maybe zero
 on SMAP violation)
Thread-Index: AQHUxVNECMmtrm2gX0mZTFAY/zGAeA==
Date: Fri, 15 Feb 2019 17:24:12 +0000
Message-ID: <20190215172356.20385-1-brijesh.singh@amd.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: SN6PR05CA0020.namprd05.prod.outlook.com
 (2603:10b6:805:de::33) To DM6PR12MB2682.namprd12.prod.outlook.com
 (2603:10b6:5:4a::31)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
x-ms-exchange-messagesentrepresentingtype: 1
x-mailer: git-send-email 2.17.1
x-originating-ip: [165.204.77.1]
x-ms-publictraffictype: Email
x-ms-office365-filtering-correlation-id: 901b2ac9-080c-4e0c-a908-08d6936a66d0
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: 
 BCL:0;PCL:0;RULEID:(2390118)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600110)(711020)(4605077)(4618075)(2017052603328)(7153060)(7193020);SRVR:DM6PR12MB2811;
x-ms-traffictypediagnostic: DM6PR12MB2811:
x-microsoft-exchange-diagnostics: 
 1;DM6PR12MB2811;20:OQylZ4+6pZY4BFVPt4F1OPnHsFL1+3pa8U1AS+6+/5t+pqY9P4ClL2o+z2nuovfq83EuxNsB1xikZhJZnbNhimygrjCGt43BsctuLECNoHCRpeRG2iKFDO9LLp5616wm9/NwBN4avRtHqn2QrRhTwptu5xf0vgC20+eWjjvjOnGooFVHujaFB9/cICjay7gLKJaByRsjTLwSR/gDZaQEYriOujXf2J+ruSsJ+uMXcEQHI99h4AL1vayYSUl6ReL4
x-microsoft-antispam-prvs: 
 <DM6PR12MB2811B82D4E0D2E9B54D68D72E5600@DM6PR12MB2811.namprd12.prod.outlook.com>
x-forefront-prvs: 09497C15EB
x-forefront-antispam-report: 
 SFV:NSPM;SFS:(10009020)(396003)(136003)(366004)(346002)(376002)(39860400002)(199004)(189003)(14444005)(81166006)(8676002)(81156014)(1730700003)(4326008)(6916009)(54906003)(2906002)(6436002)(478600001)(36756003)(66066001)(6486002)(6506007)(6512007)(186003)(486006)(53936002)(105586002)(3846002)(68736007)(14454004)(102836004)(2351001)(8936002)(26005)(50226002)(66574012)(1076003)(6116002)(25786009)(71190400001)(106356001)(52116002)(316002)(86362001)(71200400001)(305945005)(476003)(7736002)(2616005)(97736004)(386003)(5640700003)(99286004)(2501003)(256004);DIR:OUT;SFP:1101;SCL:1;SRVR:DM6PR12MB2811;H:DM6PR12MB2682.namprd12.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
received-spf: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
x-ms-exchange-senderadcheck: 1
x-microsoft-antispam-message-info: 
 8BSb8D+SoYTkG9C5qSvFaD73LfDV6Y44Lv0K+cuVsSwWSR7Q6q7w76p/JFfXpSI/T94vAwQCr53K9aCogmzLfjd/CzObRA6GIA4HmBY5E9a07N4k+qG3zYchbJ9HSBDvuJ07a0B7IGVSn77w17MtN9x4hHsgUiJVC7nsXxlQwpC3DdL/5WM7vuVJlE7HNcYCw8uDpL6gXpWbG8UksXtvGb45W2ICyz28shc5hU5aHlxhk9BKvqlm6Xg6qui3XRXRutEcXRIjk5K0jfJfP7Tyy8dIUMGX2xoDS1m140JRIwozzI1dyZ7AyIjTiTzOLDvqof9sthPKCFLgFWpU27MoYMd3uPEB1+O8jY2bxJHEjaWt8YszX2JIfCjjhmMAFW1PUiRNywvEz9uo5+ZfBAZdWeWueEJZjIAnpRSddsWf9pw=
Content-Type: text/plain; charset="utf-8"
Content-ID: <337539FCC3608440AC7F268F597C92B8@namprd12.prod.outlook.com>
MIME-Version: 1.0
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 901b2ac9-080c-4e0c-a908-08d6936a66d0
X-MS-Exchange-CrossTenant-originalarrivaltime: 15 Feb 2019 17:24:11.1975
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-mailboxtype: HOSTED
X-MS-Exchange-CrossTenant-id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR12MB2811
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Errata#1096:

On a nested data page fault when CR.SMAP=1 and the guest data read
generates a SMAP violation, GuestInstrBytes field of the VMCB on a
VMEXIT will incorrectly return 0h instead the correct guest
instruction bytes .

Recommend Workaround:

To determine what instruction the guest was executing the hypervisor
will have to decode the instruction at the instruction pointer.

The recommended workaround can not be implemented for the SEV
guest because guest memory is encrypted with the guest specific key,
and instruction decoder will not be able to decode the instruction
bytes. If we hit this errata in the SEV guest then log the message
and request a guest shutdown.

Reported-by: Venkatesh Srinivas <venkateshs@google.com>
Cc: Jim Mattson <jmattson@google.com>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: Borislav Petkov <bp@alien8.de>
Cc: Joerg Roedel <joro@8bytes.org>
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
---

Changes since v1:
 * request to shutdown the guest instead of injecting #GP
 * use the pr_err_ratelimited to supress the host dmesg

 arch/x86/include/asm/kvm_host.h |  2 ++
 arch/x86/kvm/mmu.c              |  6 ++++--
 arch/x86/kvm/svm.c              | 32 ++++++++++++++++++++++++++++++++
 arch/x86/kvm/vmx/vmx.c          |  6 ++++++
 4 files changed, 44 insertions(+), 2 deletions(-)

diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h
index 4660ce90de7f..536acf622af9 100644
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@ -1194,6 +1194,8 @@ struct kvm_x86_ops {
 	int (*nested_enable_evmcs)(struct kvm_vcpu *vcpu,
 				   uint16_t *vmcs_version);
 	uint16_t (*nested_get_evmcs_version)(struct kvm_vcpu *vcpu);
+
+	bool (*emulate_instruction_possible)(struct kvm_vcpu *vcpu);
 };
 
 struct kvm_arch_async_pf {
diff --git a/arch/x86/kvm/mmu.c b/arch/x86/kvm/mmu.c
index da9c42349b1f..8ebc1bfcabd3 100644
--- a/arch/x86/kvm/mmu.c
+++ b/arch/x86/kvm/mmu.c
@@ -5384,8 +5384,10 @@ int kvm_mmu_page_fault(struct kvm_vcpu *vcpu, gva_t cr2, u64 error_code,
 	 * page is not present in memory). In those cases we simply restart the
 	 * guest.
 	 */
-	if (unlikely(insn && !insn_len))
-		return 1;
+	if (unlikely(insn && !insn_len)) {
+		if (!kvm_x86_ops->emulate_instruction_possible(vcpu))
+			return 1;
+	}
 
 	er = x86_emulate_instruction(vcpu, cr2, emulation_type, insn, insn_len);
 
diff --git a/arch/x86/kvm/svm.c b/arch/x86/kvm/svm.c
index f13a3a24d360..32eba0dd1da6 100644
--- a/arch/x86/kvm/svm.c
+++ b/arch/x86/kvm/svm.c
@@ -7098,6 +7098,36 @@ static int nested_enable_evmcs(struct kvm_vcpu *vcpu,
 	return -ENODEV;
 }
 
+static bool emulate_instruction_possible(struct kvm_vcpu *vcpu)
+{
+	bool is_user, smap;
+
+	is_user = svm_get_cpl(vcpu) == 3;
+	smap = !kvm_read_cr4_bits(vcpu, X86_CR4_SMAP);
+
+	/*
+	 * Detect and workaround Errata 1096 Fam_17h_00_0Fh
+	 *
+	 * In non SEV guest, hypervisor will be able to read the guest
+	 * memory to decode the instruction pointer when insn_len is zero
+	 * so we return true to indicate that decoding is possible.
+	 *
+	 * But in the SEV guest, the guest memory is encrypted with the
+	 * guest specific key and hypervisor will not be able to decode the
+	 * instruction pointer so we will not able to workaround it. Lets
+	 * print the error and request to kill the guest.
+	 */
+	if (is_user && smap) {
+		if (!sev_guest(vcpu->kvm))
+			return true;
+
+		pr_err_ratelimited("KVM: Guest triggered AMD Erratum 1096\n");
+		kvm_make_request(KVM_REQ_TRIPLE_FAULT, vcpu);
+	}
+
+	return false;
+}
+
 static struct kvm_x86_ops svm_x86_ops __ro_after_init = {
 	.cpu_has_kvm_support = has_svm,
 	.disabled_by_bios = is_disabled,
@@ -7231,6 +7261,8 @@ static struct kvm_x86_ops svm_x86_ops __ro_after_init = {
 
 	.nested_enable_evmcs = nested_enable_evmcs,
 	.nested_get_evmcs_version = nested_get_evmcs_version,
+
+	.emulate_instruction_possible = emulate_instruction_possible,
 };
 
 static int __init svm_init(void)
diff --git a/arch/x86/kvm/vmx/vmx.c b/arch/x86/kvm/vmx/vmx.c
index 95d618045001..6d64b7620741 100644
--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@ -7530,6 +7530,11 @@ static int enable_smi_window(struct kvm_vcpu *vcpu)
 	return 0;
 }
 
+static bool emulate_instruction_possible(struct kvm_vcpu *vcpu)
+{
+	return 0;
+}
+
 static __init int hardware_setup(void)
 {
 	unsigned long host_bndcfgs;
@@ -7832,6 +7837,7 @@ static struct kvm_x86_ops vmx_x86_ops __ro_after_init = {
 	.set_nested_state = NULL,
 	.get_vmcs12_pages = NULL,
 	.nested_enable_evmcs = NULL,
+	.emulate_instruction_possible = emulate_instruction_possible,
 };
 
 static void vmx_cleanup_l1d_flush(void)
