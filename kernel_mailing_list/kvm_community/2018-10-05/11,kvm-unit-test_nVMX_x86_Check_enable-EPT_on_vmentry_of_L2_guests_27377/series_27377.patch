From patchwork Fri Oct  5 16:15:38 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: Krish Sadhukhan <krish.sadhukhan@oracle.com>
X-Patchwork-Id: 10628461
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 2FA09184E
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  5 Oct 2018 16:39:22 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 27D65299CE
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  5 Oct 2018 16:39:22 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 1BF3D299E2; Fri,  5 Oct 2018 16:39:22 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-8.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI,
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9E18D299D2
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  5 Oct 2018 16:39:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728341AbeJEXit (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 5 Oct 2018 19:38:49 -0400
Received: from userp2130.oracle.com ([156.151.31.86]:37868 "EHLO
        userp2130.oracle.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727958AbeJEXit (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 5 Oct 2018 19:38:49 -0400
Received: from pps.filterd (userp2130.oracle.com [127.0.0.1])
        by userp2130.oracle.com (8.16.0.22/8.16.0.22) with SMTP id
 w95Gd587070088;
        Fri, 5 Oct 2018 16:39:15 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
 h=from : to : cc :
 subject : date : message-id : in-reply-to : references : mime-version :
 content-type : content-transfer-encoding; s=corp-2018-07-02;
 bh=vJYuvRK3JKAsw1GtIazmI7rLvZoO+S7+JNDgM987gTU=;
 b=tzFJCeQEOxj0YXs0fApYE7QDvjZd8HsKejjK7y8OKmKZ0F11OHPYYhJMvsZLyH3nwidf
 fScD9x/LedztmZFGkDWD8NyRIcoRTNIHaCGK0nkTKejgMSxQvqGm74JpzGSxDwEfezO1
 o4WEReKEppqXLtsaKAdImhJbxt+B43VZtHc2XoYdwA/iCd6MS6oLVTq+79vvDDTv8PZM
 ExEr59n5KdGGhdTb6VeBL1Zw1LcRBl5jpedlJL/Dnz//qX1A30XPJRHO4x1T3Pj652Y2
 6hQNL4m0aLoZzXuLo+4U82JLdH46BI4vyYsiGOUz8ComSOAv0t8bs5TKxhqyF65JVv7M fA==
Received: from aserv0022.oracle.com (aserv0022.oracle.com [141.146.126.234])
        by userp2130.oracle.com with ESMTP id 2mt0tubtkg-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
 verify=OK);
        Fri, 05 Oct 2018 16:39:15 +0000
Received: from userv0121.oracle.com (userv0121.oracle.com [156.151.31.72])
        by aserv0022.oracle.com (8.14.4/8.14.4) with ESMTP id w95GdEcG000681
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
 verify=OK);
        Fri, 5 Oct 2018 16:39:14 GMT
Received: from abhmp0014.oracle.com (abhmp0014.oracle.com [141.146.116.20])
        by userv0121.oracle.com (8.14.4/8.13.8) with ESMTP id w95GdD3X002191;
        Fri, 5 Oct 2018 16:39:13 GMT
Received: from ban25x6uut29.us.oracle.com (/10.153.73.29)
        by default (Oracle Beehive Gateway v4.0)
        with ESMTP ; Fri, 05 Oct 2018 16:39:13 +0000
From: Krish Sadhukhan <krish.sadhukhan@oracle.com>
To: kvm@vger.kernel.org
Cc: pbonzini@redhat.com, rkrcmar@redhat.com, jmattson@google.com
Subject: [PATCH 1/1][kvm-unit-test] nVMX x86: Check enable-EPT on vmentry of
 L2 guests
Date: Fri,  5 Oct 2018 12:15:38 -0400
Message-Id: <20181005161538.24907-2-krish.sadhukhan@oracle.com>
X-Mailer: git-send-email 2.9.5
In-Reply-To: <20181005161538.24907-1-krish.sadhukhan@oracle.com>
References: <20181005161538.24907-1-krish.sadhukhan@oracle.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=9037
 signatures=668706
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 suspectscore=1
 malwarescore=0
 phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=646
 adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.0.1-1807170000 definitions=main-1810050166
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

According to section "Checks on VMX Controls" in Intel SDM vol 3C, the
following check needs to be enforced on vmentry of L2 guests:

  If the "unrestricted guest" VM-execution control is 1, the "enable EPT"
  VM-execution control must also be 1.

Signed-off-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Reviewed-by: Mihai Carabas <mihai.carabas@oracle.com>
Reviewed-by: Mark Kanda <mark.kanda@oracle.com>
---
 x86/vmx_tests.c | 56 ++++++++++++++++++++++++++++++++++++++++++--------------
 1 file changed, 42 insertions(+), 14 deletions(-)

diff --git a/x86/vmx_tests.c b/x86/vmx_tests.c
index be166ef..8c87a8a 100644
--- a/x86/vmx_tests.c
+++ b/x86/vmx_tests.c
@@ -4490,24 +4490,28 @@ static void test_eptp_ad_bit(u64 eptp, bool ctrl)
 	report_prefix_pop();
 
 }
+
 /*
- * If the â€œenable EPTâ€ VM-execution control is 1, the EPTP VM-execution
- * control field must satisfy the following checks:
+ * 1. If the "enable EPT" VM-execution control is 1, the "EPTP VM-execution"
+ *    control field must satisfy the following checks:
+ *
+ *     - The EPT memory type (bits 2:0) must be a value supported by the
+ *	 processor as indicated in the IA32_VMX_EPT_VPID_CAP MSR.
+ *     - Bits 5:3 (1 less than the EPT page-walk length) must be 3,
+ *	 indicating an EPT page-walk length of 4.
+ *     - Bit 6 (enable bit for accessed and dirty flags for EPT) must be
+ *	 0 if bit 21 of the IA32_VMX_EPT_VPID_CAP MSR is read as 0,
+ *	 indicating that the processor does not support accessed and dirty
+ *	 dirty flags for EPT.
+ *     - Reserved bits 11:7 and 63:N (where N is the processor's
+ *	 physical-address width) must all be 0.
  *
- *   â€”  The EPT memory type (bits 2:0) must be a value supported by the
- *	processor as indicated in the IA32_VMX_EPT_VPID_CAP MSR.
- *   â€”  Bits 5:3 (1 less than the EPT page-walk length) must be 3,
- *	indicating an EPT page-walk length of 4.
- *   â€”  Bit 6 (enable bit for accessed and dirty flags for EPT) must be
- *	0 if bit 21 of the IA32_VMX_EPT_VPID_CAP MSR is read as 0,
- *	indicating that the processor does not support accessed and dirty
- *	dirty flags for EPT.
- *   â€”  Reserved bits 11:7 and 63:N (where N is the processorâ€™s
- *	physical-address width) must all be 0.
+ * 2. If the "unrestricted guest" VM-execution control is 1, the
+ *    "enable EPT" VM-execution control must also be 1.
  *
  *  [Intel SDM]
  */
-static void test_eptp(void)
+static void test_ept_eptp(void)
 {
 	u32 primary_saved = vmcs_read(CPU_EXEC_CTRL0);
 	u32 secondary_saved = vmcs_read(CPU_EXEC_CTRL1);
@@ -4655,6 +4659,30 @@ static void test_eptp(void)
 		report_prefix_pop();
 	}
 
+	secondary &= ~(CPU_EPT | CPU_URG);
+	vmcs_write(CPU_EXEC_CTRL1, secondary);
+	report_prefix_pushf("Enable-EPT disabled, unrestricted-guest disabled");
+	test_vmx_controls(true, false);
+	report_prefix_pop();
+
+	secondary |= CPU_URG;
+	vmcs_write(CPU_EXEC_CTRL1, secondary);
+	report_prefix_pushf("Enable-EPT disabled, unrestricted-guest enabled");
+	test_vmx_controls(false, false);
+	report_prefix_pop();
+
+	secondary |= CPU_EPT;
+	vmcs_write(CPU_EXEC_CTRL1, secondary);
+	report_prefix_pushf("Enable-EPT enabled, unrestricted-guest enabled");
+	test_vmx_controls(true, false);
+	report_prefix_pop();
+
+	secondary &= ~CPU_URG;
+	vmcs_write(CPU_EXEC_CTRL1, secondary);
+	report_prefix_pushf("Enable-EPT enabled, unrestricted-guest disabled");
+	test_vmx_controls(true, false);
+	report_prefix_pop();
+
 	vmcs_write(CPU_EXEC_CTRL0, primary_saved);
 	vmcs_write(CPU_EXEC_CTRL1, secondary_saved);
 	vmcs_write(EPTP, eptp_saved);
@@ -4684,7 +4712,7 @@ static void vmx_controls_test(void)
 	test_nmi_ctrls();
 	test_invalid_event_injection();
 	test_vpid();
-	test_eptp();
+	test_ept_eptp();
 }
 
 static bool valid_vmcs_for_vmentry(void)
