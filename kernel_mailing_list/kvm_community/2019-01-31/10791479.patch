From patchwork Thu Jan 31 20:24:30 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: KarimAllah Ahmed <karahmed@amazon.de>
X-Patchwork-Id: 10791479
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id D951713B4
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 31 Jan 2019 20:28:31 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D0833305C4
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 31 Jan 2019 20:28:31 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id C4CED30B0B; Thu, 31 Jan 2019 20:28:31 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-8.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham
	version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 59562305C4
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 31 Jan 2019 20:28:31 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727947AbfAaU1A (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Thu, 31 Jan 2019 15:27:00 -0500
Received: from smtp-fw-33001.amazon.com ([207.171.190.10]:45267 "EHLO
        smtp-fw-33001.amazon.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726848AbfAaU05 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 31 Jan 2019 15:26:57 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
  d=amazon.de; i=@amazon.de; q=dns/txt; s=amazon201209;
  t=1548966416; x=1580502416;
  h=from:to:cc:subject:date:message-id;
  bh=AwlZoG+GdDHirdFGtVxNhsjSqiLfpzuSgI13aMAJA1g=;
  b=p1JC3YVdiHzrZu0ohd2GJmRocKrU28K4RO9b0C4c5GD8kreGuqiNOnxZ
   h6YAc960bjSq26scCXrDaFJd8xFlQbdDrxVKHy6egjek7/GeOjrHddyQM
   bU0UarT0SCFYbjNhzleB6rJKcwuVGs7hmrVfwnDNvQwVC0YMQEPmYFUCn
   I=;
X-IronPort-AV: E=Sophos;i="5.56,545,1539648000";
   d="scan'208";a="780024355"
Received: from sea3-co-svc-lb6-vlan2.sea.amazon.com (HELO
 email-inbound-relay-1d-2c665b5d.us-east-1.amazon.com) ([10.47.22.34])
  by smtp-border-fw-out-33001.sea14.amazon.com with
 ESMTP/TLS/DHE-RSA-AES256-SHA; 31 Jan 2019 20:26:52 +0000
Received: from u54e1ad5160425a4b64ea.ant.amazon.com
 (iad7-ws-svc-lb50-vlan3.amazon.com [10.0.93.214])
        by email-inbound-relay-1d-2c665b5d.us-east-1.amazon.com
 (8.14.7/8.14.7) with ESMTP id x0VKQiVc016430
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO);
        Thu, 31 Jan 2019 20:26:47 GMT
Received: from u54e1ad5160425a4b64ea.ant.amazon.com (localhost [127.0.0.1])
        by u54e1ad5160425a4b64ea.ant.amazon.com (8.15.2/8.15.2/Debian-3) with
 ESMTP id x0VKQhZX028877;
        Thu, 31 Jan 2019 21:26:43 +0100
Received: (from karahmed@localhost)
        by u54e1ad5160425a4b64ea.ant.amazon.com (8.15.2/8.15.2/Submit) id
 x0VKQgS5028874;
        Thu, 31 Jan 2019 21:26:42 +0100
From: KarimAllah Ahmed <karahmed@amazon.de>
To: x86@kernel.org, kvm@vger.kernel.org, linux-kernel@vger.kernel.org,
	=?utf-8?b?UmFkaW0gS3LEjW3DocWZ?= <rkrcmar@redhat.com>,
 Paolo Bonzini <pbonzini@redhat.com>
Cc: KarimAllah Ahmed <karahmed@amazon.de>
Subject: [PATCH v6 00/14] KVM/X86: Introduce a new guest mapping interface
Date: Thu, 31 Jan 2019 21:24:30 +0100
Message-Id: <1548966284-28642-1-git-send-email-karahmed@amazon.de>
X-Mailer: git-send-email 2.7.4
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Guest memory can either be directly managed by the kernel (i.e. have a "struct
page") or they can simply live outside kernel control (i.e. do not have a
"struct page"). KVM mostly support these two modes, except in a few places
where the code seems to assume that guest memory must have a "struct page".

This patchset introduces a new mapping interface to map guest memory into host
kernel memory which also supports PFN-based memory (i.e. memory without 'struct
page'). It also converts all offending code to this interface or simply
read/write directly from guest memory. Patch 2 is additionally fixing an
incorrect page release and marking the page as dirty (i.e. as a side-effect of
using the helper function to write).

As far as I can see all offending code is now fixed except the APIC-access page
which I will handle in a seperate series along with dropping
kvm_vcpu_gfn_to_page and kvm_vcpu_gpa_to_page from the internal KVM API.

The current implementation of the new API uses memremap to map memory that does
not have a "struct page". This proves to be very slow for high frequency
mappings. Since this does not affect the normal use-case where a "struct page"
is available, the performance of this API will be handled by a seperate patch
series.

So the simple way to use memory outside kernel control is:

1- Pass 'mem=' in the kernel command-line to limit the amount of memory managed 
   by the kernel.
2- Map this physical memory you want to give to the guest with:
   mmap("/dev/mem", physical_address_offset, ..)
3- Use the user-space virtual address as the "userspace_addr" field in
   KVM_SET_USER_MEMORY_REGION ioctl.

v5 -> v6:
- Added one extra patch to ensure that support for this mem= case is complete
  for x86.
- Added a helper function to check if the mapping is mapped or not.
- Added more comments on the struct.
- Setting ->page to NULL on unmap and to a poison ptr if unused during map
- Checking for map ptr before using it.
- Change kvm_vcpu_unmap to also mark page dirty for LM. That requires
  passing the vCPU pointer again to this function.

v4 -> v5:
- Introduce a new parameter 'dirty' into kvm_vcpu_unmap
- A horrible rebase due to nested.c :)
- Dropped a couple of hyperv patches as the code was fixed already as a
  side-effect of another patch.
- Added a new trivial cleanup patch.

v3 -> v4:
- Rebase
- Add a new patch to also fix the newly introduced enlightned VMCS.

v2 -> v3:
- Rebase
- Add a new patch to also fix the newly introduced shadow VMCS.

Filippo Sironi (1):
  X86/KVM: Handle PFNs outside of kernel reach when touching GPTEs

KarimAllah Ahmed (13):
  X86/nVMX: handle_vmon: Read 4 bytes from guest memory
  X86/nVMX: Update the PML table without mapping and unmapping the page
  KVM: Introduce a new guest mapping API
  X86/nVMX: handle_vmptrld: Use kvm_vcpu_map when copying VMCS12 from
    guest memory
  KVM/nVMX: Use kvm_vcpu_map when mapping the L1 MSR bitmap
  KVM/nVMX: Use kvm_vcpu_map when mapping the virtual APIC page
  KVM/nVMX: Use kvm_vcpu_map when mapping the posted interrupt
    descriptor table
  KVM/X86: Use kvm_vcpu_map in emulator_cmpxchg_emulated
  KVM/nSVM: Use the new mapping API for mapping guest memory
  KVM/nVMX: Use kvm_vcpu_map for accessing the shadow VMCS
  KVM/nVMX: Use kvm_vcpu_map for accessing the enlightened VMCS
  KVM/nVMX: Use page_address_valid in a few more locations
  kvm, x86: Properly check whether a pfn is an MMIO or not

 arch/x86/include/asm/e820/api.h |   1 +
 arch/x86/kernel/e820.c          |  18 ++++-
 arch/x86/kvm/mmu.c              |   5 +-
 arch/x86/kvm/paging_tmpl.h      |  38 +++++++---
 arch/x86/kvm/svm.c              |  97 ++++++++++++------------
 arch/x86/kvm/vmx/nested.c       | 160 +++++++++++++++-------------------------
 arch/x86/kvm/vmx/vmx.c          |  19 ++---
 arch/x86/kvm/vmx/vmx.h          |   9 ++-
 arch/x86/kvm/x86.c              |  14 ++--
 include/linux/kvm_host.h        |  28 +++++++
 virt/kvm/kvm_main.c             |  64 ++++++++++++++++
 11 files changed, 267 insertions(+), 186 deletions(-)
