From patchwork Mon Sep 10 21:49:07 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10594801
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 843D614BD
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Sep 2018 21:49:45 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7305F290C8
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Sep 2018 21:49:45 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 666E42911A; Mon, 10 Sep 2018 21:49:45 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 971E3290C8
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Sep 2018 21:49:44 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727623AbeIKCpg (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Mon, 10 Sep 2018 22:45:36 -0400
Received: from mail-sn1nam01on0063.outbound.protection.outlook.com
 ([104.47.32.63]:25492
        "EHLO NAM01-SN1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726217AbeIKCpf (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 10 Sep 2018 22:45:35 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=YGUVvpEV7A1XxRvQx5puWKxpATn3X/CNG/cPWyvqPaY=;
 b=stHojf4kBLB8fhTKLQOdAil1rlDrSWbseJfjtXUJ0BOmZXf0xpAi30U4b/9NapaRQX1BUq/3ISHCwrTwY5Zt5E7QyiMZ/5AXjyfrIF2sn7PQRc0suz5uNZ3jexx3AvcQXPHAMkZjMGPIEHCPKl4ppYkD18+JZcxKLF26pLSZXJE=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 BYAPR12MB2680.namprd12.prod.outlook.com (2603:10b6:a03:69::29) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1122.15; Mon, 10 Sep 2018 21:49:26 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v7 1/5] x86/mm: Restructure sme_encrypt_kernel()
Date: Mon, 10 Sep 2018 16:49:07 -0500
Message-Id: <1536616151-16738-2-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1536616151-16738-1-git-send-email-brijesh.singh@amd.com>
References: <1536616151-16738-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: MWHPR13CA0010.namprd13.prod.outlook.com
 (2603:10b6:300:16::20) To BYAPR12MB2680.namprd12.prod.outlook.com
 (2603:10b6:a03:69::29)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 76de70fd-6508-46b3-52b3-08d617674829
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:BYAPR12MB2680;
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;3:G7QRfyE9rcLhHJp+kbW6NbeqGci8hAHHrsUvDKRlcIdu/kaoKHGIFFzVuoIA5XPtVoeMp4vbMb/dUK6Z8QGGPrTLQrWGmhdu/nxOfPdK1/0a0ejdCuVV3CX6w/z4a5gljuDp07mD9a6h/jbDbw6F09Yp44jogG97ovUnLd0+KubQQ34fc5suRR+sEYwKbeuwkipSB/4JULJ4X+8FMNrOkXmc9wVGqx1613a/DhQmURYP6FokUUYfef9b1gBZzeJU;25:GFbw/RfJuVLvAcqoxPgrbCPi6h6xW8G3cUNWFiGY7bBCBkxFrTARpX6B/1aU6WxTcTrB2n/+UqJ2JwahQXiGhNWpDaoFmwHI/sr1QkYQu62klcl6owY+3Ml7CyrnszfgAPpwoAy91sEGX0jwaWvblHaRhNlyBbmX/54TpU7cGu1VF4b9vNnlxH+SYIqisk+OtcUWAeG0wk0EMXINmJH/q1lMmxdHB1pFo8oLzI3+qDoyzkVK+X/Yr3ZoLgdZANEzlE+gqEUzbb+or4W1SU+144VlQQIWeWjyCTOEZg9G2eCYM1oKbH8smYra5+nVgoJluR1Rguo9XvPIEyMq+kBENw==;31:vAuoOKOQva7Dq7Yu3liDSZFEH4kPBiVgp1s8Ue1cZjSvDcETEFrZXpV+JemTnqry1GQAMfLhOo1FTrJEPR3J0hehzcw0Sgc1yKrNElkbjnHIxWRwmzKe3ez6lwSr5Xq49lJ/KCGa2MFvsmnMYKwjKeZTIlwzzs/TAhGQDXWYEl3uPIX3xSfsp/rFDDaw583g5C0wRYCkY4Ct5OWT4xwCtuGyAaQkLk+chvFTUp0q0K8=
X-MS-TrafficTypeDiagnostic: BYAPR12MB2680:
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;20:/PbfnZY1J7hISyWefcvoro8xXjAdx9lumXGOr62KJAGO9axR6GgkWaGAkA2Q5rMB1Uq1YBlmEvVr5nfbemtaBfBRmfCEn+o8KQ6yOs9Vro4LidkA2QrIHs8GDLJe0mfnf2jmxBZVqjCCAfisjLVO37nLqsJAC+aVv9yBiIDHjnG3PUBB+E8yEAJDRUjTCqJ1sHu+ap7dXZKeAG3HgWO/8ijuxEgCJkCQBW76MmK8ivVt4BxVzsOnhpGdRnqBsvAHjF1euP4W+H6kOESFV6KBd4vWjLwlrqoVrumbmNyaG9Rwn4H11jmgLMkI5cn015DxdQLMRASTFwo3NvhVMRqUqKnQixtWWozmfUYI1VlIHtginsa3vnt72UXt5RmAyCzIsgx1qiuIUd/Z5N9ZfPlimFFErUJqK/2K8jTZ21+jmJ7JcDmsjwfGjLbu9ZygGU9TJaMBCl0pT/x6zzs8Cm5i55mVLHkDZNrSUqhHmq9I4wG40oAcfEjHkVWDwQODHkzu;4:pappFMAt2qficBcF0L6whIU/srE+r+59f+0p81DLfZEfLYkp24tj7juqfwX2Lq3BklQvyUhhHiCW1jLJcCnZIFvwseIt29pC4CuOgZ/DWWyB3t3s6qEV7Q9zAHXus4u0XB1EiE+8TF/wJsnrHyHcEO5PZygijCvP4ezPfTb48X/VWedIeBrYuNk0yMksmz5yppBjSSdWmLjXpkpOPiEAxe9Vp/cCb0N8USKf7GFRBsgqG8+NPqquzk6kAR6IdmKDXBMwAfvHeyM63t/hN/eI5W6/ZrPUfFZ8t7k2cX4+jExHSFfSRFfrX7V7PzmzhnsUbhTot6dcLFmuaLA+ybJko331CW9t1vl4OIIBo+NE5YtZWu59V38aAs/Z7lm3TWSM
X-Microsoft-Antispam-PRVS: 
 <BYAPR12MB2680C995EA287A3E9760120EE5050@BYAPR12MB2680.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(823301075)(10201501046)(93006095)(93001095)(3002001)(3231311)(944501410)(52105095)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123562045)(20161123560045)(20161123564045)(20161123558120)(201708071742011)(7699050);SRVR:BYAPR12MB2680;BCL:0;PCL:0;RULEID:;SRVR:BYAPR12MB2680;
X-Forefront-PRVS: 07915F544A
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(136003)(346002)(396003)(39860400002)(366004)(376002)(199004)(189003)(6666003)(386003)(8936002)(53416004)(7696005)(52116002)(25786009)(23676004)(76176011)(105586002)(8676002)(106356001)(50466002)(50226002)(26005)(186003)(66066001)(16526019)(6116002)(54906003)(3846002)(47776003)(2906002)(97736004)(2870700001)(4326008)(316002)(81166006)(36756003)(446003)(81156014)(476003)(2616005)(11346002)(305945005)(7736002)(5660300001)(956004)(86362001)(44832011)(6486002)(14444005)(68736007)(53936002)(486006)(478600001);DIR:OUT;SFP:1101;SCL:1;SRVR:BYAPR12MB2680;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BBYAPR12MB2680=3B23=3AvSk4Zn+?=
	=?utf-8?q?s0jrrYNO9PvblN2JuiWAH6OAnE7rtxXNwpxhuJyP/9aFwZzk7B/Any9ZDtE5XJjuL?=
	=?utf-8?q?fcNdbgJeskIfrHXbcqWTYM7zezNefG9clsqpdHQhRGO1vUzavY2O2bMuMwiPAS10h?=
	=?utf-8?q?E8KjwN7IhZQzTiG+XoBG06UQgkvegISwe6twi1RLfHwkd14mO1/DkA1Y2Zj9yWUp6?=
	=?utf-8?q?/E0Oeei8OgQ55aH5mKE9IudOVN3o+buduYanjvk0eyEC2RTrKD02V684Hv6JEE7zN?=
	=?utf-8?q?gVZBQZSDTNnB5Nt6TDyY8OhFWZSu3Fy+aOT8BVjYdJm1jUpkkthm02MeAbtKytaEw?=
	=?utf-8?q?3on03YvVzZPLTDi7QQSfNNtNhBgTdCbpxVpaE2bAzRyFwkaZT+z2yVNolevoYe4cm?=
	=?utf-8?q?GHAUWE3NGMlcX8uFXf6y1CNC1zgAurXPDUIvqLku/DF0t+xGo1vPyFDlKCA79QLBq?=
	=?utf-8?q?GaKq3n8D/6VLD1KqXtB9BaKRpjtCYXrhSbFLIurClOgjd384o4We+4hd5txXyNaUe?=
	=?utf-8?q?9F7zOcqSPOu6M0eSw/3nEaRtZnQuXlCTmKhp63Ys2CigilutKmLerTC+tq7IG9hZ2?=
	=?utf-8?q?TMr7z3xr78WGoba8SX9AZ4J2h/aYJkD7zno+RQApSZmwsmRqcpPEXdTgxV+V5VdUl?=
	=?utf-8?q?gp103ohMhxqDPvqIx3fg3HZLWhrcaLhIplDDZj4fFvAqx2smRmBDiDuQN+vB6N0A1?=
	=?utf-8?q?Auypi6uhQetaiXywllxBtMgVxeyliSO6tTvpJ5wVjSC4icX7LjmoBXen0YOe6iVzw?=
	=?utf-8?q?qo+SQ1CO9+fKRzFeaRSp2KGq44SHkQmsYXraK/SLmnejdTcRUzhI4dqlLeufMe2FO?=
	=?utf-8?q?FG5753kYmGPXfi4C5oAIqs3vUx/cQba5/5sc7S74/+26vx7SaMwe57IgWYV4eVPMH?=
	=?utf-8?q?5th0vg81ApGk8a70EMF2Ymzn9LwZnTKBjyVXriygRCkK19kyXBawb2zu+twu3xouH?=
	=?utf-8?q?4KrZRpXDGGFXaKzxMN9LPZoaKdAvfF6xO93zBIKkbw98xdrzEB3sqKh9UQtS2K7SZ?=
	=?utf-8?q?OMTK6MXk4K2x6fkABYoGvmckIqvNx7fW+sQLFmAvdkhLbE5cfvoJSItsldFtECtbm?=
	=?utf-8?q?jsZb+EKweKSELmkfaIUnHHROE9wUQwj1USfUMz+0xLRlWlrW4WjT/2aWV2ulm16Eg?=
	=?utf-8?q?2iYynA6DB2gJ8MgipQmPv983i78m/hxCBIyRmGi?=
X-Microsoft-Antispam-Message-Info: 
 oFF3C+4fwch8zBbAqEEZpsCwKfVBcNnwWr4ilwhWUCy2r2SibbR9jJlrOiutKDb7SCElA6t+LBKqrpg8kGW4V/PmIbZZpaHSKu22afViNVGACFKPNC6xg/ce1Xw0hssPlFaFM/JS2z/2JSz7n4oT9hzb+UycdV+U2jrmAdFRSOnEH8XGlmWBlWfolVXmNfzyP7iwnS5EUZYb+w6JhdttgUTWD+nePzIL1lSGY4HOFbORmSmOhozVRfx/7kJXdlB7yJutpDzVCzxwuJ4KyPDwtlQGxvZHXI3RfS3UCLFPg77F+9CBEO2RBj6EHrjIQenKq1cQ+vTmqwmgfOZ1sMqMzV2gPHSL9XU4hR3IIo4QMrU=
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;6:g7yk+IsAus/TMklWqF3Av1AlUazs52JMQkgDHUJl4c0Nn1Revb5gHT5bkoaZOgSeMdy2SI2k0sBVhpmYjyszzOFGlbQBt6cO40DSvU31eXRpryUV457F3ZlSquU01jNcUxLavKvobOg3xgC386kbYfMLW7Esu8rLjD0jKG7EXMOV8BerQoXaghMk0OExNKXPIv/Q8Wn91dsggosd0Q6IVu7MRT0lg78MOYho25UHI2GK2ehpFls2JK+Uq8KWZ3lEChDGrC8WgM/ADdbD0mSos9B8/EawIH/TybA1FU0shcYjsH0ZbtWizlWkuA7a9zx4wDhlqdaBChc3pgL3RsWo3fySBtE/grGx6e0NV6ipfGQkmmPL6f2oiObJuk/pI9yQtIy5lhgD7tmjhDECRlr1UyL/3b22fOtBAZyLvHF9Hh8Sm/liT85/ioubaOjHLbC9nPGgGrXZyGIyKOnWRgFd+g==;5:xdG3QRwtrn04bB4Wc12OuXJ5xl5QZgeMcsDxitK+J//YHzfO2LE8689XJpuOOMoEh/XtxciB5cWh1E5J19ZMC+A+7raxt4ol1yjCarAKVeaU4zu2fg7F3nRl379Bfw/KmaUzgIXlA19YLtFb3V3Rw2CP63Tigxl7lq48XlEUuMk=;7:kZehIrmFYj5vzoA4oO1FNdzbEGQNR5Aqg2Y+4bOAKgjgXL+M9aNCw4ddObppApfw1WAocg4y/1fVw3ACXMqEc4R/tbOtsYoq7eepohQQxXqKHXQmpXMMec74IzjWXXlGlXDLMlnwV+j3n65fqJlpRoDyBj2sJ5LGICcRn/k0n+qM4KRgWXRFlgsoPDSwgzMaorNGcmZSPtoijaO3jZvIgncjMMn3SWu41uAJNgHRIjtX5mI1GH++iCJ/jakEpe1c
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;20:mGEjOeExKmdxHrQ9voNetkUFigCEcpnMCwdmss/YQcE5fpSAS+KyRTuCTWB8XuaYkpxK+Z6yzHu5YOdO1vKvDl1/jP18qx8aqXPWQFB2Ck7MybHNERJra+npgSE39Z/BEFiXtoCsHRQ8+HzEW+4oD/3G3+APPoZ6fDcD31I033a6Al48DTaKqS6hge6ak3/YROJLz77571FDUYEajvKemDXl4a6yt2XUecw5p9KZyBYW3R7RgE7+wFxlFA4i2NaL
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 10 Sep 2018 21:49:26.7483 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 76de70fd-6508-46b3-52b3-08d617674829
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BYAPR12MB2680
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Re-arrange the sme_encrypt_kernel() by moving the workarea map/unmap
logic in a separate static function. There are no logical changes in this
patch. The restructuring will allow us to expand the sme_encrypt_kernel
in future.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
Reviewed-by: Borislav Petkov <bp@suse.de>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/mm/mem_encrypt_identity.c | 160 ++++++++++++++++++++++++-------------
 1 file changed, 104 insertions(+), 56 deletions(-)

diff --git a/arch/x86/mm/mem_encrypt_identity.c b/arch/x86/mm/mem_encrypt_identity.c
index a19ef1a..f488d46 100644
--- a/arch/x86/mm/mem_encrypt_identity.c
+++ b/arch/x86/mm/mem_encrypt_identity.c
@@ -73,6 +73,22 @@ struct sme_populate_pgd_data {
 	unsigned long vaddr_end;
 };
 
+struct sme_workarea_data {
+	unsigned long kernel_start;
+	unsigned long kernel_end;
+	unsigned long kernel_len;
+
+	unsigned long initrd_start;
+	unsigned long initrd_end;
+	unsigned long initrd_len;
+
+	unsigned long workarea_start;
+	unsigned long workarea_end;
+	unsigned long workarea_len;
+
+	unsigned long decrypted_base;
+};
+
 static char sme_cmdline_arg[] __initdata = "mem_encrypt";
 static char sme_cmdline_on[]  __initdata = "on";
 static char sme_cmdline_off[] __initdata = "off";
@@ -267,19 +283,17 @@ static unsigned long __init sme_pgtable_calc(unsigned long len)
 	return entries + tables;
 }
 
-void __init sme_encrypt_kernel(struct boot_params *bp)
+static void __init build_workarea_map(struct boot_params *bp,
+				      struct sme_workarea_data *wa,
+				      struct sme_populate_pgd_data *ppd)
 {
 	unsigned long workarea_start, workarea_end, workarea_len;
 	unsigned long execute_start, execute_end, execute_len;
 	unsigned long kernel_start, kernel_end, kernel_len;
 	unsigned long initrd_start, initrd_end, initrd_len;
-	struct sme_populate_pgd_data ppd;
 	unsigned long pgtable_area_len;
 	unsigned long decrypted_base;
 
-	if (!sme_active())
-		return;
-
 	/*
 	 * Prepare for encrypting the kernel and initrd by building new
 	 * pagetables with the necessary attributes needed to encrypt the
@@ -359,17 +373,17 @@ void __init sme_encrypt_kernel(struct boot_params *bp)
 	 * pagetables and when the new encrypted and decrypted kernel
 	 * mappings are populated.
 	 */
-	ppd.pgtable_area = (void *)execute_end;
+	ppd->pgtable_area = (void *)execute_end;
 
 	/*
 	 * Make sure the current pagetable structure has entries for
 	 * addressing the workarea.
 	 */
-	ppd.pgd = (pgd_t *)native_read_cr3_pa();
-	ppd.paddr = workarea_start;
-	ppd.vaddr = workarea_start;
-	ppd.vaddr_end = workarea_end;
-	sme_map_range_decrypted(&ppd);
+	ppd->pgd = (pgd_t *)native_read_cr3_pa();
+	ppd->paddr = workarea_start;
+	ppd->vaddr = workarea_start;
+	ppd->vaddr_end = workarea_end;
+	sme_map_range_decrypted(ppd);
 
 	/* Flush the TLB - no globals so cr3 is enough */
 	native_write_cr3(__native_read_cr3());
@@ -380,9 +394,9 @@ void __init sme_encrypt_kernel(struct boot_params *bp)
 	 * then be populated with new PUDs and PMDs as the encrypted and
 	 * decrypted kernel mappings are created.
 	 */
-	ppd.pgd = ppd.pgtable_area;
-	memset(ppd.pgd, 0, sizeof(pgd_t) * PTRS_PER_PGD);
-	ppd.pgtable_area += sizeof(pgd_t) * PTRS_PER_PGD;
+	ppd->pgd = ppd->pgtable_area;
+	memset(ppd->pgd, 0, sizeof(pgd_t) * PTRS_PER_PGD);
+	ppd->pgtable_area += sizeof(pgd_t) * PTRS_PER_PGD;
 
 	/*
 	 * A different PGD index/entry must be used to get different
@@ -400,75 +414,109 @@ void __init sme_encrypt_kernel(struct boot_params *bp)
 	decrypted_base <<= PGDIR_SHIFT;
 
 	/* Add encrypted kernel (identity) mappings */
-	ppd.paddr = kernel_start;
-	ppd.vaddr = kernel_start;
-	ppd.vaddr_end = kernel_end;
-	sme_map_range_encrypted(&ppd);
+	ppd->paddr = kernel_start;
+	ppd->vaddr = kernel_start;
+	ppd->vaddr_end = kernel_end;
+	sme_map_range_encrypted(ppd);
 
 	/* Add decrypted, write-protected kernel (non-identity) mappings */
-	ppd.paddr = kernel_start;
-	ppd.vaddr = kernel_start + decrypted_base;
-	ppd.vaddr_end = kernel_end + decrypted_base;
-	sme_map_range_decrypted_wp(&ppd);
+	ppd->paddr = kernel_start;
+	ppd->vaddr = kernel_start + decrypted_base;
+	ppd->vaddr_end = kernel_end + decrypted_base;
+	sme_map_range_decrypted_wp(ppd);
 
 	if (initrd_len) {
 		/* Add encrypted initrd (identity) mappings */
-		ppd.paddr = initrd_start;
-		ppd.vaddr = initrd_start;
-		ppd.vaddr_end = initrd_end;
-		sme_map_range_encrypted(&ppd);
+		ppd->paddr = initrd_start;
+		ppd->vaddr = initrd_start;
+		ppd->vaddr_end = initrd_end;
+		sme_map_range_encrypted(ppd);
 		/*
 		 * Add decrypted, write-protected initrd (non-identity) mappings
 		 */
-		ppd.paddr = initrd_start;
-		ppd.vaddr = initrd_start + decrypted_base;
-		ppd.vaddr_end = initrd_end + decrypted_base;
-		sme_map_range_decrypted_wp(&ppd);
+		ppd->paddr = initrd_start;
+		ppd->vaddr = initrd_start + decrypted_base;
+		ppd->vaddr_end = initrd_end + decrypted_base;
+		sme_map_range_decrypted_wp(ppd);
 	}
 
 	/* Add decrypted workarea mappings to both kernel mappings */
-	ppd.paddr = workarea_start;
-	ppd.vaddr = workarea_start;
-	ppd.vaddr_end = workarea_end;
-	sme_map_range_decrypted(&ppd);
+	ppd->paddr = workarea_start;
+	ppd->vaddr = workarea_start;
+	ppd->vaddr_end = workarea_end;
+	sme_map_range_decrypted(ppd);
 
-	ppd.paddr = workarea_start;
-	ppd.vaddr = workarea_start + decrypted_base;
-	ppd.vaddr_end = workarea_end + decrypted_base;
-	sme_map_range_decrypted(&ppd);
+	ppd->paddr = workarea_start;
+	ppd->vaddr = workarea_start + decrypted_base;
+	ppd->vaddr_end = workarea_end + decrypted_base;
+	sme_map_range_decrypted(ppd);
 
-	/* Perform the encryption */
-	sme_encrypt_execute(kernel_start, kernel_start + decrypted_base,
-			    kernel_len, workarea_start, (unsigned long)ppd.pgd);
+	wa->kernel_start = kernel_start;
+	wa->kernel_end = kernel_end;
+	wa->kernel_len = kernel_len;
 
-	if (initrd_len)
-		sme_encrypt_execute(initrd_start, initrd_start + decrypted_base,
-				    initrd_len, workarea_start,
-				    (unsigned long)ppd.pgd);
+	wa->initrd_start = initrd_start;
+	wa->initrd_end = initrd_end;
+	wa->initrd_len = initrd_len;
+
+	wa->workarea_start = workarea_start;
+	wa->workarea_end = workarea_end;
+	wa->workarea_len = workarea_len;
+
+	wa->decrypted_base = decrypted_base;
+}
 
+static void __init teardown_workarea_map(struct sme_workarea_data *wa,
+					 struct sme_populate_pgd_data *ppd)
+{
 	/*
 	 * At this point we are running encrypted.  Remove the mappings for
 	 * the decrypted areas - all that is needed for this is to remove
 	 * the PGD entry/entries.
 	 */
-	ppd.vaddr = kernel_start + decrypted_base;
-	ppd.vaddr_end = kernel_end + decrypted_base;
-	sme_clear_pgd(&ppd);
-
-	if (initrd_len) {
-		ppd.vaddr = initrd_start + decrypted_base;
-		ppd.vaddr_end = initrd_end + decrypted_base;
-		sme_clear_pgd(&ppd);
+	ppd->vaddr = wa->kernel_start + wa->decrypted_base;
+	ppd->vaddr_end = wa->kernel_end + wa->decrypted_base;
+	sme_clear_pgd(ppd);
+
+	if (wa->initrd_len) {
+		ppd->vaddr = wa->initrd_start + wa->decrypted_base;
+		ppd->vaddr_end = wa->initrd_end + wa->decrypted_base;
+		sme_clear_pgd(ppd);
 	}
 
-	ppd.vaddr = workarea_start + decrypted_base;
-	ppd.vaddr_end = workarea_end + decrypted_base;
-	sme_clear_pgd(&ppd);
+	ppd->vaddr = wa->workarea_start + wa->decrypted_base;
+	ppd->vaddr_end = wa->workarea_end + wa->decrypted_base;
+	sme_clear_pgd(ppd);
 
 	/* Flush the TLB - no globals so cr3 is enough */
 	native_write_cr3(__native_read_cr3());
 }
 
+void __init sme_encrypt_kernel(struct boot_params *bp)
+{
+	struct sme_populate_pgd_data ppd;
+	struct sme_workarea_data wa;
+
+	if (!sme_active())
+		return;
+
+	build_workarea_map(bp, &wa, &ppd);
+
+	/* When SEV is active, encrypt kernel and initrd */
+	sme_encrypt_execute(wa.kernel_start,
+			    wa.kernel_start + wa.decrypted_base,
+			    wa.kernel_len, wa.workarea_start,
+			    (unsigned long)ppd.pgd);
+
+	if (wa.initrd_len)
+		sme_encrypt_execute(wa.initrd_start,
+				    wa.initrd_start + wa.decrypted_base,
+				    wa.initrd_len, wa.workarea_start,
+				    (unsigned long)ppd.pgd);
+
+	teardown_workarea_map(&wa, &ppd);
+}
+
 void __init sme_enable(struct boot_params *bp)
 {
 	const char *cmdline_ptr, *cmdline_arg, *cmdline_on, *cmdline_off;

From patchwork Mon Sep 10 21:49:08 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10594799
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id EA41014BD
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Sep 2018 21:49:41 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D9AD6290C8
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Sep 2018 21:49:41 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id CC8932911A; Mon, 10 Sep 2018 21:49:41 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 59DCD290C8
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Sep 2018 21:49:40 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727657AbeIKCpi (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Mon, 10 Sep 2018 22:45:38 -0400
Received: from mail-sn1nam01on0063.outbound.protection.outlook.com
 ([104.47.32.63]:25492
        "EHLO NAM01-SN1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726191AbeIKCph (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 10 Sep 2018 22:45:37 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=42yVdvoyIC1InzIoKeYQOpTIGg3B1LvK6y5816cXV2k=;
 b=vPdJ/A58hB8GEBVx2+nNXFvxCAsXvXoHmpldA3260cYjbxUFSmSFQsNJg4RZ4qnSaJkPbeuPDzH9jVHMYWuAEuq9+31y5/y0mW0sxhINladLhe/wfMUfEw3Oy+hz1Z6bepzns6dL7min5q7drSBcpuZtLZvc8eW9uS6bDuUwYmU=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 BYAPR12MB2680.namprd12.prod.outlook.com (2603:10b6:a03:69::29) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1122.15; Mon, 10 Sep 2018 21:49:28 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v7 2/5] x86/mm: Enhance sme_populate_pgd() to update page
 flags
Date: Mon, 10 Sep 2018 16:49:08 -0500
Message-Id: <1536616151-16738-3-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1536616151-16738-1-git-send-email-brijesh.singh@amd.com>
References: <1536616151-16738-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: MWHPR13CA0010.namprd13.prod.outlook.com
 (2603:10b6:300:16::20) To BYAPR12MB2680.namprd12.prod.outlook.com
 (2603:10b6:a03:69::29)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: acb69080-b80b-4a13-08a9-08d617674926
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:BYAPR12MB2680;
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;3:Ja80zGwHHSWqqyNwsGL4xU2JxgyHKbcPdmfPFObR61cqNZMd7rwFsCwAfvo5R5PyzFrTygA3iPoH8Jv7ALBu77Phw/Mq4SWBKwz6MA2GaaZp2Q58svnZ9TXCRvK9ijhxMyHIC1CoNezAHr5f9l9GR8XReQmxIJpSLKgRmsvEG6Gk+PoAVmlDax2oR4bxuqXqZdkFAqCdFNLlYq94iciEnGJfBPhlJde0amClFXcGARu5Bm6fORBJ8vZ3QbKKWepR;25:clCkFtEEyub0e7VE4GGZQ7Zu5y1TXUkRV8f2+4mwjNwYGOiQ8RTD66lJC8akesu9sJUz/bfSR7L4oclvm7rIbPk4Nwm6RWuKzuvFGG2hIqU2jCWlVfSqYmDuEKOl7quEuxDdebdIgfxga8N8e9RvrOxhEIVoiUyw1Ydt/hcy2xciG4Y04TA4IPdSAoKDhSgUq09ci0EUUX2j/Ku6/J+BGaGBDxKMSLuBW4uO96++WImNryjDy3xYfqnyq6ILbqXFQdkzwlQe4m6Qtp7VlybAPCur2CKITZsXjyu0tHaHLJWzjoAGOf9UCXZ4C/s8PkYrN3nMVVFi/1nftbc88+gZBw==;31:sXLEDb6GQ47K66jJUTTDl7ejVc4GRbUWHsBAeggQL2BQJnySZJtxJrz3clJZxIREsCDRRmyupVqrdYrKoa8J5MxmnElBJ9MxPbOBzkSRGe2YfQrQZokSUrqeScZXMk4VwdDGPZsYNqqgL+l3GYoDLT/qkkg9VSWJ8+L9qyQ8/kxDVD6eRsyQAHLgeMJw6WckDGf0xdU+07G1mApltxBBxxoLT8v7SD8OwGjjQAWpB0w=
X-MS-TrafficTypeDiagnostic: BYAPR12MB2680:
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;20:S2cQ35z1pCUq8XmXNccXNs7/cBQ1GJ0JB7w/lN7v9ERpdbkQGjvdMK7IjJ6pRerEeN1Hm3VvtDTMs3sXfL6TlfWqFQ2B//txntG79yYLnBXlY7fjpq0MKJG//Pn5YxsZE60pH6R7f5nfzPHIbPQXZXS5s7zQtcXKKkMpNj0NZTfy0qgRtamHH+GTFMsTv3n1hkaKaT5RmUeRrZZy5VP2IQHc+zlU10jCZhvegoel88bML00ue8h7S/FDPxTcunPospMlI5FhBznbxV+rNpDeyXdIkNj9sg+Gbo6upW/d0t7R6G5uUmWGm7fBXHaF+BiMDnWuLRcSZZhdgoiIGDfeuIhs9yI8VTnSKz/lp29j2fGBwy5Kt0Lvbap+SfF01+6NlbUj1bIXSrUBmOQmg0Uh9rsKKt0dP+BPRGVVWv5IV7D/wdZcDCUf2fDkTcfeH6syOPbSjN0LevQaTXG20tOTbwOFpk4FOYerCD7W1x0M2/lMc8lCxgS/2t5b0k0zhTp7;4:nwru5Vqaer4PCTJVAlgPMXMcLWS1rP3Fw0/y+z7hhBPJjqvx3hwW5RopKzttX0XaMYuvfjd5tbu98kg13VGx8n7860SZs/yGVLT023blSRHQRbIZR82Nanco4MDejne9/PPRAZQEvnHRaBIs5ZQQ+Uu/VsNOnR6/Hq5COUQ50KkCHhcXcLOwAIRgjTKJpbnOeX7Li+GK5BqAFDYuz+686QMKqHalyYXUyKKhaLL3FYRrf2l+ZTwIFf28bec3F4zHZTHogem0v1S63MdlmMk3H5ZcF1sjx55kj/PAOg2hKt1RrfauDUPX5CSwo+WdF7Y31A6fZ/f5qQl+DXj65GRyguATu4Sze+2Q3JUeVYqNw5l2DhcZ81+bNg7CIVK9z9qz
X-Microsoft-Antispam-PRVS: 
 <BYAPR12MB26806019F0C98993CD568DC3E5050@BYAPR12MB2680.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(823301075)(10201501046)(93006095)(93001095)(3002001)(3231311)(944501410)(52105095)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123562045)(20161123560045)(20161123564045)(20161123558120)(201708071742011)(7699050);SRVR:BYAPR12MB2680;BCL:0;PCL:0;RULEID:;SRVR:BYAPR12MB2680;
X-Forefront-PRVS: 07915F544A
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(136003)(346002)(396003)(39860400002)(366004)(376002)(199004)(189003)(6666003)(386003)(8936002)(53416004)(7696005)(52116002)(25786009)(23676004)(76176011)(105586002)(8676002)(106356001)(50466002)(50226002)(26005)(186003)(66066001)(16526019)(15650500001)(6116002)(54906003)(3846002)(47776003)(2906002)(97736004)(2870700001)(4326008)(316002)(81166006)(36756003)(446003)(81156014)(476003)(2616005)(11346002)(305945005)(7736002)(5660300001)(956004)(86362001)(44832011)(6486002)(14444005)(68736007)(53936002)(486006)(478600001);DIR:OUT;SFP:1101;SCL:1;SRVR:BYAPR12MB2680;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BBYAPR12MB2680=3B23=3A6QEujdw?=
	=?utf-8?q?IEtZLlokWuXu5thW7TaOli8bxZnku7MfMSzK0zVPWvmhDvGKWMsLlKpDWSl/eLuje?=
	=?utf-8?q?cKU98/uuPM/yN0Wu2q2+qQyAMan4cykLhHs4gMhvZcyispvtmktmaRkCnMb+usHBe?=
	=?utf-8?q?PGvn6zPD7bTP08WJBRwiEonHzyC8afj5KQgP2JR8zUzKUSsMh11db2xtIO3Qtl+uA?=
	=?utf-8?q?v1xOt+6FodaI04R+b/Z7mukM073QzokoJfasu4m+yv1N1KkyqW1FZ6qEZNnz39i8X?=
	=?utf-8?q?XfiQp60qEfUTk0BIydSVQllsjX1M3xnwM3ih1r9dg4DIMfey7wJ+xWa89OHg7hy+s?=
	=?utf-8?q?6lAwMwCCG9/qICUWaYgOVMMkSAfY0Ko9F8BFVZ+m54Ptp9nNzLGzbbflQ9IwImQKy?=
	=?utf-8?q?uVaaACPcc2i4Rr0XE1XYLc9XUysXKzNTlIRDCiki2yFhfEn4KYv9BlijBYykm0sgE?=
	=?utf-8?q?iqcVPwZtCX77F95oMlbYAdRUkYIZ+4G5Vaj6BodQ6m2OlGu57RI5rmvYcsrOfNUHE?=
	=?utf-8?q?c/klbBfDWpLB5N5t7r6Rzput1dSDDCLnCvgy39o7yxI1LIyd2JYFlNE3lDp4XLTCE?=
	=?utf-8?q?dq3hJ1Ft9niKityn3DYHT1S39DxchinVRIap4IZK/2EA1Wa5Li2nDcY0RRkMw71KJ?=
	=?utf-8?q?IxkRzfGBk4UUEEf223xhZemxJaIiCRYuta6IEfEdMyngRP7Bx5jbSY07AugVN3F5n?=
	=?utf-8?q?P94cXcSkaC5mpWWw+N1nI1NNzLHmqFzZH+OiUomKxjkkK6V1/rmy6RJR/I4+wse2j?=
	=?utf-8?q?+1EljrpJTWxV8q+LznV51O95BnjyAJOR/MXGbXY7VZSGie59qCFQOGJHlFx6P2a8X?=
	=?utf-8?q?7S8aZs69BwijjpC+QTVINbKJ1FB2cvoQAgQXDiArQpHLs+KB6xlwIxiVEbgrQP7r0?=
	=?utf-8?q?zGfTXFBhzcwI+Uvri3yy1pNn3IQJFkTHd3AcXVNMIQN2/3OWFfkRlJEChogI2nBfG?=
	=?utf-8?q?MOwiYx13UwP4JX4Z9+/Z64djahN8YxFbrM3o9FC9vCVPsLoQ0ME+xOxU075Eo1axI?=
	=?utf-8?q?52okhJEPFB9DfNTdCLH+uIRqCnCStnjed24cIj0IeEZiXYD3rCWjPDvVdNKcm+iLw?=
	=?utf-8?q?J7uL2iaDGTJr74LXmpFjrIGl602hzxFxsICPzTVZst52LcrLZkjBF6LgBrqQ9z/5n?=
	=?utf-8?q?woBIFnaJD0rLHtCQBA/AsT4q4JS/cBZhZHVINZ+KncqBetOk8M/bwW7qPuFbA=3D?=
	=?utf-8?q?=3D?=
X-Microsoft-Antispam-Message-Info: 
 Es/EH202RIU2TyQ4OCZ43oyvgxqj+LPQOqOaLapREwg6LJ1uGnrZapi+JXOkLLWEQsn6lOm29e8yKbU97OikFNSviwzR2wqX3zVGfbMHR6Yh1Rq60M2Grk+mm2k0qi30PVXRn9cQFPwHP6GnZSXpUj398zr7gdrC8rtgVofykLTur1HKO1yCGrbZHBHisQ+/If7GSSLfw6137gQBTi6mlcluTfsQHUeZJZTalhmD1euCfT5jkFc3HH7PRSjzD1/ejGmWzU5zfLB9ZRnB34blY6jDrKtqwHq++ZUQI2AJKUr8OjizgWRv7aqh5v8Wayara3b0eAoXGVdJ+RMg/UMNi9nHgYrbWL42oKKTV2po/6I=
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;6:Z4pdOcenn4cVfMgTFJ1L/d1lbugQIgeScCU5T+ai74PHN0u9QjDqfbeyx3VA4mOs5Swn0HsjNAgxVoMjkw9C+Y1vfWFDSvKPkHdfktwGBcsvrSk45p1v9Kc96slV41b5XtYmwaiXg2F8VqOiHXiWKTzO5VK8PfQA9XZEugL1RrLt1L4JRsTu8k9x6oieb18zkzFl/sXqa3AL9UJgq32FfAIHL3RGGNHG9o5PFlzWTxT9pr/ZfICEr0o5MoqTcCh22gwvNhkhjRswerth5rAc89hy5yQE8diJ34Nlu98/v1MacXMc7kTH9nN1gKyF52Gn7v3uJ6P+qDJO3B57aRcMOpiFzq7Vy1V0/zBKhrHEgcRdnPDPY07H4ijNoP6IP/MmY4CDdlqS1Ds1TtPFE+QVX6H1qQPl2C5Vlua1ByCYcVnx4n8zDqPE8uZtujvwusmvS7lohq/4EsT4ZD5krURN7w==;5:lH7XOZwQpggLoKG2egZehduXuRjIYGMsukBP8g0HWgPOoEfmhQNQqBhqn6U7T7sMaWn8mNR4V49GpLOZaYNgVeYAi2Y1rmHbAy9TJNssx6Lk47hDRJFscoyjrlYKoYG57kFSs/nWF/rxNghDgg/0uH6tfFqzABoOlQ44UQ3yT0E=;7:7dghmkcG+zJlBjBjSS7njqZBGTJv30GuwUbkPYsoc3RDwPhHUXT1c1OX6sh0CxjZ0g6jPvgHikFkYaVRWlSCADZ3TNDZc7Sqq5kkRJtU1A1uXnsSPWOzzGgZ8eJusgF6ZE5zHBdvIES0eAkWdPXU2y2gvUAa7XIOxI4f+4awe5CW4/+FGVOu9sYXHCQt0eNYz7xZsDslvqxz6ySLOwwAOpyWHDKlat4L0uG4/un0zSL5J3YDDXPx2S9N5AmMsCQ/
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;20:1lg2yYO8JLTHH4NOvr2961fOmeA0149NOh3SPKlgdNSEvMkpY3a704YvO0igqKCkbwYcB4cFEPNLD/aNa2Et/lo+u8Y6dzOLqDa+jvGzmLnz5lmF0qrSLgX/filF9kb/Pw5UKt5q34cuhJUkIFJVCeyM8LNhWN/M7dAROggekUpDQ5vfFvpx/5K/zKuoyJfv/zAlbTTnYKZobpxj3Tw2Z0Tr5CktgyFh5cdvsqGoY+I/ORtc9nayhVwk+0iDEr90
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 10 Sep 2018 21:49:28.3564 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 acb69080-b80b-4a13-08a9-08d617674926
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BYAPR12MB2680
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Enhance sme_populate_pgd() to update page flags if the PMD/PTE entry
already exists.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
Reviewed-by: Borislav Petkov <bp@suse.de>
Fixes: 6ebcb060713f ("x86/mm: Add support to encrypt the kernel in-place")
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/mm/mem_encrypt_identity.c | 6 +-----
 1 file changed, 1 insertion(+), 5 deletions(-)

diff --git a/arch/x86/mm/mem_encrypt_identity.c b/arch/x86/mm/mem_encrypt_identity.c
index f488d46..2b245af 100644
--- a/arch/x86/mm/mem_encrypt_identity.c
+++ b/arch/x86/mm/mem_encrypt_identity.c
@@ -155,9 +155,6 @@ static void __init sme_populate_pgd_large(struct sme_populate_pgd_data *ppd)
 		return;
 
 	pmd = pmd_offset(pud, ppd->vaddr);
-	if (pmd_large(*pmd))
-		return;
-
 	set_pmd(pmd, __pmd(ppd->paddr | ppd->pmd_flags));
 }
 
@@ -183,8 +180,7 @@ static void __init sme_populate_pgd(struct sme_populate_pgd_data *ppd)
 		return;
 
 	pte = pte_offset_map(pmd, ppd->vaddr);
-	if (pte_none(*pte))
-		set_pte(pte, __pte(ppd->paddr | ppd->pte_flags));
+	set_pte(pte, __pte(ppd->paddr | ppd->pte_flags));
 }
 
 static void __init __sme_map_range_pmd(struct sme_populate_pgd_data *ppd)

From patchwork Mon Sep 10 21:49:09 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10594805
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id B5AEC14E5
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Sep 2018 21:49:58 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A21EC290C8
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Sep 2018 21:49:58 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 95E842911A; Mon, 10 Sep 2018 21:49:58 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B1AB0290C8
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Sep 2018 21:49:57 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727690AbeIKCp4 (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Mon, 10 Sep 2018 22:45:56 -0400
Received: from mail-sn1nam01on0063.outbound.protection.outlook.com
 ([104.47.32.63]:25492
        "EHLO NAM01-SN1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726217AbeIKCpz (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 10 Sep 2018 22:45:55 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=eKvQDgTFLscDgbQUR++JFzq2ef9N4Y5hdB+2IUJue2E=;
 b=Vas3Wv1mhct41WwXcSD6c10vNrHPTlTJaTOxi5iWvgYGYjcaFdyPAzEdHgz5hD7R9vC3iNk3+Sw1FdEgRlPEJE4g8wLntfNaapaml9bcvWKaYPMfz08YzyKIfmjwIEEll4KVv0YcFAnIf2SGP9Xg6VpBJ6SolfJoQr3YPbA9Doo=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 BYAPR12MB2680.namprd12.prod.outlook.com (2603:10b6:a03:69::29) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1122.15; Mon, 10 Sep 2018 21:49:29 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v7 3/5] x86/mm: add .data..decrypted section to hold shared
 variables
Date: Mon, 10 Sep 2018 16:49:09 -0500
Message-Id: <1536616151-16738-4-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1536616151-16738-1-git-send-email-brijesh.singh@amd.com>
References: <1536616151-16738-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: MWHPR13CA0010.namprd13.prod.outlook.com
 (2603:10b6:300:16::20) To BYAPR12MB2680.namprd12.prod.outlook.com
 (2603:10b6:a03:69::29)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 66acefb9-4ee3-475d-53b1-08d617674a27
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:BYAPR12MB2680;
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;3:2ghb6STWDQKeqOyQoIDC1EjjwKEF4YMAPSajS6nrw5PgQVIxYOb58epyv+isfWQpC27HD2qTYOW2MV0fwV4soPHGJkv0/4tOFzzc76O6jf60rVuUnBcDW04Eao7uJc01/cRoPPfNfoK24kfugDWL4oIaWaTkMgwNs3mXPgB3uigWgAuik5q1EL11zftPEuI7QGG5NvrqFRC4tfE6lTESMaEded9JgWOGDfLa+6Bnot+AL343ZfZnrcMeLaTBJEDq;25:irqPKtWxpAlLtm0eyW5x4G+/+e/JEGvulN3vuXr6pYEg2EzbGokk7a5ytedngsWWFpcnbq7eWylEeKY2rMdqiVi1HwZ6tYnFmQDyIsinpWaHZGdkS8cD9KW2UmoP2sr+Hw3hcpicXqWQ9Y2xPBn9KTrvY3zySs9A27BP9oYFMcOUbSBIOQ9aSJon2hRv17jGMtbG9GvtLdQfvK4ub16xfEwWdks2X2Eon86rCY3Lk2E8nk/vjQcwvttgi5ASqgUnpuYFFHt76+mGoeFafzxUIEnliG2oUBe9U2PM/4uE7JhyPzsr1/M4n8iEsDXwMpCQygjfXfqPG83Uv5Pz1QZL9A==;31:6BTC45Ey0eWlpAWVsgTjfjhOkl2YXOqPEHVpBfb28Qh05jBdXTuVq8W//wOoUm0kIyBaSS2l51DtMgSdV7DxM4z1cXojeubmUAnSA1cd6nmltHP+LNDtb3Xy2imaSX30heTuiR2zFZPCmYPNnvCBuykyBOrRys6Bn6UhciwFHY7dPytVA2dm7qoxMf2eutx2/3QEVQpWbspWJLtSzZII/Goa0J8jF8HW/uIG8mghV24=
X-MS-TrafficTypeDiagnostic: BYAPR12MB2680:
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;20:RLIP7OiF1hWLaUvCjlBAgQzjkvflecVVJpAQu+wv4hcqKsKM6lxa2el+ojt8LQbzZft6vhWbA5qSKT+tAy8mUJDZWkkW9TlAcprjBKBlP7tqTVeDcPisY7Z87v41TYx1tcI99AqwrDcly8qiSnnQq3vqIOXd4c+fZhpZy6kBjkZU8fZo+8vWXaflxRh7L2tVB03j9rmQ0BcXUf3Ov1Q5YU1OPb3J2FMR9x/ayQBTpA4Yzs1nSI7yyZIZKC4Fb2paAqGk9u7nAYN1IcTlJyV2LqNzgxIDxCdcu4C7Rj3xnjedHfCNLVk9QUPKnY+9z9IEunZNhF7lbQUXLFRDHwK3kyzXmy2vnHIVSlBxRfqIMsJOluynPyjFDANphJPZA0vLNDQPFMoHrIbhXTYzSV+46SwJ3qjx717tm4tOtloAwQGLHCrntUXvxBqyCSAsOjxMOzRtsYINkT8c3ZyDGs4ZWyMQAkKJawAsg1zCvh8/lb/efkhOc0cVpNswQgb6RoPY;4:B1TFipDb1TuniElRgo0gZcyc9o1wCf8QE1+MLVbrJ5M1fA+xykWRJprBckyKTzBEpV3Y3eYQQA3jNQw8aLFyKgCxPv2LP/5PGvbYKttDSAwzvVdolyvw++dhdAy5f3f/0cYFYJ6a57R5DTYfGwIciLGSPJjICrT6mLD5jbxpH2LFltnICs4EwOZkhRq705ca4wqDCyOP6OZYOK0KEzOs6hfyh81xevQklCxCNlJnhhCbABxdfavAx5G+G/woDDQC5Nv1xQa0l+j8G7x+BgMTp06vtZWk1Bju/wwhUyLwI4ws2pGRJzZlN44Y2qOqurM32+/bzP07ZqjEzJOh030W++WB7onAKDNC3mmWSbv0oH20EMohMax4JL4h9ft+OpGp/aT8Evz5HW5vW/hWpf+8dw==
X-Microsoft-Antispam-PRVS: 
 <BYAPR12MB26804AFBAEF275328161F971E5050@BYAPR12MB2680.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(163750095850)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(823301075)(10201501046)(93006095)(93001095)(3002001)(3231311)(944501410)(52105095)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123562045)(20161123560045)(20161123564045)(20161123558120)(201708071742011)(7699050);SRVR:BYAPR12MB2680;BCL:0;PCL:0;RULEID:;SRVR:BYAPR12MB2680;
X-Forefront-PRVS: 07915F544A
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(136003)(346002)(396003)(39860400002)(366004)(376002)(199004)(189003)(6666003)(386003)(8936002)(53416004)(7696005)(52116002)(25786009)(23676004)(76176011)(105586002)(8676002)(106356001)(50466002)(50226002)(26005)(186003)(66066001)(16526019)(6116002)(54906003)(3846002)(47776003)(2906002)(97736004)(2870700001)(4326008)(316002)(81166006)(36756003)(446003)(81156014)(476003)(2616005)(11346002)(305945005)(7736002)(5660300001)(956004)(86362001)(44832011)(6486002)(68736007)(53936002)(486006)(478600001)(142923001)(101420200001);DIR:OUT;SFP:1101;SCL:1;SRVR:BYAPR12MB2680;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BBYAPR12MB2680=3B23=3AUR5GNFq?=
	=?utf-8?q?i402lEdZ6H4Z6dzmGEeke8g9T+E1YWdVFD3zSAtUlckC9L9Qc8KuqpU8FTCIBrl1y?=
	=?utf-8?q?mPya42RfDegfGpL1XNaxHUYDbOITjHXRSZ3CTBU4ZhjLX7jdRRmIOPs71n8be+DBo?=
	=?utf-8?q?j46+dGVs88Tb1hX7T3+QqFxcyw199pbKhbEaFwjgcRX6W1ZFq478pHSGcspbZD5Du?=
	=?utf-8?q?FIPgdJtaLICLPTWcKtVrvBLgdCPbeBjJ8pILVWGQO7VVwQ+fCKG3lqmB/VNGLUWYi?=
	=?utf-8?q?yG9D0ycVWCJWn/bEHpRv5a8/xPc4yRmcJLWs4McdOAaP2R2upiBtZLeuzlweg/nRT?=
	=?utf-8?q?siCbSH7fUDp8MFREZjNuX2xPpChokRnA1NRoAmJCTz6l1Wy6U4o3vr51rMgkdHkf4?=
	=?utf-8?q?DebtDm4QxlakiDIqdLH1ibtFukq7zKea9Rk/OpcJv5rTOrCTaKFI614qX1foQRSav?=
	=?utf-8?q?Fvvp+m9BcIxwEiMNYkaUUHDSAW5Ev3WUi9wS8p+/6GrT8+IAZbPjHz0XUW7aTkvdN?=
	=?utf-8?q?iUAJn/TxLGv9fYiXIkhj/Rrtt6KzAoonnuHW+N0r/nvcmTRu8RRGstOIbeJF9zJGT?=
	=?utf-8?q?eCvYXJVG2TgAVx3AUkNUmCewsk3xcpah8w1jaMOXoWDgIwqh1VC8xcnuTPSo0bIyg?=
	=?utf-8?q?FbfRat6FZV5bke9KgrePCTu0YYqtLZAlqvvPdXo65xwZzyw9aNJpAaBtof9Z6RIw4?=
	=?utf-8?q?aIYx6JjZ4TaZuSXf4GMKrjokbN1YE2eGAS5IZ2RUo65lgWkrJt9/DhxJXUy0u+yPU?=
	=?utf-8?q?gCcGAwlO3gALqir8951zLLRVMqqDlSFOc+ssZaoaGeaMbJzjvs2M8eXBPNo5zFAYm?=
	=?utf-8?q?V0Q70IEOyMkf5rMOj9g8I/lKryV5rgrACz13EMG1Ag+Bj8ZWZc2kXbbvFGGPzKcA+?=
	=?utf-8?q?BzlC8C5igPjW/B1vScvKt189VWCCYqlARac7ue4pmrZ0sEehn8fdu6+1YDHAIon5a?=
	=?utf-8?q?ipoapCVQhgVq1iwbVxvYBIT2xf7iGoVwmrdgCJb07+2bi5Es447u/mQdAaAj0H1y5?=
	=?utf-8?q?pOpu63J6YyljrHbjdr+tiaqGhoGhF4L3+2zCEKW1ydkXG3eFqLOEpa2Q9pPx+HCKJ?=
	=?utf-8?q?UZ1Pgg2fGvdjr6n/DnnhaUJQtSM2WwwAohrt8AL3JBiBZ8MKdZ3kGrPEZ7vk6iJnf?=
	=?utf-8?q?F9PXVdRCGqCaRg+MiO/yB7lkg+PH60c/Aao0ORP3sAzKGnbhOZ5GGm90wNs2g=3D?=
	=?utf-8?q?=3D?=
X-Microsoft-Antispam-Message-Info: 
 1uhLsfNFT7v1exWJi2BXz3ORROwGPFwLGhpi85zFL8aSwv3S0OncRZou4XdoAqnxLz4z3gPuh+lXSd7Qut0Ple/ZanP80cTK8HEx2Gs8E3eMIxAJLJ8GRmfj3kH+xXZ/Gc9siTkwXF+RLTqrelpE2K3cHYq+JKDd+s9+Qi5ryZa7hiTtSHz12qPRHgfRd9JtnW7jjJYGJ/qX8aQDbCpJvkBasjBpteTR6znpfknZAEJS8nC3qcNF8EE3bUEeruHsl0P1ewBAkP+fX5hcPfUJ4AmifU0lT99oWO7UEQUJCxp+ipO3rPoa77Xm6Ai2+az59I54dZQUAYPuRii8MYSeCY/psbPJuirMv1uwsdT3Y1A=
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;6:8zV8WIzXsYkPR8Ue0+LnQhySneA/4+toQloPtnE4OGIkHMuOgSKAd8C5QvOJWFCP6iEp9+EmBiLQyDYBGFTM4Lr0vJF2hD5rFOlumVpqAFmuv3K6GKT/RMVN4ZmErXLbK4D1Ay5Z9XsHABjvJxZATvywFtInbQB7nmHhqMMNOTOZlAvV+FH3IP7EmD82ax2j/rCBMv28gvoAhWcOQ3O1vCx081waysZHdOAgyK6Yi78p/gLHlrQ9SNR8oFP/+GzaxjDSuTTiq47NmXF1Esihhh1/PNCb/7iOaDNxcAdxpWH2lCx9/STO9pckLTEii74AiZDy+A6cqfxzCcP0xv5q1lO65cxNSJXlg2U9BU6TCvqTkIt9SEiE0kZh423KpdVkcYZZdFjO92k8gO2OHguWf67zSgBKn4i2i0ubzhzPS6hQk3vLqUH8djnD/qdU3gBQ5eqYPoFKSRFfDKBeq7pFrg==;5:LYm7rho3nhsMXxnAcrXs8MmaHzbdUTs+Zr7wtqjMbIDxsmuIDBwZTMD6yLqKdLyvjl0OSH2lXvwBL4B1Y2z0s//Yon8KWAw35KFNZcNPBg3iOmiBNFj+gmZIgMqY0LmAaV5ueEAmF3XfGj72/T0s7FFnoA4WPJ6np6l0gBDDbSQ=;7:RSZWm1xTDYTTF9rRdLDkbReZRvV4BOAwePBBUpTHLbCfED1RIx/yVKCuB9wZxVsXb7GcyvX2YC6pIJIccGWe8n2dNrKmpvt5gQT5yzqoauSy/CeOQhN6Bia0/1/lZCIxzeLnbnu96jqKlfE4+ujtleG8FQWz7+jbu0fPhVvrEE2YNpRpp99vz/J1mcvoyBUe5hGVT382oELPs7jIH1qAXZeNyez1MFMJ4RODhbNw9UT9ctDwY9NnRChxLr2Jul6O
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;20:bsZttWhAjm6Gb0+TZPtJl8uzh6BhSMXT+L80SXH+hkZ/iF5GWyLhbyu5pPdsnXkJgAoDBmfY8MtsolL4xMbVKS0W55eDbhl7SNtnkH4pcmWvY5HlYHZvDS68D/GVuS6B1wzIZJ1NQRGOhY2J0UB6aJwt79nTHtQ7RdKvpm8Hruihx+MigbZ/4MNSOT+Rdb5QHqmTqi5ygAwoZH+u3IP5YvGUy3buvmv1dhnt5qlOjSKLIkenrVC6a7Wt5QsapkQq
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 10 Sep 2018 21:49:29.9766 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 66acefb9-4ee3-475d-53b1-08d617674a27
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BYAPR12MB2680
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

kvmclock defines few static variables which are shared with the
hypervisor during the kvmclock initialization.

When SEV is active, memory is encrypted with a guest-specific key, and
if the guest OS wants to share the memory region with the hypervisor
then it must clear the C-bit before sharing it.

Currently, we use kernel_physical_mapping_init() to split large pages
before clearing the C-bit on shared pages. But it fails when called from
the kvmclock initialization (mainly because the memblock allocator is
not ready that early during boot).

Add a __decrypted section attribute which can be used when defining
such shared variable. The so-defined variables will be placed in the
.data..decrypted section. This section is mapped with C=0 early
during boot, we also ensure that the initialized values are updated
to match with C=0 (i.e perform an in-place decryption). The
.data..decrypted section is PMD-aligned and sized so that we avoid
the need to split the large pages when mapping the section.

sme_encrypt_kernel() performs the in-place encryption of the Linux
kernel and initrd when SME is active. The routine has been enhanced
to decrypt the .data..decrypted section for both SME and SEV cases.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/include/asm/mem_encrypt.h |  6 +++
 arch/x86/kernel/head64.c           | 11 +++++
 arch/x86/kernel/vmlinux.lds.S      | 17 +++++++
 arch/x86/mm/mem_encrypt_identity.c | 94 ++++++++++++++++++++++++++++++++------
 4 files changed, 113 insertions(+), 15 deletions(-)

diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h
index c064383..802b2eb 100644
--- a/arch/x86/include/asm/mem_encrypt.h
+++ b/arch/x86/include/asm/mem_encrypt.h
@@ -52,6 +52,8 @@ void __init mem_encrypt_init(void);
 bool sme_active(void);
 bool sev_active(void);
 
+#define __decrypted __attribute__((__section__(".data..decrypted")))
+
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
 #define sme_me_mask	0ULL
@@ -77,6 +79,8 @@ early_set_memory_decrypted(unsigned long vaddr, unsigned long size) { return 0;
 static inline int __init
 early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0; }
 
+#define __decrypted
+
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
 /*
@@ -88,6 +92,8 @@ early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0;
 #define __sme_pa(x)		(__pa(x) | sme_me_mask)
 #define __sme_pa_nodebug(x)	(__pa_nodebug(x) | sme_me_mask)
 
+extern char __start_data_decrypted[], __end_data_decrypted[];
+
 #endif	/* __ASSEMBLY__ */
 
 #endif	/* __X86_MEM_ENCRYPT_H__ */
diff --git a/arch/x86/kernel/head64.c b/arch/x86/kernel/head64.c
index 8047379..af39d68 100644
--- a/arch/x86/kernel/head64.c
+++ b/arch/x86/kernel/head64.c
@@ -112,6 +112,7 @@ static bool __head check_la57_support(unsigned long physaddr)
 unsigned long __head __startup_64(unsigned long physaddr,
 				  struct boot_params *bp)
 {
+	unsigned long vaddr, vaddr_end;
 	unsigned long load_delta, *p;
 	unsigned long pgtable_flags;
 	pgdval_t *pgd;
@@ -234,6 +235,16 @@ unsigned long __head __startup_64(unsigned long physaddr,
 	/* Encrypt the kernel and related (if SME is active) */
 	sme_encrypt_kernel(bp);
 
+	/* Clear the memory encryption mask from the .data..decrypted section. */
+	if (mem_encrypt_active()) {
+		vaddr = (unsigned long)__start_data_decrypted;
+		vaddr_end = (unsigned long)__end_data_decrypted;
+		for (; vaddr < vaddr_end; vaddr += PMD_SIZE) {
+			i = pmd_index(vaddr);
+			pmd[i] -= sme_get_me_mask();
+		}
+	}
+
 	/*
 	 * Return the SME encryption mask (if SME is active) to be used as a
 	 * modifier for the initial pgdir entry programmed into CR3.
diff --git a/arch/x86/kernel/vmlinux.lds.S b/arch/x86/kernel/vmlinux.lds.S
index 9c77d2d..ae8153e 100644
--- a/arch/x86/kernel/vmlinux.lds.S
+++ b/arch/x86/kernel/vmlinux.lds.S
@@ -65,6 +65,21 @@ jiffies_64 = jiffies;
 #define ALIGN_ENTRY_TEXT_BEGIN	. = ALIGN(PMD_SIZE);
 #define ALIGN_ENTRY_TEXT_END	. = ALIGN(PMD_SIZE);
 
+/*
+ * This section contains data which will be mapped as decrypted. Memory
+ * encryption operates on a page basis. Make this section PMD-aligned
+ * to avoid splitting the pages while mapping the section early.
+ *
+ * Note: We use a separate section so that only this section gets
+ * decrypted to avoid exposing more than we wish.
+ */
+#define DATA_DECRYPTED						\
+	. = ALIGN(PMD_SIZE);					\
+	__start_data_decrypted = .;				\
+	*(.data..decrypted);					\
+	. = ALIGN(PMD_SIZE);					\
+	__end_data_decrypted = .;				\
+
 #else
 
 #define X86_ALIGN_RODATA_BEGIN
@@ -74,6 +89,7 @@ jiffies_64 = jiffies;
 
 #define ALIGN_ENTRY_TEXT_BEGIN
 #define ALIGN_ENTRY_TEXT_END
+#define DATA_DECRYPTED
 
 #endif
 
@@ -161,6 +177,7 @@ SECTIONS
 		/* rarely changed data like cpu maps */
 		READ_MOSTLY_DATA(INTERNODE_CACHE_BYTES)
 
+		DATA_DECRYPTED
 		/* End of data section */
 		_edata = .;
 	} :data
diff --git a/arch/x86/mm/mem_encrypt_identity.c b/arch/x86/mm/mem_encrypt_identity.c
index 2b245af..65da705 100644
--- a/arch/x86/mm/mem_encrypt_identity.c
+++ b/arch/x86/mm/mem_encrypt_identity.c
@@ -52,6 +52,8 @@
 				 (_PAGE_PAT | _PAGE_PWT))
 
 #define PMD_FLAGS_ENC		(PMD_FLAGS_LARGE | _PAGE_ENC)
+#define PMD_FLAGS_ENC_WP	((PMD_FLAGS_ENC & ~_PAGE_CACHE_MASK) | \
+				 (_PAGE_PAT | _PAGE_PWT))
 
 #define PTE_FLAGS		(__PAGE_KERNEL_EXEC & ~_PAGE_GLOBAL)
 
@@ -60,6 +62,8 @@
 				 (_PAGE_PAT | _PAGE_PWT))
 
 #define PTE_FLAGS_ENC		(PTE_FLAGS | _PAGE_ENC)
+#define PTE_FLAGS_ENC_WP	((PTE_FLAGS_ENC & ~_PAGE_CACHE_MASK) | \
+				 (_PAGE_PAT | _PAGE_PWT))
 
 struct sme_populate_pgd_data {
 	void    *pgtable_area;
@@ -232,6 +236,11 @@ static void __init sme_map_range_encrypted(struct sme_populate_pgd_data *ppd)
 	__sme_map_range(ppd, PMD_FLAGS_ENC, PTE_FLAGS_ENC);
 }
 
+static void __init sme_map_range_encrypted_wp(struct sme_populate_pgd_data *ppd)
+{
+	__sme_map_range(ppd, PMD_FLAGS_ENC_WP, PTE_FLAGS_ENC_WP);
+}
+
 static void __init sme_map_range_decrypted(struct sme_populate_pgd_data *ppd)
 {
 	__sme_map_range(ppd, PMD_FLAGS_DEC, PTE_FLAGS_DEC);
@@ -379,7 +388,10 @@ static void __init build_workarea_map(struct boot_params *bp,
 	ppd->paddr = workarea_start;
 	ppd->vaddr = workarea_start;
 	ppd->vaddr_end = workarea_end;
-	sme_map_range_decrypted(ppd);
+	if (sev_active())
+		sme_map_range_encrypted(ppd);
+	else
+		sme_map_range_decrypted(ppd);
 
 	/* Flush the TLB - no globals so cr3 is enough */
 	native_write_cr3(__native_read_cr3());
@@ -436,16 +448,27 @@ static void __init build_workarea_map(struct boot_params *bp,
 		sme_map_range_decrypted_wp(ppd);
 	}
 
-	/* Add decrypted workarea mappings to both kernel mappings */
+	/*
+	 * When SEV is active, kernel is already encrypted hence mapping
+	 * the initial workarea_start as encrypted. When SME is active,
+	 * the kernel is not encrypted hence add decrypted workarea
+	 * mappings to both kernel mappings.
+	 */
 	ppd->paddr = workarea_start;
 	ppd->vaddr = workarea_start;
 	ppd->vaddr_end = workarea_end;
-	sme_map_range_decrypted(ppd);
+	if (sev_active())
+		sme_map_range_encrypted(ppd);
+	else
+		sme_map_range_decrypted(ppd);
 
 	ppd->paddr = workarea_start;
 	ppd->vaddr = workarea_start + decrypted_base;
 	ppd->vaddr_end = workarea_end + decrypted_base;
-	sme_map_range_decrypted(ppd);
+	if (sev_active())
+		sme_map_range_encrypted(ppd);
+	else
+		sme_map_range_decrypted(ppd);
 
 	wa->kernel_start = kernel_start;
 	wa->kernel_end = kernel_end;
@@ -488,28 +511,69 @@ static void __init teardown_workarea_map(struct sme_workarea_data *wa,
 	native_write_cr3(__native_read_cr3());
 }
 
+static void __init decrypt_shared_data(struct sme_workarea_data *wa,
+				       struct sme_populate_pgd_data *ppd)
+{
+	unsigned long decrypted_start, decrypted_end, decrypted_len;
+
+	/* Physical addresses of decrypted data section */
+	decrypted_start = __pa_symbol(__start_data_decrypted);
+	decrypted_end = __pa_symbol(__end_data_decrypted);
+	decrypted_len = decrypted_end - decrypted_start;
+
+	if (!decrypted_len)
+		return;
+
+	/* Add decrypted mapping for the section (identity) */
+	ppd->paddr = decrypted_start;
+	ppd->vaddr = decrypted_start;
+	ppd->vaddr_end = decrypted_end;
+	sme_map_range_decrypted(ppd);
+
+	/* Add encrypted-wp mapping for the section (non-identity) */
+	ppd->paddr = decrypted_start;
+	ppd->vaddr = decrypted_start + wa->decrypted_base;
+	ppd->vaddr_end = decrypted_end + wa->decrypted_base;
+	sme_map_range_encrypted_wp(ppd);
+
+	/* Perform in-place decryption */
+	sme_encrypt_execute(decrypted_start,
+			    decrypted_start + wa->decrypted_base,
+			    decrypted_len, wa->workarea_start,
+			    (unsigned long)ppd->pgd);
+
+	ppd->vaddr = decrypted_start + wa->decrypted_base;
+	ppd->vaddr_end = decrypted_end + wa->decrypted_base;
+	sme_clear_pgd(ppd);
+}
+
 void __init sme_encrypt_kernel(struct boot_params *bp)
 {
 	struct sme_populate_pgd_data ppd;
 	struct sme_workarea_data wa;
 
-	if (!sme_active())
+	if (!mem_encrypt_active())
 		return;
 
 	build_workarea_map(bp, &wa, &ppd);
 
-	/* When SEV is active, encrypt kernel and initrd */
-	sme_encrypt_execute(wa.kernel_start,
-			    wa.kernel_start + wa.decrypted_base,
-			    wa.kernel_len, wa.workarea_start,
-			    (unsigned long)ppd.pgd);
-
-	if (wa.initrd_len)
-		sme_encrypt_execute(wa.initrd_start,
-				    wa.initrd_start + wa.decrypted_base,
-				    wa.initrd_len, wa.workarea_start,
+	/* When SME is active, encrypt kernel and initrd */
+	if (sme_active()) {
+		sme_encrypt_execute(wa.kernel_start,
+				    wa.kernel_start + wa.decrypted_base,
+				    wa.kernel_len, wa.workarea_start,
 				    (unsigned long)ppd.pgd);
 
+		if (wa.initrd_len)
+			sme_encrypt_execute(wa.initrd_start,
+					    wa.initrd_start + wa.decrypted_base,
+					    wa.initrd_len, wa.workarea_start,
+					    (unsigned long)ppd.pgd);
+	}
+
+	/* Decrypt the contents of .data..decrypted section */
+	decrypt_shared_data(&wa, &ppd);
+
 	teardown_workarea_map(&wa, &ppd);
 }
 

From patchwork Mon Sep 10 21:49:10 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10594809
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 7C67614E5
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Sep 2018 21:52:53 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 63B67290C8
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Sep 2018 21:52:53 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 541E22912F; Mon, 10 Sep 2018 21:52:53 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B67EA290C8
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Sep 2018 21:52:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726337AbeIKCsu (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Mon, 10 Sep 2018 22:48:50 -0400
Received: from mail-sn1nam01on0063.outbound.protection.outlook.com
 ([104.47.32.63]:25492
        "EHLO NAM01-SN1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726191AbeIKCst (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 10 Sep 2018 22:48:49 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=lF5hpALd+4lw9cJPYuzM2DzA8EeYfMNYNZwx8a05Pno=;
 b=Nwlyqlo/qeD35mCpmO/7vcyIm3lRIA15+f+oClTOzGRaDkzksZ5lN2V4VtOdJPAlDiJyEccQrnqFRBriNWTMAwTQjKD1A5GFXKVrCmIBJcJOXvdoPz8MADsH6yhBnY2PcRoVOv7+JY3wfqvtA+Y6OT8QaxuNee3KAw9pOzJngLw=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 BYAPR12MB2680.namprd12.prod.outlook.com (2603:10b6:a03:69::29) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1122.15; Mon, 10 Sep 2018 21:49:31 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v7 4/5] x86/kvm: use __decrypted attribute in shared variables
Date: Mon, 10 Sep 2018 16:49:10 -0500
Message-Id: <1536616151-16738-5-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1536616151-16738-1-git-send-email-brijesh.singh@amd.com>
References: <1536616151-16738-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: MWHPR13CA0010.namprd13.prod.outlook.com
 (2603:10b6:300:16::20) To BYAPR12MB2680.namprd12.prod.outlook.com
 (2603:10b6:a03:69::29)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 9c238b46-cc54-4ea0-fa0b-08d617674b2b
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:BYAPR12MB2680;
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;3:29rFl7bO8TZQOg9MHuSzm/jGMOSsnIHJ52uErHuJZsVqXyA0iauGGVrmTdWWa0GIYUS59af3zYBcvWkFEYN4KekT4qzR35DsOadrGtQownrzafNUiroDqL5yjAFXkRZEefDggI2je/J6CvHqH7K/Y3uaLYmDs7XfDgIGL1xPHdG5I7+9cp5JfXVg1KHTB76jKzg9wwc7GyRnbNUh+xIzcFXM0fvcCvGuPipZSg+AxyTARYiGS7pdR3JRFcrP9iIU;25:x8d1SXN04TONjoe/CcRz15rvV+6XRKvR1UDfE5FA2dYATFi88DLw/v9lPAM9Km+B1bEYlewCv0t88XQ8QVHn4kQDdHzgfxLZ+FtmFXN+RCKsbVG1kSslsi5WeyDIGc9svk3vDVwNr3wh6N2jFAfWhpqBX3lIGQrsHVA4Xyp9vdkefvPMYhLUQDJYs+RQ8xyituZkCTdUZDgmHZF1N+2BSVBbR5+i3JPtBCFJxBqmuo8aZLWtx6Dta7Tkex6PIMf1BqZaCQXiPw2T8IIP/+g/iEg+VD+q9EjJAdkcWuadubDz1b9DbnAwEMpPikds2XHktCGDUKBQ+PPE6wL5lpA5Mw==;31:s7G/2dPyusJteqo2ya3qP+xgDvyEcoePI+0vXKWSHv4RpJUo1pODiUABqtuJPl97OP/UStTPVUsrJD7XhWO9YY4g2Ek8dd7p6OCwT8gkoFNH5IvRjB0Pe0QOTXh2c0iEdwYxNEjAaTmOeTo1As2//97S2kLrKN7aMDvk4ztZsILz2bPMP0Th/Mq5DrEDF+yffgnuW/kfEu1ZuwXkbtrlIGpnCSmaWvsZ9V83OoSXPfw=
X-MS-TrafficTypeDiagnostic: BYAPR12MB2680:
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;20:QFzeBk+tU+2wDzl7Vg1WZBa8gBUFl/EH/tZKWa4nNc471wKNVhXG0plAksm7rdFa1LSqEiMMOXyOlWMTA0hdkJutyQh87U2zeZS34o0BPcza9m5eGvstIhLwkbXLGw1eFuLZgg2vH2aqvJ9ZCcmzgNxpt5yfpgOyY8rpqb2Kr8CYvanM5Le3VfjldcAl+rLNjrs2yyoZwBNqiyODk5oVZ2zHq6yKkgNOzvpeWT6fIynqfy8bKoVNLVSjXrtqt1dilgypZd4PsSjHntjXBgcqmZKXxkkgSAqeuiPKs04ew4tVZCwML/bIv0uj7UQvNUPwMDkL3tzjtc5MzkmcGLFPL1OaehlGTaefl/9fSSDFnq82v81PtVLYHANMs2WQEZJ1DVcKvINNuWcoQ8PwkXhiEAh+jqwMTqAu7OVOAI+ZlxmrunUdr+OUKqE5w3G9q6Fx+lqextxtquvmBBnI8tvn1Ldv2abYRhTR8ru2sZVLLEEANxqpyUJ9OTo9LwGn93Mf;4:XdBKY0yRFV9+EByhava84bRGVRwxreY4gjxMWf5ukTnNDPAqR3I74Mps9shlShqrP2Cdi8qV/mcTPGhPv6vGyyWusHRAKH21HL+rCCDZbCkvxENkH+cDxIyfzVoD1+t5TfOwZywNv6odxgsBXAbf5nSwxMgFHfm8CFu2ueOw1fCrkbJ2F0lJexDjDTuct7iWqW/2g9WGK86jomNFE0iUdK+b2PlcsmdOuR+sQyxNnmXobzvluooN5uJ3wkIOSK89MwfHhBHhDojR2fgYDWG4qiaT1YrVh4w1EWnHnRlktprIIibs4hbfLCLSWLGCT6oZ8Ce9kTZnRLnw5LC8r+oqIIVAyNZzNpj7tdn7X3n8Py/S6pJg/mL2y0p9Qk0Aq8Yi
X-Microsoft-Antispam-PRVS: 
 <BYAPR12MB2680CBC030A37A65B6F9656CE5050@BYAPR12MB2680.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(823301075)(10201501046)(93006095)(93001095)(3002001)(3231311)(944501410)(52105095)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123562045)(20161123560045)(20161123564045)(20161123558120)(201708071742011)(7699050);SRVR:BYAPR12MB2680;BCL:0;PCL:0;RULEID:;SRVR:BYAPR12MB2680;
X-Forefront-PRVS: 07915F544A
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(136003)(346002)(396003)(39860400002)(366004)(376002)(199004)(189003)(6666003)(386003)(8936002)(53416004)(7696005)(52116002)(25786009)(23676004)(76176011)(105586002)(8676002)(106356001)(50466002)(50226002)(26005)(186003)(66066001)(16526019)(6116002)(54906003)(3846002)(47776003)(2906002)(97736004)(2870700001)(4326008)(316002)(81166006)(36756003)(446003)(81156014)(476003)(2616005)(11346002)(305945005)(7736002)(5660300001)(956004)(86362001)(44832011)(6486002)(68736007)(53936002)(486006)(478600001);DIR:OUT;SFP:1101;SCL:1;SRVR:BYAPR12MB2680;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BBYAPR12MB2680=3B23=3ArflqXgb?=
	=?utf-8?q?qU+pOGldmuF9ky7FA+AR/nzNE/qSiRZAvMeHIblqhbhsY7Mtk/IKDof177R5X8xr0?=
	=?utf-8?q?V5CB9F5gYf21nJ0NWTWLfGpgu+xx6ILVvEsO0rRCUpUfvOJc3Ogts3pYQZ09NWQQy?=
	=?utf-8?q?30xlDBC0rZUmEp4bqviEpFl4lbuWGq2c+DIebJTpGsjX2+NFO/Vi8N+BMewSbwliM?=
	=?utf-8?q?j8ZkXA9BPQAuv9r5mOyPbpHLwLcRSLrJYWKdxPuL+GVmUmLGEo1o5C363vfLXbN36?=
	=?utf-8?q?+ox6OIzObLqkthROYuZb8zxD/VAzkFoJMta5CegOYkn7KpTyKxLqIdasfxHry1+FQ?=
	=?utf-8?q?Ad2Ly1r5xny8j4IlmEo3CviJjUGZaEzOgqbzkarW7u2rmzmXOvTfG9cd+sCiL9dZM?=
	=?utf-8?q?X8aaP1epr8tK9JpGNoGkxmTYfU6e5R1PsKtwYwFKMFncuQipdmhSnMgLGrltpwZnl?=
	=?utf-8?q?bEE6CJ0NNBJ199JiX2yupVtEL9MWmVKyic2lX+kAtL9TZq/TBk6C9WFVwPiqgfIkn?=
	=?utf-8?q?s9LruhaTlqmUvXnc0Gb2S2K+NRblJsJowVFIl6ZgYqnARUHiJeXZUPB9PZ4dVfiCr?=
	=?utf-8?q?KCM/l0cbiWg1/EJ5d/jQ8u7x5ji1r9fe0SaFWjxUbpGsDZ5C9ngErWsCsvauThufI?=
	=?utf-8?q?VfwJxxaZeUAc1ejUjlCpLL2d0QOvuKElfLZtIyizkDszP2Kv7fv5hqt8wXLXOz2FB?=
	=?utf-8?q?1d+tFRFSAIPzNZClKA+IVYlkbZH8dTJio5mevwJVSz6AnoabYBnmmPMXyKkZIeHRg?=
	=?utf-8?q?otzHNeb26Yxo1VQ78+4i60t/AziYjfWWSs/5vDt8yorV0EUeKrO5VO8+5QIiL65KF?=
	=?utf-8?q?ZtBwtk0A/8I2BKC4UzzOQiLdLeBmxgKuWzK5KidOXPZg4NmhBd/WsEgpijascWKW8?=
	=?utf-8?q?YMflK6FX8g8cNBWlmOb2UIFOgol6feGVRkRwlzLVysVlYsB/vMh2+7UF6XUIGfQe2?=
	=?utf-8?q?VLMrKAjdxbuUxyQms28XiZV33i6l+ZyrfrueERPyX9azQ6UZ7yoaGpKx3CYOK+4PQ?=
	=?utf-8?q?BwrM2Nk9RidR/gua8SGJKXSmZGDMPNzqL1LUeW0/jR19v3CXngw6DOjYRSxQag2Lv?=
	=?utf-8?q?dbW61VcmMjAd7EfySGJsPNbOsbqNnGSjucm/+uRb00+1zvBf4lKNk/VatsZmfYVId?=
	=?utf-8?q?EfvafL/9M2EXsshGl8=3D?=
X-Microsoft-Antispam-Message-Info: 
 sZhiqu3enM/J0GbQcry+sjq8UZ9EMHQiMSK+fEZfFUSyv0MVWZY/N1OBbKpiu0Rj+IbGxnG6xIi85KqzBSGIZHWrWJJVb4Rwk/8PKXjkCd0fgM3eAnxNA/gtWmfZocwYzdEIy04W+3LpoPggvyAgxFcHR6iVkuZCS4VKUMDMDSpJFEw6KVd7ktYblqUuW6rrU94rZqbiltLf+xpNoIhC7aHRgXiailesGSo8gsXk7BK22HmXaCVqaxuH16H0vdvKK0NFa0ce2/WydG/hQDhOFKFzOQeZhYsJKSQs2kP89hgiSzhOnXUqDeQaa/y+Pw29CfQ1Fgus7sxWonQl32XKsqjtwFPcaIZ63BMyNSsr9iU=
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;6:t9JfOKf2uBN4wDQS0pEf0yXtpdBjqOW9cA9D0wF09wDGsLH5tdxM+C3ozSEF05C8FvJIGNU8yQVjshsfJzXFK5Y13grAbEf2Jt7WpSGT/j+YSKeIys5mvFXBp49QCQ5/lMXE4nnTGcbHZQHFWY6GuIS7+dqidiNdTl8CtvMfGZSsG4puzF53k7aQvO/D1TqB57tdnAuetMRXWbX3XzhqsYt9inuiT8MWBEYc17HwSi5TnKlhqqB2/D+m7WbC//W5N/BYMzuMLe048DqF8aKQQScXyywjJxSG3CStQ/uCmYquBntapy5zHBztjFE0JEl/BOUl4vn1hUODww0XvgJ1uXhDwwuZ2Z4SWtn9/ZmueNcMIhYs6zGArhPwBmy6oZidTwcNfgmR1dwCqc3rTPqDMM3eJUNGvOpndH1iw9OJIgd04hGVEAv9r2KOWKOSPkusAxdgBFEgNY7+OoRh7So6KA==;5:PcppY8RFSmjsnyNO7+GJonaOOBmQzwwAoaHQSNE7B/Izmxm4pMrWA3PK5oTZZFxPsnFZkluC2PSQuzxUvEvZjR/Zo1rN2aKISLuQykRAVI9CtnC1xkql0SUWfITJGuyHgbjfnDZceNuIyT4jvSdWMUWQ34PPihng3pWti2LNW4w=;7:BkbxOnVlSqvFE90wWX5eSiTvntDXlvdVVnxRsUIMjYlyoaY9Bc/VgHcr/nUjyJS1NlQEMpwkw68xPGmubR3tI1CtgOx92tyHpnei4EQGkixlp2xY9ECACwEFXYFQEk9jfwHtWNSTfPUB3fEWRVCaVLJbF5U+EnpSuhgSm4KxwLFje6mC39X67WbtSjnchX8sjxe2ksJGVdP9G2baVmbmjBWnpITZwj56TTHXlotIeq4HpQ4zTHZObVhSV6CE2JgV
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;20:7ii8exZZW5nb/zknT6Dmq/FdtdnQdv0DoMdztNzUdv3slo9wj48RUmc+TrLOd+kSuu3zfvlZB3iljmiWFJdoDR0Zg+LEEzynlXsBZqtNLh/GkhE0+L/j6AxbMR/N8kWk69B6fZ8kdWIBfX/+SUjAytI9ZLH4KAtCCNEtm2QaJ96WXuAB/99JXOefDT3wT+9pBrgcIQxNb1gMCj/Q8iC04FVdp81zEHaA9JYAEr/MAnNvtyRufoM9gbItV8BcQKvI
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 10 Sep 2018 21:49:31.6878 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 9c238b46-cc54-4ea0-fa0b-08d617674b2b
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BYAPR12MB2680
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

The recent removal of the memblock dependency from kvmclock caused a SEV
guest regression because the wall_clock and hv_clock_boot variables are
no longer mapped decrypted when SEV is active.

Use the __decrypted attribute to put the wall_clock and hv_clock_boot in
the .data..decrypted section so that they are mapped decrypted during boot.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
Reviewed-by: Borislav Petkov <bp@suse.de>
Acked-by: Paolo Bonzini <pbonzini@redhat.com>
Fixes: 368a540e0232 ("x86/kvmclock: Remove memblock dependency")
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/kernel/kvmclock.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/arch/x86/kernel/kvmclock.c b/arch/x86/kernel/kvmclock.c
index a36b93a..0b3110b 100644
--- a/arch/x86/kernel/kvmclock.c
+++ b/arch/x86/kernel/kvmclock.c
@@ -61,8 +61,8 @@ early_param("no-kvmclock-vsyscall", parse_no_kvmclock_vsyscall);
 	(PAGE_SIZE / sizeof(struct pvclock_vsyscall_time_info))
 
 static struct pvclock_vsyscall_time_info
-			hv_clock_boot[HVC_BOOT_ARRAY_SIZE] __aligned(PAGE_SIZE);
-static struct pvclock_wall_clock wall_clock;
+			hv_clock_boot[HVC_BOOT_ARRAY_SIZE] __decrypted __aligned(PAGE_SIZE);
+static struct pvclock_wall_clock wall_clock __decrypted;
 static DEFINE_PER_CPU(struct pvclock_vsyscall_time_info *, hv_clock_per_cpu);
 
 static inline struct pvclock_vcpu_time_info *this_cpu_pvti(void)

From patchwork Mon Sep 10 21:49:11 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10594807
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 85AEF14E5
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Sep 2018 21:50:35 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 73B5E290C8
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Sep 2018 21:50:35 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 65AFA2911D; Mon, 10 Sep 2018 21:50:35 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id AA73B290C8
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon, 10 Sep 2018 21:50:34 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726740AbeIKCqb (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Mon, 10 Sep 2018 22:46:31 -0400
Received: from mail-by2nam01on0054.outbound.protection.outlook.com
 ([104.47.34.54]:62169
        "EHLO NAM01-BY2-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726217AbeIKCqb (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 10 Sep 2018 22:46:31 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=8toznBI3kRi6b/9jCowEx1qjVmin/J0RLmxFSCAkd+c=;
 b=XDHNpzftmsuHo8RNCFchAZ4bhuX1wCVfhoQTg5O+lhyIhrBr7d9x+DWYAl0pe2JfuavW9f6cBTdGnGUjOJqawJyjSDcMdOZWToLk1emCv7mOX1lJ0GKR8NDUkt5ue/loGiH7j14rMGneQgTtR5EkyqeoHU7kaIx00/HjMOtElnI=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 BYAPR12MB2680.namprd12.prod.outlook.com (2603:10b6:a03:69::29) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1122.15; Mon, 10 Sep 2018 21:49:33 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v7 5/5] x86/kvm: Avoid dynamic allocation of pvclock data when
 SEV is active
Date: Mon, 10 Sep 2018 16:49:11 -0500
Message-Id: <1536616151-16738-6-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1536616151-16738-1-git-send-email-brijesh.singh@amd.com>
References: <1536616151-16738-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: MWHPR13CA0010.namprd13.prod.outlook.com
 (2603:10b6:300:16::20) To BYAPR12MB2680.namprd12.prod.outlook.com
 (2603:10b6:a03:69::29)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: c9317c3d-9e65-4c5f-0d86-08d617674c21
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:BYAPR12MB2680;
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;3:cWqhx6UXSVg2TjgXv84GnyOiEReuMfoolBA4K1zTdkmbgKVh2rQ9rDGWk7zyMJzVozZ3akR6Gm5lUX6vyGRHSB04Venbe1DSsbiF+h7rln9q+tTtAEx46UVg1c2iNPQKA/wUJWItQWlYQuLaXY5b4n6qgBw2X1Mi8hh5z5Kd9IiloyEAPoSsO21cdR/+PWnODaY0vtX+76JyIMEb1YNypv7XF31NRENBap3BkFbJnnc+n0D8GJsijsBjPVjlOYLr;25:0az+VwaLGCI7nQkLeIlNoYOjBjV9W8Jh+h2rGVrhaK6iYR6WJT+i5lTQCcFInMybTJn/QbnjgsaFUrewpH7IXV2tVCQ9pLZGck0duFHoH1EUuk+h+yKAuiSmhZ4KFz7XZcwHVqsRESNQttNuTK45T/xFrtPbK+aA0BOje6MtUlsqo723cOFEZF1hoK6/iXq4qNc9mYGqLVGSPgz6jwqZ0CM68yXm4jmfmnimNaQWFgHHr2RFDsilEV+6U2iWGwortORtvKt1WtBYWtyG6nETkcPJlRnzKPlEamMb877j9NHOlrI9gCKZIjxZaT3HEpg5cSt0MKVl6GYy7JhjMCfM1Q==;31:OHeF4KFZkDaOoelmxMN6EVIkCtIIhZavlrd2ehkBrYzF3JZ2xgMf23xvGTy3JTu7//+4BDxEpNoFU1VV8Gs1A+fC7n5L+a9kF/m39nq5u/L6gh69jsINi/2IFS4G0YldE+4pw0W0vCLhe8Zj3f1FvC92pW855KeJCRDW1Z+v9mp0knr4TiO18SiGIjhHMCMP8/2XrWpe7rSTsBsZww5KBZPV9+vs6aqLnh6FjIcIXC0=
X-MS-TrafficTypeDiagnostic: BYAPR12MB2680:
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;20:8tNJTRwXV2yof+cRs2qxuN91i2ZQqXYTmBMDaxoHfsD7ioH48Jayzip6Pe041EHAJwgeqbw5vAPmfLlAGFVA0lh4JgIgSKXEaU+BEeP+Jw9HTNM8HSPh0TPLI35ZfktMYH8F0jzHb6Q1RHuGv7qlH1ZBHbWsjx0M9dLoMkCpZdmV3Pgtkdvj/5cgymvhqqHxZTw0K7NTg4OAlYXpU8hhf8bN9RpReIiB9x/RDqce6lYVDisTvoXxDVQy9kIfcuwWC5wW+rrVYPFUqjfE5FZZMDyOZtHEwPpV7gsCYABKQrwpQGCILMngMz0Nyb5/6nHycVhRHEGz8OdPERJNXyapYt3MfUSuQwdAhxCJBiOobCYuOcfB8fy8cifxWBxUWUtnlynl4GGPfvYbUID0IAv49rS9KudUUaU57Z43UyQLiKfhDp75KtZ+2lcS5BKqTYp5LuZ0/run90OLTRST3pL4DKh59n6qTFGV82WbtmyfFDcymBl/Y5Pq1cCpzWrbbCvy;4:tdo9uXm+Vicpe7jmZ6iLJ5aGZ+7i3q3Jl21T8YtFqifE1LjPfX6SJsuL4Jdoe8cyNk0yRc/hzStNJTiRWX7dgmDr8go04xvqj875k1J/otOTA3l5XShlEmkwPEV1XeOtdHWwDY1iKlgIiE2cjxliPn4REpR5Kf83Uq4zlZx4UrjcmPlDldsnUzYHpKICcDCvBx+chCYlWVxF4tGmlxj8qBLTB+CkjeZUAqPAISYhtR9mZnJ07HMpX+ANLVI5xybftNZmd1WlCO1mq0ngOqRaO7fdrkh50mREhzHWOOp6w3zuNc+yf6kKoznkhojf0CuY1Nu0QcrlyUOdaDiY+octylL34j6q1p1tNqv7U351lg85wuFDe61Il1gWnlGMGwTm
X-Microsoft-Antispam-PRVS: 
 <BYAPR12MB2680F773F4AB4E77D6742907E5050@BYAPR12MB2680.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(823301075)(10201501046)(93006095)(93001095)(3002001)(3231311)(944501410)(52105095)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123562045)(20161123560045)(20161123564045)(20161123558120)(201708071742011)(7699050);SRVR:BYAPR12MB2680;BCL:0;PCL:0;RULEID:;SRVR:BYAPR12MB2680;
X-Forefront-PRVS: 07915F544A
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(136003)(346002)(396003)(39860400002)(366004)(376002)(199004)(189003)(6666003)(386003)(8936002)(53416004)(7696005)(52116002)(25786009)(23676004)(76176011)(105586002)(8676002)(106356001)(50466002)(50226002)(26005)(186003)(66066001)(16526019)(6116002)(54906003)(3846002)(47776003)(2906002)(97736004)(2870700001)(4326008)(316002)(81166006)(36756003)(446003)(81156014)(476003)(2616005)(11346002)(305945005)(7736002)(5660300001)(956004)(86362001)(44832011)(6486002)(68736007)(53936002)(486006)(478600001);DIR:OUT;SFP:1101;SCL:1;SRVR:BYAPR12MB2680;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BBYAPR12MB2680=3B23=3AYgwSqmk?=
	=?utf-8?q?kmnYHarLvK1lyR5QF4vr892VZpLzZmJ0YDlZ4YepACMI3PNFBZl8RZLe2CiobuJdx?=
	=?utf-8?q?xkIUgGIjCLegMpGIqRDXGL3anKLRD9vNxNOdEy68DLUblFh1foscnQJhCAb6RUCNg?=
	=?utf-8?q?BSG2PE2msneuLq95GFuilOd/Rg48AKcouRaoWr9vkPOXQUUxVFwNgT4o3KabQbDJS?=
	=?utf-8?q?5YZS96+wHQExQ4TZRKug4m394Bf1b01Fjt4RgXgvYWt+IdkSLXYT9O4zlzZC+pXz/?=
	=?utf-8?q?3fTd8gLnxKMc+MGrE8XxfqT7r1kZGMPle2Zr48+7g/YDOEY8Pz43c0O0nFKaxhuR/?=
	=?utf-8?q?XR2f0OObF8h2JH3yqvhNIgmTcSR62nrsy4f1Tg2n1LwvnY96j9PaK0hyWTeRQEnuA?=
	=?utf-8?q?4yOqADgVBHPjU7Hf/WBIJgDnUM2GspFfdJvgVzWXDw+YXKUDL4dJID4hph1KpHlmC?=
	=?utf-8?q?u89TheyMuRNOiSd66JOVY+/te4i70tF1LxyUHeyQwzC7dYbddLxK9mFmZDAC/oq/x?=
	=?utf-8?q?skgeDpDDhru2HmqSMVbcYaXAdtRKUZNVy8x9EabJvGpe0WU93GMb5Gpi+oTUlfHfP?=
	=?utf-8?q?eEnfqYwpGKZl5oh/v2ekDoeK66vEQD5lR/xbJ0aPicxpY4QGdEmEm4y+MqtIzlWdc?=
	=?utf-8?q?aexWkF8UzIkJ1XTtmrfZBU6joaNjZAaPCaOFJUIqLHIrpNTPRbm53rC1gDjKodVaJ?=
	=?utf-8?q?cqaho8xMLRg4wwMtsQfa2AR5WdetMk7frkBXasGjXWvJXkOUxJvHmYQsuvibauutq?=
	=?utf-8?q?8K2I848+GQtzUgm4HRgAHz97D5TmcmGW8ANO4BXck9Hmn6fjYyegHBHdiVFq+KMqM?=
	=?utf-8?q?S6H1EMz9BogWtSMvye6G0j0sXxuowH65QCLgN0StM2u+vn1Hz8n+PF8c2mo34NUAS?=
	=?utf-8?q?F1+Tnf8KKqki8Nt4XicWhyO4hvMMonjuy6t2c4kg/htMxwMZA7mOVdsDiKaATR3GA?=
	=?utf-8?q?AkI66urrFgGVoWBO9e8BSdRE7ufD/6pU2Vec6int7CEiNK5vIy3vNOn69n50vitrf?=
	=?utf-8?q?GChC15m0y5QqAUf+bysVXOCYH18a8VCRKl8OulaH0mOIT31JznZztRfyrfEh3U0gw?=
	=?utf-8?q?63qapq6uPIVvkNK8m+BoDvfIAvoaGzxKvo25KGKoROke6b4yhnKqJPI39b8ZAqLqo?=
	=?utf-8?q?VJmD3Y2NreeyUyokas=3D?=
X-Microsoft-Antispam-Message-Info: 
 ASfjUyFKUAgf8vz2fJ1j9tyIYhHng/h/pDglG6MqHFqZRyMzodujx1Cnoh3XiStoYNNF4/Uby8AwAa6eC2wfFURHGBGxYlefOw0W1ACcH69Hi4p5va+TtxE1qL1zLeUVd3qCqef/lC7NYYnebvg+jPLB9VIqRaICSJiP1ANWOQO4QRomaWbPdbmJNSvTRt6M1dRm7lN8Q9Pv1xyZM121tfy5D6dsyNSCBY9zCt4O2vlxFrw6AftHwo/6EFQuaZ/K14W0cpgKB7JpwKe/Iilom+8Ud/fR7o2QmTybydpnN+4fCfOhYX2Nb7f7yp5GsQkIx3xEhGdV2bgxH/RsTtQ5AXaJ5Ub4kw+O1JivwsgNUD0=
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;6:DtFUKZYMer0e/n421Y6jAcHrpdEUCYsfGADzJIhOT0QcudZXK+tYJIm5R2CQA49kpWZpifMb9gVLmcL8ho+aj5rWmDfzpXccwkonMk4Am0iNTYXNQPLJGAgIA64eaxufRwM3uDnp/ZRg0Y67R9sSMb8rEkEvexjrzeA+i/kQ0C2CvFv6kFbZWhz7uHg52AOYFa04RWSBW14Eccuaa/+riT/efzRrqZK01Xcr288bkrgSaVYWQFgff0dJzBzmLGwARS5Xw/mm67ccmUErDTmp+SyYmm2U9L7oTaye3HIIxWYp0Ah0UM6u1/48fzUShrFEcRF0fJy7sjjXGUexmrDSocGNFf4RTPXYJ8J4hqW9W5M7aSa5pkmqAGG2qZYefysZPxvtAnBI/tpcj4b4hL3K1a9/wmdC80z7UwLmdx5iDJzPdeSSIhB9UbNxyy37s75+A64Prs7IW9btAXZvzct8Sw==;5:9eMvt3X/194VS2KQ9XRZkkJvXO0gS0lezaebTGXxeOoV+GGo+bfVBqHtVPXxLjm3SGBn6sOLDP+cLhQMzj4RZbp540K3skmgvWQdrg1tsrNXzxLZGDjy8CkElFV1/2q6ECb528tg6BRXGbVK2y1x+cdzqALhDal3NK59LccEyBQ=;7:U3L46R1YAj2pnLgYUpFjBZgfGpwQ9fPZ7DJz28oNxHka7kzAP0K6j3aoZIjFqZWfcVFrgIvMatj4z294EKVbp/8vq31DczV1Wql4u12C8dsSz7h09aY+l1WIBNx2YHsTElNEGwWlgT+kCSzgwQpxlgGAuhb73mFgZms9YuPMeFbsec5W84k4Vk5elMGjshjSBRLpILVMmRsaDq+YJabWWynVPYt0xyqL/7hZ1orZlkq1WEm+WclNbHU3gsTmbRc2
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2680;20:QEOgJ1gWiffElO1/9jNxt38fZAh+hn4luh4jMNZvKBLsamwwv54pEzxTxaDbL/Dw1gEtcA4EyYG063oFsGF0nGSzJZvtgZtXN3RKAKSXlGW6LfEtdXljS/ByKZuLW7kYFv1LmTEdEI1vddpraPGwbrG2cSMAtE1Ysm3j3d9j8/tBuEae6hjKMhF5gs+AFkMcfZjK0Pe2CQ3P26P0HJerTmzxVZn04WQzsiPmgCxwzjWzgwpSMCGWO4xbQFWkjFOX
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 10 Sep 2018 21:49:33.3209 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 c9317c3d-9e65-4c5f-0d86-08d617674c21
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BYAPR12MB2680
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

In the preparatory stage of CPU hotplug, the per-cpu pvclock data pointer
assigns either an element of the static array or dynamically allocated
memory for the pvclock data pointer. Currently, the dynamically allocated
memory is not mapped decrypted. However, when SEV is active this memory
range must be mapped decrypted.

The C-bit determines the encryption status of a 4K page hence a full 4K
page allocation would be required to store a single 32-byte pvclock
variable. This could waste a fairly sizeable amount of memory since each
CPU will perform a separate 4K allocation.

Instead, define a second static array which will be used when SEV is
active. This array will be put in the .data..decrypted section so that it
is mapped decrypted during boot.

The .data..decrypted section has a big chunk of memory that is currently
unused. Since the second array will be used only when memory
encryption is active, free it when memory encryption is not active.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Suggested-by: Sean Christopherson <sean.j.christopherson@intel.com>
Acked-by: Paolo Bonzini <pbonzini@redhat.com>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/include/asm/mem_encrypt.h |  4 ++++
 arch/x86/kernel/kvmclock.c         | 14 ++++++++++++++
 arch/x86/kernel/vmlinux.lds.S      |  3 +++
 arch/x86/mm/init.c                 |  3 +++
 arch/x86/mm/mem_encrypt.c          | 10 ++++++++++
 5 files changed, 34 insertions(+)

diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h
index 802b2eb..3f2a5e3 100644
--- a/arch/x86/include/asm/mem_encrypt.h
+++ b/arch/x86/include/asm/mem_encrypt.h
@@ -48,11 +48,13 @@ int __init early_set_memory_encrypted(unsigned long vaddr, unsigned long size);
 
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void);
+void __init mem_encrypt_free_decrypted_mem(void);
 
 bool sme_active(void);
 bool sev_active(void);
 
 #define __decrypted __attribute__((__section__(".data..decrypted")))
+#define __decrypted_aux __attribute__((__section__(".data..decrypted.aux")))
 
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
@@ -80,6 +82,7 @@ static inline int __init
 early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0; }
 
 #define __decrypted
+#define __decrypted_aux
 
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
@@ -93,6 +96,7 @@ early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0;
 #define __sme_pa_nodebug(x)	(__pa_nodebug(x) | sme_me_mask)
 
 extern char __start_data_decrypted[], __end_data_decrypted[];
+extern char __start_data_decrypted_aux[];
 
 #endif	/* __ASSEMBLY__ */
 
diff --git a/arch/x86/kernel/kvmclock.c b/arch/x86/kernel/kvmclock.c
index 0b3110b..9d8bad5 100644
--- a/arch/x86/kernel/kvmclock.c
+++ b/arch/x86/kernel/kvmclock.c
@@ -65,6 +65,15 @@ static struct pvclock_vsyscall_time_info
 static struct pvclock_wall_clock wall_clock __decrypted;
 static DEFINE_PER_CPU(struct pvclock_vsyscall_time_info *, hv_clock_per_cpu);
 
+#ifdef CONFIG_AMD_MEM_ENCRYPT
+/*
+ * The auxiliary array will be used when SEV is active. In non-SEV case,
+ * it will be freed by mem_encrypt_free_decrypted_mem().
+ */
+static struct pvclock_vsyscall_time_info
+			hv_clock_aux[NR_CPUS] __decrypted_aux;
+#endif
+
 static inline struct pvclock_vcpu_time_info *this_cpu_pvti(void)
 {
 	return &this_cpu_read(hv_clock_per_cpu)->pvti;
@@ -269,6 +278,11 @@ static int kvmclock_setup_percpu(unsigned int cpu)
 	/* Use the static page for the first CPUs, allocate otherwise */
 	if (cpu < HVC_BOOT_ARRAY_SIZE)
 		p = &hv_clock_boot[cpu];
+#ifdef CONFIG_AMD_MEM_ENCRYPT
+	/* Use the static page from auxiliary array instead of allocating it. */
+	else if (sev_active())
+		p = &hv_clock_aux[cpu - HVC_BOOT_ARRAY_SIZE];
+#endif
 	else
 		p = kzalloc(sizeof(*p), GFP_KERNEL);
 
diff --git a/arch/x86/kernel/vmlinux.lds.S b/arch/x86/kernel/vmlinux.lds.S
index ae8153e..b78e117 100644
--- a/arch/x86/kernel/vmlinux.lds.S
+++ b/arch/x86/kernel/vmlinux.lds.S
@@ -77,6 +77,9 @@ jiffies_64 = jiffies;
 	. = ALIGN(PMD_SIZE);					\
 	__start_data_decrypted = .;				\
 	*(.data..decrypted);					\
+	. = ALIGN(PAGE_SIZE);					\
+	__start_data_decrypted_aux = .;				\
+	*(.data..decrypted.aux);				\
 	. = ALIGN(PMD_SIZE);					\
 	__end_data_decrypted = .;				\
 
diff --git a/arch/x86/mm/init.c b/arch/x86/mm/init.c
index 7a8fc26..b3cc33d 100644
--- a/arch/x86/mm/init.c
+++ b/arch/x86/mm/init.c
@@ -815,9 +815,12 @@ void free_kernel_image_pages(void *begin, void *end)
 		set_memory_np_noalias(begin_ul, len_pages);
 }
 
+void __weak mem_encrypt_free_decrypted_mem(void) { }
+
 void __ref free_initmem(void)
 {
 	e820__reallocate_tables();
+	mem_encrypt_free_decrypted_mem();
 
 	free_kernel_image_pages(&__init_begin, &__init_end);
 }
diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c
index b2de398..f1ab7f5 100644
--- a/arch/x86/mm/mem_encrypt.c
+++ b/arch/x86/mm/mem_encrypt.c
@@ -348,6 +348,16 @@ bool sev_active(void)
 EXPORT_SYMBOL(sev_active);
 
 /* Architecture __weak replacement functions */
+void __init mem_encrypt_free_decrypted_mem(void)
+{
+	if (mem_encrypt_active())
+		return;
+
+	free_init_pages("unused decrypted",
+			(unsigned long)__start_data_decrypted_aux,
+			(unsigned long)__end_data_decrypted);
+}
+
 void __init mem_encrypt_init(void)
 {
 	if (!sme_me_mask)
