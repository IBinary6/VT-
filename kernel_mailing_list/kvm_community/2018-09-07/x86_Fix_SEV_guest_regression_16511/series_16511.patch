From patchwork Fri Sep  7 17:57:26 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10592431
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 6F96E921
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  7 Sep 2018 17:58:21 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6519A2B7E4
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  7 Sep 2018 17:58:21 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 58C322B8AA; Fri,  7 Sep 2018 17:58:21 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0B0732B7E4
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  7 Sep 2018 17:58:20 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727711AbeIGWju (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 7 Sep 2018 18:39:50 -0400
Received: from mail-eopbgr680053.outbound.protection.outlook.com
 ([40.107.68.53]:59456
        "EHLO NAM04-BN3-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726151AbeIGWjt (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 7 Sep 2018 18:39:49 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=K2txtTs/dKgYSLSmfQ6fmp9U7m+Xsj1BFCJl0Pp9LE0=;
 b=gWV/n8yofpw0YE4WFP8KXOb7gnY+zHbnF9yZ1N4yCfCcKuHAllVXwNHqGEF+4baakPQRYVzPrXp6vH/F2X9uYp22gGUVLtSKW5v4zneWq73u7FKV7XQomQVrw3jXeWUper9f9U2xpsgn2daT4gxoneY5UfCFaPMnm1EXjMrxs7I=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 DM6PR12MB2684.namprd12.prod.outlook.com (2603:10b6:5:4a::33) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1122.16; Fri, 7 Sep 2018 17:57:39 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v6 1/5] x86/mm: Restructure sme_encrypt_kernel()
Date: Fri,  7 Sep 2018 12:57:26 -0500
Message-Id: <1536343050-18532-2-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1536343050-18532-1-git-send-email-brijesh.singh@amd.com>
References: <1536343050-18532-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: SN4PR0401CA0004.namprd04.prod.outlook.com
 (2603:10b6:803:21::14) To DM6PR12MB2684.namprd12.prod.outlook.com
 (2603:10b6:5:4a::33)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 41bf32c4-4343-421c-b1ac-08d614eb6744
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:DM6PR12MB2684;
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;3:UUE1+mRQwhDpT7lC068qRvcxh00nQgbALdwl58SXuglBY1h5wJ5bS6SDhFl2n/U8GHSJI6fu3nXogjY4efylcB1bJbLoE+KHScXlztbTufjB1+CbngtBNsAaraOvhuGjxu33d9ckz6TcHMXiDnDJqZ/hWAqrJuZN2QW2X9yUbKe2FGWWmldLko9EBWmouTn/Fa8P52M14i+flSxeyNT/oacNlt3g/4w8EM18+DY2a5NqSfUH9EyAvcU4J7Sy2Lc0;25:3A/cZ7pM03T+f3jI4WAhiq68bm4JkFSzE4LDyxp7NmScMqd2MwKBnQskTWBYuSLbx9Y2+W4uqhNp2UpXmaWotARPsCi48f0rGjFW0xcSkZZl4Eg+wA/fMZzPXSJ45k1ebg1VIA01vYmm9g1/9rAMD6TjvOLshBRjWHOsfD0/uIbxdiUcZoSA4YZki37zgUQXOuq/lCbzmrOat1g/crCDbDkLtJMpZ0k5gBBh9d/72dqwuQoBViEKln4m/OcYHFOqIjyKnPBzysPstpTs3mTcQ3m8nVf6UYo82+ib1cQzb7innXkp7FpfA7pTSyKEwOtI8rIbjRglcC9QdPysKUNm2g==;31:JVcRvG9Iehd7jBIUYcB4rf3DEJ304Uhars/us5b7YN5XjjGKJnPoKrJDmhrhd4UDjkH8scPLy2kL0YvD7EAV6Yw+Xu25gFAlJvOemgUaYAJJLm8MZzDoL5iP/8yCXvNEwOu9cyZ8uiiHtwg83j/23MkjAt6hp2xShoPfEc2SzYFVCtp5aT7ReFT2UHtRhGdQVKYrdlrQAfAnflvdstxu7IjEPQ90CTiZfUf4d06tY2A=
X-MS-TrafficTypeDiagnostic: DM6PR12MB2684:
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;20:oRCO3Mbeqv4A100NkKcA/ye6THjX0dSuIuJRWnfJ9nxBSnU40pjncXSDeal0+w9/zxqqQ3oLd3H8gva9/BhnCzB3Y5Mllsh+xQsnfGHu/WjfXVaBYSFjpceVxxijmDIJjiOP+v41Yf/nqjx3GT/aqyfjda8yTRg2W+Ru5UZCcTxSAIWfpTGBoOpDLrq/KF1Dt8ebPwtn4nByK9njyoNo9YTOpAbbtVgKLDblVZdHKVzDFN9SEX/Dx9Lhbuz5EmK3ro6nZVKFj9e1Se8FzWdpJOgthKIq/RU9Hgz06K0Fmx0aVrN82fJ6NwI071klbOTGEki7SrJV9ItkEAzb3x8HAukQPnSVMXGMUMEZ9zXYUnNIOh6EogAJh4GxnBP2eJ1q23Wi1Dg6iaxSKjxl81lXDmr94MtTsAJ+2aZo5Q87qT77eS7pnuZReN+oUyhdbWdDKspMjfAsUI6tv0TP0+//hexdOrUXhBwAe3HCmzaWqXZazwaFvcT+BCix396Q/hBd;4:92cB3ImCBT7oejBYYSU73wdCpBSQCKTS7DSXuHvM0ChnHllJ94H86ykBAZnYcfn0KulnJXmwbOrnmo/Iu4ziR3yihURndR+4apnOEhHpUBtue3HLLcc/5NlhNxJMf17azduaQKg1YMaIEcaKy7RE82KzmObTbyf5UhaEqv8QSzKfUkuRs4uoQZRzB1eXle32SlkBAbuEq4QBWdxPlKC1/JfPDPoYyQP4hsmjYCQN1VV5/cWYxtfrubmC75zZOimE3zret1RrXa7GzyCmGNKsgBymUwd8UOuA+Yn06FWh3BatMBB9iGGwhqPy4ub2TJkU6PLCTxxUj/0HaxWCx/Sf8K7KV/FsfwhofRUJQxVA50+XGTsoR/JgQ0xDMempF8Y1
X-Microsoft-Antispam-PRVS: 
 <DM6PR12MB26843406B41012AC4B0DA713E5000@DM6PR12MB2684.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(823301075)(10201501046)(3231311)(944501410)(52105095)(93006095)(93001095)(3002001)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123558120)(20161123562045)(20161123564045)(201708071742011)(7699050);SRVR:DM6PR12MB2684;BCL:0;PCL:0;RULEID:;SRVR:DM6PR12MB2684;
X-Forefront-PRVS: 07880C4932
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(366004)(346002)(376002)(39860400002)(396003)(136003)(189003)(199004)(14444005)(8936002)(81156014)(81166006)(446003)(476003)(2616005)(956004)(86362001)(11346002)(36756003)(486006)(2870700001)(44832011)(2906002)(47776003)(25786009)(50226002)(66066001)(4326008)(6116002)(97736004)(6666003)(7736002)(105586002)(316002)(54906003)(106356001)(76176011)(3846002)(23676004)(7696005)(8676002)(305945005)(52116002)(16526019)(386003)(186003)(68736007)(6486002)(26005)(5660300001)(50466002)(53936002)(478600001)(53416004);DIR:OUT;SFP:1101;SCL:1;SRVR:DM6PR12MB2684;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BDM6PR12MB2684=3B23=3ABSnM8yS?=
	=?utf-8?q?j/yjbzGIJYXYEB3d6boMLL5lYkA/aYjStPLJFuz8NrSy1ELEYC84G2gCMfdcYrvLy?=
	=?utf-8?q?ouO1McguzUJempHiSdiUh9QZMBx8137FTuMZcx5GmVqkS1fjgzK+8HiTtZiSmLAkI?=
	=?utf-8?q?G4od4Wu/PAstc2wmJYm3ZBudXS/M/DkfjTFghcwDxqq7mA9c7ltXIwN1my04ebnCa?=
	=?utf-8?q?B+v9db+uRvEQaZ8qbd7uGrfCz766VOIasqkBN7d3PEz5aG9u1+zbnXngKU2nVPDI6?=
	=?utf-8?q?TJ9GTJE9t/b82UunWg6OMsJJfHnE9ec68Q2AE9/yg7UAro4kq7UKlFdzhFoA4RosU?=
	=?utf-8?q?Yqs2zwpEM10gYEcrqBeTYaVCpemBqORIWiJtRpq0gifBkacPlHbQz5SAq1TfFXhmE?=
	=?utf-8?q?WFXuZc9j4yQRn5nkrBw/cMQdqEl187TQ76Ct/vS4XxHRj7EoETaGy0GGlJuKsd1kM?=
	=?utf-8?q?TWiStIZDHf/sEdX06pGD0ZT1QnFILm4Ky84FQn3wp6rRf2j/6eDBY/6u3/OlSr4SO?=
	=?utf-8?q?lu1dRVXo950LVvH5wC03uQDmI651NdC0uNUma4j/sVzazbmfjntOwi9L6OFQUYpky?=
	=?utf-8?q?sAayfwE+onjO7Pe2SJpBw/ZX/kohf9rUwiovT9iGv4gW7CS2VZMwEjbAqxSp+Ba4S?=
	=?utf-8?q?5FHll8rm39hE89v/2DwwXwbNbi169lbFOaeUfy+9KabQ7uQiMXcJJhgmslj1Zkgwt?=
	=?utf-8?q?NjizKZkBwR8kxBDiP3fjmAKHti32IBDJGmV3g/x34CsBCS5pfp4aGVcTln2Y4DSHU?=
	=?utf-8?q?qrvU2WpGPErx6W8AZExMJSk51X4TfsNIuulITCep1qj4D76jf+8N+wDZPb22NnD/j?=
	=?utf-8?q?vq9w1wgehb3z+5bXy5cSgvqW3kcGH4Mfq7XQbaF+bl0bYTmX2mN17GpSE20uWpI1J?=
	=?utf-8?q?XNKfkt7PQk2eDEBChxMAG4R1+ZfNT60OCy2u+jRQJg4gjoFhoizc8eb9nTBnpxuhU?=
	=?utf-8?q?910DQpGNUzfdrJvHbHpT2a9IsNeE+D9I6PYDkJDNRmuoagJhPtFtAX9J7PSnfNSWT?=
	=?utf-8?q?MNwOSdo8+Mz032t/CoRPoBOvm4KVmBNgLDc8/WIOS/Wg9TlS7PoTV7EMt2aWAcN0M?=
	=?utf-8?q?NGrcGWTLuaO+mnt0h9Dakqf1Qj2LFCl1Zr+TQay2iiPiLPGIMZ3Om2m83dpq5LPnN?=
	=?utf-8?q?j8/p+7thzydW87bie03P9U182v3qUe+GNkkmOM2?=
X-Microsoft-Antispam-Message-Info: 
 7PRUMk9MI2HiI6y9mYots0omUS0pDL/BDNOwH7ixP7243+rFYm/uDPqsSfw8yYXVcZhh21TXfcxu39wk3uuwl1SsEPAGE0hAiJeJR7KC/AQ7uuOj1vJ39gR4hnI0G9jXDEP7DRb5yg9ZlEzDSbgNkf0yX3l8GxOI79VO8F+taU4UZ1NtF5Unzztk/6NiYk6vb+W1Bh3Zt2BJoEw4ErWBjEX6wGt26no5PbtfBM1YUJZ6jNywePJf05Qb9QJupkVDMeXnoEeO7vwMG+i22enjXcI7qdulwE2+1RoQVboMzuV7HrcFZuE+PSbH6bO+YPqmIUvmxouX1vcDWAFMiDie9KL/OSSUVXKghSHEUXSOwsg=
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;6:OZFnr9V4V+2VVC5ZiOU1fAcNmjSDJb2z7CITXKV2XDeUxBEPfoJKlrKJe0AeztmGj0UhwwuoiQu/3x9sGFaikQCYKcFlqNqJsdcequLFMddZPpl7nForx22TS9PFBJD1rs9cO+ivzXFVMjb82LsS7YbsLVs+4CRV3b9em3LkFymfjjYr/nzUaFcMAwlp2Sw6aW4XfMLBZ1H6YQZOOO/CtklKaGpWYD9GFjh+y2r6qaRFE1TilTiSF7j8n2yuzTRV6Ia3ZeCMtyBpk8jebtVxWnEQ5Xr6wsIcyGSnmfL9PkHZj5cmFAkPLsn42nY+u0lEYK0R0dBNSEHEl+FQPNU/3KEJjgQ9H3YVmaAFPXhEBQSEWIHWC2Tc+PEXeuzKqHfEJp4qlfQsZ5nMvTqrlWGCALq10/UEyF/EwAOxwgg36sGW40Lqz8XxBwQKv2h8lg8WP42BUzONICX0vwi/EAO6kA==;5:XHp2MQ5SW0McfAioTb/BIRip/RRbrmg/nAthH4bDaiU4cGRYRW8OukJz6a2a+ilInW+PZkfIs5wgVbF7S0M0yc7ipek15iyil3rhDCMuEcbOc6El7pOI0jIREY8f7UBgrSJK3+F3QVoK8guNm0E/et86ttJax+COK9mN66RdRiE=;7:wbnERhJGarVmsHVH4tgUi01IhdP0TzVhGzRrflpWNCJU+e2MMipm5QfPcbmDQ3wgNxst1rhza3Duam/1rfSI5IHioOam6FAYDP710/tSZoeOsHdhAD8Dfnb0Ec+e9V/FUjfw/SwRz3fNe1n5vmk7V/b6ujfUbrFSjEnttgVnF05z4THd/ygjNyeEf3VjJ5NWp7Wl0Fk26ZLDb+ppDEfoIOs6+oKz0N+roSVpOQzMvlP+exAzZtnED8KoDubalA2S
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;20:1w6Go6bUsy3DFseGiDlodWGF4D2Wrd3rIuniYRtpTUWGFtMl6DFVkLYH6XD6DfPKUsq8/vzej86qJmqfIRHQWzrptqsHRsW9ZxSYHVueGDBzXhLsE8zgMBEHs2Z5U0GvjzHzDVMxniBiwBt8vpB5bklCXqkiJhXNHc52o23zjt69NESwaBrytuLunxkuMxuyyoMB8+ncZdjLEsMjmBIvcs5APqfoczgx0iLAvRowAR10szc5BgTna+sj9/My4gI6
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 07 Sep 2018 17:57:39.5344 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 41bf32c4-4343-421c-b1ac-08d614eb6744
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR12MB2684
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Re-arrange the sme_encrypt_kernel() by moving the workarea map/unmap
logic in a separate static function. There are no logical changes in this
patch. The restructuring will allow us to expand the sme_encrypt_kernel
in future.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: kvm@vger.kernel.org
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
Reviewed-by: Borislav Petkov <bp@suse.de>
---
 arch/x86/mm/mem_encrypt_identity.c | 160 ++++++++++++++++++++++++-------------
 1 file changed, 104 insertions(+), 56 deletions(-)

diff --git a/arch/x86/mm/mem_encrypt_identity.c b/arch/x86/mm/mem_encrypt_identity.c
index 7ae3686..92265d3 100644
--- a/arch/x86/mm/mem_encrypt_identity.c
+++ b/arch/x86/mm/mem_encrypt_identity.c
@@ -72,6 +72,22 @@ struct sme_populate_pgd_data {
 	unsigned long vaddr_end;
 };
 
+struct sme_workarea_data {
+	unsigned long kernel_start;
+	unsigned long kernel_end;
+	unsigned long kernel_len;
+
+	unsigned long initrd_start;
+	unsigned long initrd_end;
+	unsigned long initrd_len;
+
+	unsigned long workarea_start;
+	unsigned long workarea_end;
+	unsigned long workarea_len;
+
+	unsigned long decrypted_base;
+};
+
 static char sme_cmdline_arg[] __initdata = "mem_encrypt";
 static char sme_cmdline_on[]  __initdata = "on";
 static char sme_cmdline_off[] __initdata = "off";
@@ -266,19 +282,17 @@ static unsigned long __init sme_pgtable_calc(unsigned long len)
 	return entries + tables;
 }
 
-void __init sme_encrypt_kernel(struct boot_params *bp)
+static void __init build_workarea_map(struct boot_params *bp,
+				      struct sme_workarea_data *wa,
+				      struct sme_populate_pgd_data *ppd)
 {
 	unsigned long workarea_start, workarea_end, workarea_len;
 	unsigned long execute_start, execute_end, execute_len;
 	unsigned long kernel_start, kernel_end, kernel_len;
 	unsigned long initrd_start, initrd_end, initrd_len;
-	struct sme_populate_pgd_data ppd;
 	unsigned long pgtable_area_len;
 	unsigned long decrypted_base;
 
-	if (!sme_active())
-		return;
-
 	/*
 	 * Prepare for encrypting the kernel and initrd by building new
 	 * pagetables with the necessary attributes needed to encrypt the
@@ -358,17 +372,17 @@ void __init sme_encrypt_kernel(struct boot_params *bp)
 	 * pagetables and when the new encrypted and decrypted kernel
 	 * mappings are populated.
 	 */
-	ppd.pgtable_area = (void *)execute_end;
+	ppd->pgtable_area = (void *)execute_end;
 
 	/*
 	 * Make sure the current pagetable structure has entries for
 	 * addressing the workarea.
 	 */
-	ppd.pgd = (pgd_t *)native_read_cr3_pa();
-	ppd.paddr = workarea_start;
-	ppd.vaddr = workarea_start;
-	ppd.vaddr_end = workarea_end;
-	sme_map_range_decrypted(&ppd);
+	ppd->pgd = (pgd_t *)native_read_cr3_pa();
+	ppd->paddr = workarea_start;
+	ppd->vaddr = workarea_start;
+	ppd->vaddr_end = workarea_end;
+	sme_map_range_decrypted(ppd);
 
 	/* Flush the TLB - no globals so cr3 is enough */
 	native_write_cr3(__native_read_cr3());
@@ -379,9 +393,9 @@ void __init sme_encrypt_kernel(struct boot_params *bp)
 	 * then be populated with new PUDs and PMDs as the encrypted and
 	 * decrypted kernel mappings are created.
 	 */
-	ppd.pgd = ppd.pgtable_area;
-	memset(ppd.pgd, 0, sizeof(pgd_t) * PTRS_PER_PGD);
-	ppd.pgtable_area += sizeof(pgd_t) * PTRS_PER_PGD;
+	ppd->pgd = ppd->pgtable_area;
+	memset(ppd->pgd, 0, sizeof(pgd_t) * PTRS_PER_PGD);
+	ppd->pgtable_area += sizeof(pgd_t) * PTRS_PER_PGD;
 
 	/*
 	 * A different PGD index/entry must be used to get different
@@ -399,75 +413,109 @@ void __init sme_encrypt_kernel(struct boot_params *bp)
 	decrypted_base <<= PGDIR_SHIFT;
 
 	/* Add encrypted kernel (identity) mappings */
-	ppd.paddr = kernel_start;
-	ppd.vaddr = kernel_start;
-	ppd.vaddr_end = kernel_end;
-	sme_map_range_encrypted(&ppd);
+	ppd->paddr = kernel_start;
+	ppd->vaddr = kernel_start;
+	ppd->vaddr_end = kernel_end;
+	sme_map_range_encrypted(ppd);
 
 	/* Add decrypted, write-protected kernel (non-identity) mappings */
-	ppd.paddr = kernel_start;
-	ppd.vaddr = kernel_start + decrypted_base;
-	ppd.vaddr_end = kernel_end + decrypted_base;
-	sme_map_range_decrypted_wp(&ppd);
+	ppd->paddr = kernel_start;
+	ppd->vaddr = kernel_start + decrypted_base;
+	ppd->vaddr_end = kernel_end + decrypted_base;
+	sme_map_range_decrypted_wp(ppd);
 
 	if (initrd_len) {
 		/* Add encrypted initrd (identity) mappings */
-		ppd.paddr = initrd_start;
-		ppd.vaddr = initrd_start;
-		ppd.vaddr_end = initrd_end;
-		sme_map_range_encrypted(&ppd);
+		ppd->paddr = initrd_start;
+		ppd->vaddr = initrd_start;
+		ppd->vaddr_end = initrd_end;
+		sme_map_range_encrypted(ppd);
 		/*
 		 * Add decrypted, write-protected initrd (non-identity) mappings
 		 */
-		ppd.paddr = initrd_start;
-		ppd.vaddr = initrd_start + decrypted_base;
-		ppd.vaddr_end = initrd_end + decrypted_base;
-		sme_map_range_decrypted_wp(&ppd);
+		ppd->paddr = initrd_start;
+		ppd->vaddr = initrd_start + decrypted_base;
+		ppd->vaddr_end = initrd_end + decrypted_base;
+		sme_map_range_decrypted_wp(ppd);
 	}
 
 	/* Add decrypted workarea mappings to both kernel mappings */
-	ppd.paddr = workarea_start;
-	ppd.vaddr = workarea_start;
-	ppd.vaddr_end = workarea_end;
-	sme_map_range_decrypted(&ppd);
+	ppd->paddr = workarea_start;
+	ppd->vaddr = workarea_start;
+	ppd->vaddr_end = workarea_end;
+	sme_map_range_decrypted(ppd);
 
-	ppd.paddr = workarea_start;
-	ppd.vaddr = workarea_start + decrypted_base;
-	ppd.vaddr_end = workarea_end + decrypted_base;
-	sme_map_range_decrypted(&ppd);
+	ppd->paddr = workarea_start;
+	ppd->vaddr = workarea_start + decrypted_base;
+	ppd->vaddr_end = workarea_end + decrypted_base;
+	sme_map_range_decrypted(ppd);
 
-	/* Perform the encryption */
-	sme_encrypt_execute(kernel_start, kernel_start + decrypted_base,
-			    kernel_len, workarea_start, (unsigned long)ppd.pgd);
+	wa->kernel_start = kernel_start;
+	wa->kernel_end = kernel_end;
+	wa->kernel_len = kernel_len;
 
-	if (initrd_len)
-		sme_encrypt_execute(initrd_start, initrd_start + decrypted_base,
-				    initrd_len, workarea_start,
-				    (unsigned long)ppd.pgd);
+	wa->initrd_start = initrd_start;
+	wa->initrd_end = initrd_end;
+	wa->initrd_len = initrd_len;
+
+	wa->workarea_start = workarea_start;
+	wa->workarea_end = workarea_end;
+	wa->workarea_len = workarea_len;
+
+	wa->decrypted_base = decrypted_base;
+}
 
+static void __init teardown_workarea_map(struct sme_workarea_data *wa,
+				         struct sme_populate_pgd_data *ppd)
+{
 	/*
 	 * At this point we are running encrypted.  Remove the mappings for
 	 * the decrypted areas - all that is needed for this is to remove
 	 * the PGD entry/entries.
 	 */
-	ppd.vaddr = kernel_start + decrypted_base;
-	ppd.vaddr_end = kernel_end + decrypted_base;
-	sme_clear_pgd(&ppd);
-
-	if (initrd_len) {
-		ppd.vaddr = initrd_start + decrypted_base;
-		ppd.vaddr_end = initrd_end + decrypted_base;
-		sme_clear_pgd(&ppd);
+	ppd->vaddr = wa->kernel_start + wa->decrypted_base;
+	ppd->vaddr_end = wa->kernel_end + wa->decrypted_base;
+	sme_clear_pgd(ppd);
+
+	if (wa->initrd_len) {
+		ppd->vaddr = wa->initrd_start + wa->decrypted_base;
+		ppd->vaddr_end = wa->initrd_end + wa->decrypted_base;
+		sme_clear_pgd(ppd);
 	}
 
-	ppd.vaddr = workarea_start + decrypted_base;
-	ppd.vaddr_end = workarea_end + decrypted_base;
-	sme_clear_pgd(&ppd);
+	ppd->vaddr = wa->workarea_start + wa->decrypted_base;
+	ppd->vaddr_end = wa->workarea_end + wa->decrypted_base;
+	sme_clear_pgd(ppd);
 
 	/* Flush the TLB - no globals so cr3 is enough */
 	native_write_cr3(__native_read_cr3());
 }
 
+void __init sme_encrypt_kernel(struct boot_params *bp)
+{
+	struct sme_populate_pgd_data ppd;
+	struct sme_workarea_data wa;
+
+	if (!sme_active())
+		return;
+
+	build_workarea_map(bp, &wa, &ppd);
+
+	/* When SEV is active, encrypt kernel and initrd */
+	sme_encrypt_execute(wa.kernel_start,
+			    wa.kernel_start + wa.decrypted_base,
+			    wa.kernel_len, wa.workarea_start,
+			    (unsigned long)ppd.pgd);
+
+	if (wa.initrd_len)
+		sme_encrypt_execute(wa.initrd_start,
+				    wa.initrd_start + wa.decrypted_base,
+				    wa.initrd_len, wa.workarea_start,
+				    (unsigned long)ppd.pgd);
+
+	teardown_workarea_map(&wa, &ppd);
+}
+
 void __init sme_enable(struct boot_params *bp)
 {
 	const char *cmdline_ptr, *cmdline_arg, *cmdline_on, *cmdline_off;

From patchwork Fri Sep  7 17:57:27 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10592423
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id E8E13921
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  7 Sep 2018 17:57:53 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D00A42793A
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  7 Sep 2018 17:57:53 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id C1F1326E54; Fri,  7 Sep 2018 17:57:53 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2A76A2B5F4
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  7 Sep 2018 17:57:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727757AbeIGWjx (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 7 Sep 2018 18:39:53 -0400
Received: from mail-eopbgr680053.outbound.protection.outlook.com
 ([40.107.68.53]:59456
        "EHLO NAM04-BN3-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726365AbeIGWjw (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 7 Sep 2018 18:39:52 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=BdJUFBsYLNgYsE/wjTdOS5mKAPWVjyMJBQGIgs0NlnI=;
 b=XsyHckiHF0bQ407764b/zFB0xVdm31iU7s0ZKohgJmN0St/sJF0kMdBaUM2kNevpn7q7QzP4/tf9zhl+aI4r7zHNp1eK8DB5slgFK7HCrIBsMPHewFdIULRrzOstNodu8eTYsHfIHzScnBEXKqDSlWmZo/5cpXb+yOAypkMLfac=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 DM6PR12MB2684.namprd12.prod.outlook.com (2603:10b6:5:4a::33) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1122.16; Fri, 7 Sep 2018 17:57:40 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v6 2/5] x86/mm: fix sme_populate_pgd() to update page flags
Date: Fri,  7 Sep 2018 12:57:27 -0500
Message-Id: <1536343050-18532-3-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1536343050-18532-1-git-send-email-brijesh.singh@amd.com>
References: <1536343050-18532-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: SN4PR0401CA0004.namprd04.prod.outlook.com
 (2603:10b6:803:21::14) To DM6PR12MB2684.namprd12.prod.outlook.com
 (2603:10b6:5:4a::33)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 8323c752-601f-4ac5-29c6-08d614eb67e7
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:DM6PR12MB2684;
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;3:Coozletobzfnrwuwhwvf0Dqh8VMWD2RqJZMGBB+n10MqgRFfF3YtI5XWLkRxcY4hiGI/9SRjB0IHioV9M6gWXtwG5d7ytfsQ4/KHDX6vDPEeA6HoiKbnsL3kflfUG0hRjsSDJlawCHnXHHok12HLVI6ZvnWkXPtFyoS7lDbB0jWERfFUkko5v2K2F/1yUT9MVMDqm1Lk94S+hJ0ZDBM/NI069GvrPGfjAVSQueGBHIETijgYfFUl6AbrPmJ3oc8m;25:yg9EQzGoWghGdkoRNYAKeyHEZvivqGPnJmWtP7Xrb7LgZqaeJAatBrFnU8xROnw8BbrQe71IxBJIBqeUghNLJ8IZZ/95QPC2Xd+jh0/ezWuKJqe6rkVaUi+E/P3bmzHXbYmNNJt6It8tgt97IewL6Zq5WoeVpAv3w6KxONVjhjPPqsIbZWpo4dIq9bO8SvawTz9AnXclt29F8Te5rpJcMKAfEYoMoIVJQPJNi4siENFv8CdL3bK09jUHgnT9a0nQa5FuzNG9upPsOL9nHWaf99AJr+0UnJ+gakGILzAt+Rpjc7bIuzx/IwD+nwfxAVZT7UYWFyiBYq7h6/MQ20Uq0Q==;31:sr+FDmcM+z4RTkCxJaIx7ZeerMSECu7mcRzxE3Kq9x7NULJRoTkpb1OgPMQ/Ea7sZdbBCy2UK37xg2znq863aon6HbUgXGpxAkj44A7KTk4wvQ9KposAvcQJdyn3Dkhc3Zw6pBEzMowGGKlQVP/6A3y/dgwGmxPrV70DHSDo0OnN34dm0A6TCxZ/Y50Cjiv0YBnEofVbm25Ci9ED+xaD6EuAg5Y8mUOra6eR/KO5bRg=
X-MS-TrafficTypeDiagnostic: DM6PR12MB2684:
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;20:wDSuzL7IAqIVUvCL48nW+XrlhdBn+JrclL6HiMt9WahHoOvIL9znvPKUrv4lJ+07quzh9jEpVEbVAxaDE7BrM9lHNaue5PK6SeiCYYAeYaqDM00FR8/Ze+GU+nQ++lO0Ucta+W2G5Jn8GadBxZNQ6ZgahI94Zipd2uiSbc9seaj7oKm4yfLiYvcT6HEywu/oJrbNYAV44V9dX8z0AJEe2Q0SyJ1T3O/+m7hxIQ28uKgFjz7BYVYEB8PK+70zTPTWDgI+SwwEJFMZniEVeIqqwwRU9gaR5zCGEd8WGge2zQTkmqXrYP3pCBJxdNNg/Kyg01dMcl0a6JO0H+/eV3yz/yqgwJp1bSS8HU2pXOhEpE/eRG2VJ66vy23Is8M4QmJjpQsk6OZ4MQF/1OqA1y4giqFqRQsgK+vcJrC37Gtv2YXHZn3LLYyluzU4l7RIXxvfvpOBzcHe3xX4fi+95RaeGiandYAbWraO/4mi0600ey82Xuvou4VkPTaN9gadPwo9;4:w94c9urZZkB9NoWeHqchQELb4At7vHjqwiGf4pQyXft0KGLQHfrYVYKkD422wYlj/wNywXqzpUFdJDhEoDxFu5rmfC9dHeIjw++noMGc7Lv9j0QgDpVYaIHlk2IkvAzZ6d1s0Nss5i5Zwo0BSHiq7yavLd96GZn+LbZA75yOEXiy0zKWOqO5iqR6oNEz16mZqpv3oc9SP1YosUoI+4zIhFyCYedBhR1rfmQKV4EsbGEkKLja8bVnEvrJTFvBGEOaH2Yb2BhJH6DV3i1A/NIcsecNRJ5Ldztmi7epZqTeEV7vXfW4F/jao9MQQoO3V7s0rQJQhT7McsgBIVH5SCIwYXs7x997KPVdZ+BZ9yEr84mW1pd/6n7JisYnhpFwt3H7
X-Microsoft-Antispam-PRVS: 
 <DM6PR12MB26844B252A8AFD5A4E19AEACE5000@DM6PR12MB2684.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(823301075)(10201501046)(3231311)(944501410)(52105095)(93006095)(93001095)(3002001)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123558120)(20161123562045)(20161123564045)(201708071742011)(7699050);SRVR:DM6PR12MB2684;BCL:0;PCL:0;RULEID:;SRVR:DM6PR12MB2684;
X-Forefront-PRVS: 07880C4932
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(366004)(346002)(376002)(39860400002)(396003)(136003)(189003)(199004)(14444005)(8936002)(81156014)(81166006)(446003)(476003)(2616005)(956004)(86362001)(11346002)(36756003)(15650500001)(486006)(2870700001)(44832011)(2906002)(47776003)(25786009)(50226002)(66066001)(4326008)(6116002)(97736004)(6666003)(7736002)(105586002)(316002)(54906003)(106356001)(76176011)(3846002)(23676004)(7696005)(8676002)(305945005)(52116002)(16526019)(386003)(186003)(68736007)(6486002)(26005)(5660300001)(50466002)(53936002)(478600001)(53416004);DIR:OUT;SFP:1101;SCL:1;SRVR:DM6PR12MB2684;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BDM6PR12MB2684=3B23=3A13x3DBY?=
	=?utf-8?q?9wDdQ8A4uhGEklAwF8W+B+qOrYE+TKfOVZY8YL9KedQj4F0khVK0PTUY+myfbni/D?=
	=?utf-8?q?cMGTbGraSXqfhdKVZbY3+QQt8G8Rj15JW5Am6oqRnRgCb+rids8UbzVwgyCIhLFeI?=
	=?utf-8?q?qL1VnTezbuGQP3pFTZ/SRqHNU3jlrkoRNP3sCAXSe8uOdI+E9mNlre59FpO4K2ah6?=
	=?utf-8?q?MoGlllmQYEwim8NE3nUkcCszGwHMrybvxr0WdmJshhwB35mi6jz8DwvP1ihwTXtOv?=
	=?utf-8?q?ZM8t5N7ycxUsgEm1JUyfXi+ViQpSEu7ii9QPfDtZk2gI1lNkO/Gf/gRXEaSi968as?=
	=?utf-8?q?AySq8UoUWmAIhX76y6IRMACXAYzbRREaphtsNa9ifthGLWNoTNPaeFqr9N8qiC8gH?=
	=?utf-8?q?nesALDrf3fqhqjJIYCOCXuYXeRDu+o9VJ9UoCt9JiF/G4KyoVMUBQ14Q+QuVp83aT?=
	=?utf-8?q?7TtwE3/Y907nPj+PbEzOVX/eRs9Q/K1WfwzaLpxl24ATKmrASgAMc3YrVR2vW/Dud?=
	=?utf-8?q?pP3DFCMHSFK2kYde01s/Im7K0tJ6Nx9goQ0gjN27UnGU3QllygxuO8PSMep9hb77B?=
	=?utf-8?q?7qaiqe+zNimOxLJ6KwzO4SqcVNgJUf0Sbah73CSn+8zGrXwoYn8oIgM5VKhlGKApm?=
	=?utf-8?q?FU5r+77Nsx1RIwf5btPlnxRvokeQ8rm3fBv2qBGap/6vkm+wBRKgc6US6avV6Bmib?=
	=?utf-8?q?sMVUoL3GSNg3Ll406b8uJkdZwCeZaHEgSHcc9zMbhsKtJo2o1VptYmBypxyI8ck/A?=
	=?utf-8?q?mt9yJMnSIFqXOKdLDe4gf6HMfZr0jXDU4Nc0XkQzGqcp2IQ8XuJn6QFV9Ep9lOFM6?=
	=?utf-8?q?T7Uy28mICk30TVxvuxO6jrjQ3vcwsXEjYuSPoKNH50YGrkgpWVzwlUI4kcTrPe5EH?=
	=?utf-8?q?tE/oNWZ1SZbJCKC3WF/LSqU/UKqlKPMNJ0sWe5UVjVuZWy2FHsvxpFY+5VLeC02HF?=
	=?utf-8?q?ToVPCNgRgLASNv2sbwACf9zY+MjdsA5Bmi1rjgjA7UuthoqE5tUrN8+EdeS0KfRJh?=
	=?utf-8?q?lDjblPWSvQx6s5f1ayhDa5p9OB/HF0/CrHBI4BC4EW6TvmejKpD7G8RN9SrcLahDZ?=
	=?utf-8?q?Un/YdOwkZQPaemq9iF/efqqHx76ZIaS+ZihXi0f4xr/x2XELvFEH7WRqIulHU3Bj6?=
	=?utf-8?q?PHRuT+ecgJ3o+Rr9lf/nsIsMkWdIXx159wagqDsumv1VmnXbqw2WMTd6LQYPQ=3D?=
	=?utf-8?q?=3D?=
X-Microsoft-Antispam-Message-Info: 
 Mz/RazLWPD+Ab0QRQjmOp+yQT1YiNZeswXaKt/G7eh5k9Uuz3q0ee8xqzISoQqsMP6DtGNOyxpGdBb0qwhRfxR6eH4kw9B9M1KkcXKNHWwuOFJIjK2FWQ4w1JVdU5lrpmrrfd28LaHeXQ8RjA4jvqGqf2qinNwXa+EoCt9aXINk+wKVbxjHKa1RZORI4B8I9l1UqyUd58M5M5+lnzUyMCOo5ftwgxPx+zILxjmZHE4zmxoz/ttFEX3TQ9s8kjEKAe2VQu0exa5WJrHSD1b8HAZBoWIF0sMHZIXa7pft34TC1gsLirITnvxhtJEzkZaq+rT9Sek0TyEQvtaQS7QDCDAnnYeTi1Jwy7VEottSv9Io=
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;6:5c2rKVTxJ01ni5wJK5dfN2pCZ4fLiwHrOL3RfwnvfkMvXY1/iAVCIGWcUyxRQjTJHaTNTxbL9A42aEXQAOI/1YFFQ4TeE3IaqLsgpUsYxM7yNBKSQVkVgQugJnOz8qL1Qem/oCJOThTlIU7Sa6Aln9BP2Kxw4xNudNk68662diA6AywNl+rXx4Tjfa31E9z35nZ9Xat/B3Gpph2AZlRoP3OGZdYIsR8ObplXM4s3G+SMcgtBurFQAXFPTW7BFDiCBYCQ04G9CWiqbHFP+d0firmOQBKsxzG/Otlr2eD44F6ibxp7DaSRB5EZfnqyPraDOHO6qfQZq8/ps9Z5n5Dgj9w8pIHTgecLRfXa4Q0m31h4aNoG8j91FlbkCQhNdqyVDVvruOUNwrFzOdQk+b4HGScUDablDOqqF5VhrMbvj/3D50nrpgjwuMT1NACOJzhu1dAxjkSwZ8hlBHAVQ0hkOg==;5:EVWzBIiD327NY6HPNIH29aS6NaFfm1GHA5ZHH+ohQGlSzkbX/U8bEDZWbJUFqJNdqNi77EYxdLzhaECH3hlLKw7+plrGxrq8oDzTYCkdiE9vZJ488bwMu282SHD24A/QEBu4FCV/uQ4yu3sJq8PpRpHtKKtu4+M/5d4tpSWfSWk=;7:yIUeNNzmoh1w9+iRqXaJ7ezST4t3VwupMn0g3EYDGW5U7g7Nj7E9kN7k3zy5ocv78lsb/HlNPqHXqq3SoJcwmB1+CchKppSZR3gSinQHsVYBZ/jxtqBEa76kfACUeCSeOnJB7znSErzXruvFi2krP0SaMGiTaFjVIKJB6S/0g1jnHGvcjEN4hLCO4mTIZ67tCerqlgjjz6NIOJbCoqN8nCc+GYXSWYwQ1OBj1LLz9HzaafJS3gZXVVZlGtxfaOza
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;20:AnWYzLG8AEdG6YeN6JcfPhJCiJKPGQBA0UMiobITXkDGcD2eLN+2Hr8dAmrULnIpmoBCidaXJQqCQkkLGDAvXMmlntOXOjLWkOzIVcVk2fMfd5KcEEjX41FpU8H0u8TCcnRvwGQ45MwVqZPfuuzTFceuWMLb6H/4XQ6ye59fU7tsy8n/Um4mIHBF27KYcMk8wPBz/HGpzj57kAVPeNRDIiF0xehfOzjbpIrY0H9avkM2s3kNDCc0A9eM16R9q1cs
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 07 Sep 2018 17:57:40.5982 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 8323c752-601f-4ac5-29c6-08d614eb67e7
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR12MB2684
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Fix sme_populate_pgd() to update page flags if the PMD/PTE entry
already exists.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: kvm@vger.kernel.org
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
Reviewed-by: Borislav Petkov <bp@suse.de>
---
 arch/x86/mm/mem_encrypt_identity.c | 6 +-----
 1 file changed, 1 insertion(+), 5 deletions(-)

diff --git a/arch/x86/mm/mem_encrypt_identity.c b/arch/x86/mm/mem_encrypt_identity.c
index 92265d3..7659e65 100644
--- a/arch/x86/mm/mem_encrypt_identity.c
+++ b/arch/x86/mm/mem_encrypt_identity.c
@@ -154,9 +154,6 @@ static void __init sme_populate_pgd_large(struct sme_populate_pgd_data *ppd)
 		return;
 
 	pmd = pmd_offset(pud, ppd->vaddr);
-	if (pmd_large(*pmd))
-		return;
-
 	set_pmd(pmd, __pmd(ppd->paddr | ppd->pmd_flags));
 }
 
@@ -182,8 +179,7 @@ static void __init sme_populate_pgd(struct sme_populate_pgd_data *ppd)
 		return;
 
 	pte = pte_offset_map(pmd, ppd->vaddr);
-	if (pte_none(*pte))
-		set_pte(pte, __pte(ppd->paddr | ppd->pte_flags));
+	set_pte(pte, __pte(ppd->paddr | ppd->pte_flags));
 }
 
 static void __init __sme_map_range_pmd(struct sme_populate_pgd_data *ppd)

From patchwork Fri Sep  7 17:57:28 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10592429
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 8F25C14BD
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  7 Sep 2018 17:58:14 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 846122B7E4
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  7 Sep 2018 17:58:14 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 76E742B8AA; Fri,  7 Sep 2018 17:58:14 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 86C392B7E4
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  7 Sep 2018 17:58:13 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727762AbeIGWjz (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 7 Sep 2018 18:39:55 -0400
Received: from mail-eopbgr680053.outbound.protection.outlook.com
 ([40.107.68.53]:59456
        "EHLO NAM04-BN3-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726151AbeIGWjy (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 7 Sep 2018 18:39:54 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=/33GApL/ZLaCxzsc0vsz+pMPr8mgVj6VJtr/v0y/t8w=;
 b=k9e47wt1uYoWIpB9W8dhHusb31PgMLBBR7DNZHesFL0Z53dbP6uGjUpyln9Qa3DIlbpcGMxyM9eAsiNaZ/Z3DVKgnMb8uwWxBrkgNQ1J9tz/Dg0XkxM1nTZg/ein9RwcyR/SlLG63MNcW65z0e4LK1FSpBPFjrn/gJufLbH6zRM=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 DM6PR12MB2684.namprd12.prod.outlook.com (2603:10b6:5:4a::33) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1122.16; Fri, 7 Sep 2018 17:57:41 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v6 3/5] x86/mm: add .data..decrypted section to hold shared
 variables
Date: Fri,  7 Sep 2018 12:57:28 -0500
Message-Id: <1536343050-18532-4-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1536343050-18532-1-git-send-email-brijesh.singh@amd.com>
References: <1536343050-18532-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: SN4PR0401CA0004.namprd04.prod.outlook.com
 (2603:10b6:803:21::14) To DM6PR12MB2684.namprd12.prod.outlook.com
 (2603:10b6:5:4a::33)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: f80a6f82-ba4e-4cde-c43f-08d614eb6877
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:DM6PR12MB2684;
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;3:8yu5wHoeoK/GmbKck++EkK9SfnBJig96KfZdtGywwIe+dGJy5MsEChqvrAx33e4B/auwSK4cCjSEF/P4taNlVMJQl1OVpA8y7FNktRCZJU4tyNyhYgbutJHW+eRjV4tdqbagRau8jbuf5/55qqqU1RAdbln/fL5/AQVmzpLriF33RMIOpyC+IAGHzy42PeFs8JuIdJ/Bd9zSURmCwUoLSzkCFaP0++liQdgbAxTHlf9/6dFVCUrCkzQQI4WRwBXn;25:if0QkngTE4fXuRKLnMbRJ1/apXAA5y4oF0Np1+zWDUpKCF+z349jwA1V4d9ffibxKp/cnuO/lLPOD1LbdF0n5LMiorfpGyukfkI5HFXoJ7T25dqJPpGi7gdg95Dj2POP00Onfj6qMwEUE4U+CIKBmGuRCbkWHGPClnZYe7h2vn5tOav/xlDSAkq56wIc9F3eEwXEsH98gPRVWu4YqDE5j3rSVBZSusR+Ac1wDAIaSfBeE7o1tTkz5d4sbLW/R1XAJUVLBSRHzDZOkiQNGMKOmu4sQrsu24X+DpZXQ9sxxQJmCaNYE10GTXBDEg7WHQwgxLxqxczK8GtB4shBdyW1gw==;31:cGmIYazjPLJcsswZF6EaRUcU+Er8Y3BRXPXzLHccP1bi8WH2updvVqvzZuTYowGK84F/stNFVcSkCA07N+wmAW7kE0CBTheWrJ1ZSQpjBYI5VmC+CtTPwso5F3mrbfW5K1TEwMTm+9BXc5neSSbQlva6D2U31uAtEeW3ontYZU+t5GWSncdEHF8Yo5AZVAXR1LcoqFJzTYrNYwGqItrpHpTeqxXmaZff8yKrggTXgug=
X-MS-TrafficTypeDiagnostic: DM6PR12MB2684:
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;20:hqVO1kZ1QTNunBpcaspfAjq7u19Yxoi1d8Mjc/ulqK+xBmYrfXOjjmS4Os15BYgA9a2Nlh+49xdCldg9+Ny96LSk81C+5BPZrJz6+mfQvvo2zzPZprNonz73+10JuAGntsOheFMzA30JNZ7Y/y0u4m2TEDrg3hNBz70qIsoJyluU2z/Unm9PWJ1k3aQpd5AeZJMb6rkzqTfxOBtl9cleV1hwsNnQJZR6kMrgQjnwwJGxPfZ6TryZ03r6mgLudcBZdwjd10EC/8zQhNDdUubawVrAEZH+5msSC8T6NG20ZbIKUP2lWSCTek1AyFHotu4W0XrRyJk3qn+Do/CGSZF1jG2cKroGXeuKPme3rI3XyywtaAF1W5/IEa38sALCsmVd5rgcUMzl0UGAtYmxUr9+yQl25r7dFTz60tdvQxAXmMvQP0J7V+/Jw38SKYBYGO0tdQUns4lwRnfgH3kWNzNIOI7woAIkzaibbwZpHvAx47X0sPmp2iut+tnv8ivWbbSy;4:JBU/vgM4Luu43gIQ9DXSDStozFb0FLBZGdZJfs5rJVoNQtpx6GCbp/VMqK942yc1a+Iiw1Rfu4u3m5c/DtEOZjqEve9HXMAFRR527pJ0VEFuF457U199yZpk2YI3HwdtsdI0mOuEtILL+qULECqN0BXwRaGA7KlOEQLNB9z4FWUX6YfCm1sFe74OwcexJbtenuWxCM2Y17pwV7E87xwlNQm7y8paPxKWn8QfvcBuoaMKrpNOYcepS+4AVU2jjClyK+5VVFKDpKnm1bvZULNxTWuBj9ZJRc6AhkfFDrycquLqBzujslPOKtO8eSMM/trm2CwHrMmqYddwnkqY1grzbCydp/KQGsYXe3b19xT9QeQ/pdZGK1gIf6mLt9MtH1ygk5EGT6mrrb8dqd0jJedZPvxBTsPkjBn/1QgJqi
 XYwnA=
X-Microsoft-Antispam-PRVS: 
 <DM6PR12MB2684B192506BDBF60974899DE5000@DM6PR12MB2684.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(163750095850)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(823301075)(10201501046)(3231311)(944501410)(52105095)(93006095)(93001095)(3002001)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123558120)(20161123562045)(20161123564045)(201708071742011)(7699050);SRVR:DM6PR12MB2684;BCL:0;PCL:0;RULEID:;SRVR:DM6PR12MB2684;
X-Forefront-PRVS: 07880C4932
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(366004)(346002)(376002)(39860400002)(396003)(136003)(189003)(199004)(8936002)(81156014)(81166006)(446003)(575784001)(476003)(2616005)(956004)(86362001)(11346002)(36756003)(486006)(2870700001)(44832011)(2906002)(47776003)(25786009)(50226002)(66066001)(4326008)(6116002)(97736004)(6666003)(7736002)(105586002)(316002)(54906003)(106356001)(76176011)(3846002)(23676004)(7696005)(8676002)(305945005)(52116002)(16526019)(386003)(186003)(68736007)(6486002)(26005)(5660300001)(50466002)(53936002)(478600001)(53416004)(142923001)(101420200001);DIR:OUT;SFP:1101;SCL:1;SRVR:DM6PR12MB2684;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BDM6PR12MB2684=3B23=3ASWa92ia?=
	=?utf-8?q?iHuk0mLA3xLvL+92kKQxYtHmEFxGAbP4wp47KXTJwzXAKbh0q6KqJ/Dr0LksElQ7h?=
	=?utf-8?q?rB7lYVyH6+aDhBn+aBzwQ2XrYidq5LJy49c45PACeAH4H5ENXp1Yz1vRVQT7vJQBf?=
	=?utf-8?q?mol5CN5iOonD9CAMMVuMiUOlv+lxSbFMYZZr3T/oM41gY9g/gxXK00Gpj9UpAfxtY?=
	=?utf-8?q?Gp5d9C2c0/6Bz7AT/3XVzqH5rsKQp1EDXWuiFTqcVLc93Nz5YnBQ5Dj8c50FsJYOw?=
	=?utf-8?q?t9fabUiWB0B/OeLgvwHal1Fakdab5xUfjhAWH9EggvSls1UMxpXvZwv9OiMmkGV7L?=
	=?utf-8?q?zFWyFBIBwnzSaeTuNjRr7Hf2xvddENmQ/cL/zkcO8ohR5eolhJZAUdeeeqiaQadAk?=
	=?utf-8?q?+6pEYzXAcaznPnJhn5iGAdaHH4hYAOi5KPOxOMVa12jhWX/bWiA50uVm9ETqG7ZW8?=
	=?utf-8?q?BVdVkRH/QDns0gRRKTYsc9lbFdK+yAMt4IeTdBkGK/BfxxDy6L84zpBY8V0CcMSQr?=
	=?utf-8?q?8Nlc9Rk1yHkF/Z+rjwrPmck7svMJe8dXLBeHKMEvHPcBEtgzm6G99+DtuUNbozlIs?=
	=?utf-8?q?b7hi+i4jDcmGJNMQ6xc0BSLOEY/mCEnTsDoDVYLrcGD/XtrYVQDnAUPmDc+hyHA6V?=
	=?utf-8?q?vfL6ejj64GFrNt8HQKvtlNwghGt0BZZ5HpTcbwbVrommgyNWQqytssP1hGyv9CRAy?=
	=?utf-8?q?4QLgJjSGSw7Dzy5409prLNWivnzwqy89jUGPVBC26PYWDtPW2ElJjDrKIVxkjxZ1f?=
	=?utf-8?q?DxKlrbDkt/38+shUX86BiBaJHgNR4MrGnd6fP7CnWsCTqSsIw4Z6x1QDsV3aj+Q/f?=
	=?utf-8?q?aRfix1Ao/MS9iqTHGywAza02S1aE4hOM1fcxf4M1MsQkE1NG+LiN02iu8TRJLX7xf?=
	=?utf-8?q?dtJmjrmWjqDeb3nM8Ws/eBcXLg1rmYp42gpb51TdjhKU70cSqC/3WCSdCv+prsP+o?=
	=?utf-8?q?Yn3T2zS8/aBw7Q+ojCTAENvuxmWWsoYyAuX4TlFRfQpZZ0MTD9b4VoB5OuwfA4IY8?=
	=?utf-8?q?uRo+mCSg10bQWdr+aqS5YayHctaOD9bm4ugXCWgZcng+rLhHLFCCBJrcR576n5JFY?=
	=?utf-8?q?R9NyS5vFTdlo5axxO3ni6vKIN/L2TLF7I+rBMRtaZo5UciqR3104Fs/ZWKrFOb3N/?=
	=?utf-8?q?BZvgSaxekBoseCizt1qxzbFJm4NKrQJNKpX8qq4cJJbEFlFOtYuE0DQRh7DsDI/Tp?=
	=?utf-8?q?osCBvaSeo4pL8Pb1I=3D?=
X-Microsoft-Antispam-Message-Info: 
 rWgUAUc3tfJjKhKa6NGQqit5jojqR3jua98kD/ILepx4iZ9abXBib93HfjoLm04yty1XsZjpfYXl6JluuGOftvGSTP4wusCVM1erHqhcEZKlJ/kYAP4mh2mfvfqGCl1pLe+fB2NS514Aj1dtb0GtFPff6jsyV8h18XIfy1TbDQ7noio5gNxh4rsLeKQIDOgBL6NECocal49360tFD1Tlx8LZBZgkbJyBk9xtwDrMJ2mdTFBur5Q6RScAwSkGy6TLwg9ZRfJkUEciRIqJgE+Q19g0Ede9c3tGKHnVeiSS6+d45EYXtdgAuosM5B6Rf3UUaiyZ2JyatJleqro+NrDN7drqqaYMnV+SOVvfBFXdqvg=
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;6:+RFSJ2d8/xmL8r20rebl0NECKDDTZmZxq/VaBwpNoq3VvkBjY41QG76YBfTaBob0UckeaT052JO96z6G+aNc0THbC83VluR1VcS8Z90gWOFEQKOCHyOxi8azGulWFlgHE/MfFEV7FIAxsM0zqhILwzWuRpr1VJTUkIHv452jj9ZFkwIGbMoaQggaKW+1cAfFqflJtGAiZxO9gxa3Jxz6TdoRA/gkCgA6ZOBZU7uV/ayMZnWPFWwa8CgwfDYs+se/EgjPLtgwxMMWTHXmIRUoynIpzirxgr0lnscgEbPHpTcehRs1r9OLyV50ChMAdV6aWLAxTf7OBayi80Jvx5CJ+P//wlwWfyx/5H19qPvNjTXqMCugT5QuOpj/w4C2haKwD1tPxfUGA/Zqeeas044bgFDTqTHDZgt5w2T5osiD1OQFUFtnf4kerzp+rbE9EGIJsdaQ1rfmWfSepvhTr/GLbw==;5:+B6CgkZIo97v3qFRgDjCdwuHH3k+VTRG/31bLSB1kbeNz0YNTQAZjr6D9ErhzOhLgtKVg6EgXbaczialHv1tbh2D0p4hCoPF2iA0X03qDnCW4BGVAuu7o4ZhaOa9pPoZsfAwvsIH5lxV1BEvA3ciXXOMLTogwjPs79mP7gKHYrU=;7:JTfn7n+Ma6wMwOFF/mm7l3AAmYZNZpNlCBOnhWNr9nGgLN83BcWnSw2+05E+6d+izUYcbX6+UC9k0/hxxB2yoq9q9yXtOJrJYvLUVDMdJ29pM3JOMxH/cgsTusc6dYoEmU8vhwjJm9QrXb2U0ap/6tSvd0SB8tykypN2X/UuSR0Hr5yZw414vWXJJnLid+IGUCOqGpE/Jqz2qkEGaEylfGzva+/zTgK6hnjt7pmgJBoPd4epXV2heZ+bFXKU0nkK
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;20:Rg3T58Opph5/cYVDRHLsHlA77sSpcsW2lIovpN3j9WxWPHTrmza5MZYa0wxPfCF3ZBXjXU8oav4oGNSz69dY/zgAaoy3Yf3rBs/nzz4i6PMOlrh2HX4QDuyRYhdtOZ4h8+DIB534y0YVcdm3Kth+Brq2GpnguTiJeTWegXI2Bwj9o2wmTOiwi99/HJL5wl15U6CTOA3hWEq3bIiyfb80u/UX1cCrd8pwfPws4/5Kr7KOLJWpsI4874kK58X5mtZ1
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 07 Sep 2018 17:57:41.5428 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 f80a6f82-ba4e-4cde-c43f-08d614eb6877
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR12MB2684
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

kvmclock defines few static variables which are shared with the
hypervisor during the kvmclock initialization.

When SEV is active, memory is encrypted with a guest-specific key, and
if guest OS wants to share the memory region with hypervisor then it must
clear the C-bit before sharing it. Currently, we use
kernel_physical_mapping_init() to split large pages before clearing the
C-bit on shared pages. But it fails when called from the kvmclock
initialization (mainly because memblock allocator is not ready that early
during boot).

Add a __decrypted section attribute which can be used when defining
such shared variable. The so-defined variables will be placed in the
.data..decrypted section. This section is mapped with C=0 early
during boot, we also ensure that the initialized values are updated
to match with C=0 (i.e perform an in-place decryption). The
.data..decrypted section is PMD-aligned and sized so that we avoid
the need to split the large pages when mapping the section.

The sme_encrypt_kernel() was used to perform the in-place encryption
of the Linux kernel and initrd when SME is active. The routine has been
enhanced to decrypt the .data..decrypted section for both SME and SEV
cases.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: kvm@vger.kernel.org
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/include/asm/mem_encrypt.h |  6 +++
 arch/x86/kernel/head64.c           | 11 +++++
 arch/x86/kernel/vmlinux.lds.S      | 17 +++++++
 arch/x86/mm/mem_encrypt_identity.c | 94 ++++++++++++++++++++++++++++++++------
 4 files changed, 113 insertions(+), 15 deletions(-)

diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h
index c064383..802b2eb 100644
--- a/arch/x86/include/asm/mem_encrypt.h
+++ b/arch/x86/include/asm/mem_encrypt.h
@@ -52,6 +52,8 @@ void __init mem_encrypt_init(void);
 bool sme_active(void);
 bool sev_active(void);
 
+#define __decrypted __attribute__((__section__(".data..decrypted")))
+
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
 #define sme_me_mask	0ULL
@@ -77,6 +79,8 @@ early_set_memory_decrypted(unsigned long vaddr, unsigned long size) { return 0;
 static inline int __init
 early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0; }
 
+#define __decrypted
+
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
 /*
@@ -88,6 +92,8 @@ early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0;
 #define __sme_pa(x)		(__pa(x) | sme_me_mask)
 #define __sme_pa_nodebug(x)	(__pa_nodebug(x) | sme_me_mask)
 
+extern char __start_data_decrypted[], __end_data_decrypted[];
+
 #endif	/* __ASSEMBLY__ */
 
 #endif	/* __X86_MEM_ENCRYPT_H__ */
diff --git a/arch/x86/kernel/head64.c b/arch/x86/kernel/head64.c
index 8047379..af39d68 100644
--- a/arch/x86/kernel/head64.c
+++ b/arch/x86/kernel/head64.c
@@ -112,6 +112,7 @@ static bool __head check_la57_support(unsigned long physaddr)
 unsigned long __head __startup_64(unsigned long physaddr,
 				  struct boot_params *bp)
 {
+	unsigned long vaddr, vaddr_end;
 	unsigned long load_delta, *p;
 	unsigned long pgtable_flags;
 	pgdval_t *pgd;
@@ -234,6 +235,16 @@ unsigned long __head __startup_64(unsigned long physaddr,
 	/* Encrypt the kernel and related (if SME is active) */
 	sme_encrypt_kernel(bp);
 
+	/* Clear the memory encryption mask from the .data..decrypted section. */
+	if (mem_encrypt_active()) {
+		vaddr = (unsigned long)__start_data_decrypted;
+		vaddr_end = (unsigned long)__end_data_decrypted;
+		for (; vaddr < vaddr_end; vaddr += PMD_SIZE) {
+			i = pmd_index(vaddr);
+			pmd[i] -= sme_get_me_mask();
+		}
+	}
+
 	/*
 	 * Return the SME encryption mask (if SME is active) to be used as a
 	 * modifier for the initial pgdir entry programmed into CR3.
diff --git a/arch/x86/kernel/vmlinux.lds.S b/arch/x86/kernel/vmlinux.lds.S
index 8bde0a4..4cb1064 100644
--- a/arch/x86/kernel/vmlinux.lds.S
+++ b/arch/x86/kernel/vmlinux.lds.S
@@ -65,6 +65,21 @@ jiffies_64 = jiffies;
 #define ALIGN_ENTRY_TEXT_BEGIN	. = ALIGN(PMD_SIZE);
 #define ALIGN_ENTRY_TEXT_END	. = ALIGN(PMD_SIZE);
 
+/*
+ * This section contains data which will be mapped as decrypted. Memory
+ * encryption operates on a page basis. Make this section PMD-aligned
+ * to avoid spliting the pages while mapping the section early.
+ *
+ * Note: We use a separate section so that only this section gets
+ * decrypted to avoid exposing more than we wish.
+ */
+#define DATA_DECRYPTED						\
+	. = ALIGN(PMD_SIZE);					\
+	__start_data_decrypted = .;				\
+	*(.data..decrypted);					\
+	. = ALIGN(PMD_SIZE);					\
+	__end_data_decrypted = .;				\
+
 #else
 
 #define X86_ALIGN_RODATA_BEGIN
@@ -74,6 +89,7 @@ jiffies_64 = jiffies;
 
 #define ALIGN_ENTRY_TEXT_BEGIN
 #define ALIGN_ENTRY_TEXT_END
+#define DATA_DECRYPTED
 
 #endif
 
@@ -171,6 +187,7 @@ SECTIONS
 		/* rarely changed data like cpu maps */
 		READ_MOSTLY_DATA(INTERNODE_CACHE_BYTES)
 
+		DATA_DECRYPTED
 		/* End of data section */
 		_edata = .;
 	} :data
diff --git a/arch/x86/mm/mem_encrypt_identity.c b/arch/x86/mm/mem_encrypt_identity.c
index 7659e65..08e70ba 100644
--- a/arch/x86/mm/mem_encrypt_identity.c
+++ b/arch/x86/mm/mem_encrypt_identity.c
@@ -51,6 +51,8 @@
 				 (_PAGE_PAT | _PAGE_PWT))
 
 #define PMD_FLAGS_ENC		(PMD_FLAGS_LARGE | _PAGE_ENC)
+#define PMD_FLAGS_ENC_WP	((PMD_FLAGS_ENC & ~_PAGE_CACHE_MASK) | \
+				 (_PAGE_PAT | _PAGE_PWT))
 
 #define PTE_FLAGS		(__PAGE_KERNEL_EXEC & ~_PAGE_GLOBAL)
 
@@ -59,6 +61,8 @@
 				 (_PAGE_PAT | _PAGE_PWT))
 
 #define PTE_FLAGS_ENC		(PTE_FLAGS | _PAGE_ENC)
+#define PTE_FLAGS_ENC_WP	((PTE_FLAGS_ENC & ~_PAGE_CACHE_MASK) | \
+				 (_PAGE_PAT | _PAGE_PWT))
 
 struct sme_populate_pgd_data {
 	void    *pgtable_area;
@@ -231,6 +235,11 @@ static void __init sme_map_range_encrypted(struct sme_populate_pgd_data *ppd)
 	__sme_map_range(ppd, PMD_FLAGS_ENC, PTE_FLAGS_ENC);
 }
 
+static void __init sme_map_range_encrypted_wp(struct sme_populate_pgd_data *ppd)
+{
+	__sme_map_range(ppd, PMD_FLAGS_ENC_WP, PTE_FLAGS_ENC_WP);
+}
+
 static void __init sme_map_range_decrypted(struct sme_populate_pgd_data *ppd)
 {
 	__sme_map_range(ppd, PMD_FLAGS_DEC, PTE_FLAGS_DEC);
@@ -378,7 +387,10 @@ static void __init build_workarea_map(struct boot_params *bp,
 	ppd->paddr = workarea_start;
 	ppd->vaddr = workarea_start;
 	ppd->vaddr_end = workarea_end;
-	sme_map_range_decrypted(ppd);
+	if (sev_active())
+		sme_map_range_encrypted(ppd);
+	else
+		sme_map_range_decrypted(ppd);
 
 	/* Flush the TLB - no globals so cr3 is enough */
 	native_write_cr3(__native_read_cr3());
@@ -435,16 +447,27 @@ static void __init build_workarea_map(struct boot_params *bp,
 		sme_map_range_decrypted_wp(ppd);
 	}
 
-	/* Add decrypted workarea mappings to both kernel mappings */
+	/*
+	 * When SEV is active, kernel is already encrypted hence mapping
+	 * the initial workarea_start as encrypted. When SME is active,
+	 * the kernel is not encrypted hence add decrypted workarea
+	 * mappings to both kernel mappings.
+	 */
 	ppd->paddr = workarea_start;
 	ppd->vaddr = workarea_start;
 	ppd->vaddr_end = workarea_end;
-	sme_map_range_decrypted(ppd);
+	if (sev_active())
+		sme_map_range_encrypted(ppd);
+	else
+		sme_map_range_decrypted(ppd);
 
 	ppd->paddr = workarea_start;
 	ppd->vaddr = workarea_start + decrypted_base;
 	ppd->vaddr_end = workarea_end + decrypted_base;
-	sme_map_range_decrypted(ppd);
+	if (sev_active())
+		sme_map_range_encrypted(ppd);
+	else
+		sme_map_range_decrypted(ppd);
 
 	wa->kernel_start = kernel_start;
 	wa->kernel_end = kernel_end;
@@ -487,28 +510,69 @@ static void __init teardown_workarea_map(struct sme_workarea_data *wa,
 	native_write_cr3(__native_read_cr3());
 }
 
+static void __init decrypt_shared_data(struct sme_workarea_data *wa,
+				       struct sme_populate_pgd_data *ppd)
+{
+	unsigned long decrypted_start, decrypted_end, decrypted_len;
+
+	/* Physical addresses of decrypted data section */
+	decrypted_start = __pa_symbol(__start_data_decrypted);
+	decrypted_end = ALIGN(__pa_symbol(__end_data_decrypted), PMD_PAGE_SIZE);
+	decrypted_len = decrypted_end - decrypted_start;
+
+	if (!decrypted_len)
+		return;
+
+	/* Add decrypted mapping for the section (identity) */
+	ppd->paddr = decrypted_start;
+	ppd->vaddr = decrypted_start;
+	ppd->vaddr_end = decrypted_end;
+	sme_map_range_decrypted(ppd);
+
+	/* Add encrypted-wp mapping for the section (non-identity) */
+	ppd->paddr = decrypted_start;
+	ppd->vaddr = decrypted_start + wa->decrypted_base;
+	ppd->vaddr_end = decrypted_end + wa->decrypted_base;
+	sme_map_range_encrypted_wp(ppd);
+
+	/* Perform in-place decryption */
+	sme_encrypt_execute(decrypted_start,
+			    decrypted_start + wa->decrypted_base,
+			    decrypted_len, wa->workarea_start,
+			    (unsigned long)ppd->pgd);
+
+	ppd->vaddr = decrypted_start + wa->decrypted_base;
+	ppd->vaddr_end = decrypted_end + wa->decrypted_base;
+	sme_clear_pgd(ppd);
+}
+
 void __init sme_encrypt_kernel(struct boot_params *bp)
 {
 	struct sme_populate_pgd_data ppd;
 	struct sme_workarea_data wa;
 
-	if (!sme_active())
+	if (!mem_encrypt_active())
 		return;
 
 	build_workarea_map(bp, &wa, &ppd);
 
-	/* When SEV is active, encrypt kernel and initrd */
-	sme_encrypt_execute(wa.kernel_start,
-			    wa.kernel_start + wa.decrypted_base,
-			    wa.kernel_len, wa.workarea_start,
-			    (unsigned long)ppd.pgd);
-
-	if (wa.initrd_len)
-		sme_encrypt_execute(wa.initrd_start,
-				    wa.initrd_start + wa.decrypted_base,
-				    wa.initrd_len, wa.workarea_start,
+	/* When SME is active, encrypt kernel and initrd */
+	if (sme_active()) {
+		sme_encrypt_execute(wa.kernel_start,
+				    wa.kernel_start + wa.decrypted_base,
+				    wa.kernel_len, wa.workarea_start,
 				    (unsigned long)ppd.pgd);
 
+		if (wa.initrd_len)
+			sme_encrypt_execute(wa.initrd_start,
+					    wa.initrd_start + wa.decrypted_base,
+					    wa.initrd_len, wa.workarea_start,
+					    (unsigned long)ppd.pgd);
+	}
+
+	/* Decrypt the contents of .data..decrypted section */
+	decrypt_shared_data(&wa, &ppd);
+
 	teardown_workarea_map(&wa, &ppd);
 }
 

From patchwork Fri Sep  7 17:57:29 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10592427
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 589B114BD
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  7 Sep 2018 17:58:12 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4DA582B7E4
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  7 Sep 2018 17:58:12 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 3FE5C2B8AA; Fri,  7 Sep 2018 17:58:12 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id CDE492B7E4
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  7 Sep 2018 17:58:07 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727798AbeIGWj4 (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 7 Sep 2018 18:39:56 -0400
Received: from mail-eopbgr680053.outbound.protection.outlook.com
 ([40.107.68.53]:59456
        "EHLO NAM04-BN3-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726365AbeIGWjz (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 7 Sep 2018 18:39:55 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=F6NWRmT1MHxuQGpUxYzj4VuHOnSWLDZMxzj86WU5iPI=;
 b=GYPPmWo2SsB/N5nrG0eGhJ2yTBlvYm6gcRm2rKHZFih1HJUNMUW0P+yb1waVtbTCIZqCPj0m0ucYOp29BcseV4WdkfqANVmeu6s88MIv8Dnf2bgRpqCMt+0szjCa7uWxZEcB4jV4JRLkg8swIxQne2cJ9MfDxXB666QV7/CqHWU=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 DM6PR12MB2684.namprd12.prod.outlook.com (2603:10b6:5:4a::33) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1122.16; Fri, 7 Sep 2018 17:57:42 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v6 4/5] x86/kvm: use __decrypted attribute in shared variables
Date: Fri,  7 Sep 2018 12:57:29 -0500
Message-Id: <1536343050-18532-5-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1536343050-18532-1-git-send-email-brijesh.singh@amd.com>
References: <1536343050-18532-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: SN4PR0401CA0004.namprd04.prod.outlook.com
 (2603:10b6:803:21::14) To DM6PR12MB2684.namprd12.prod.outlook.com
 (2603:10b6:5:4a::33)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 4fc228f8-ebac-4505-116a-08d614eb691c
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:DM6PR12MB2684;
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;3:xSgBWy/zVrbo4/s20I4Dcz9nNKMKIPZVvUVgsxi/uUeynS0fftPq44MBvDIRmRXU59J6w9AOKH9KIG7UreFdNgwKLdjb/9EvtlWnODdygCZ0lvlH99wbU9TQrV2ZSnFK4f5b69nEA3E+xKYgUeHMiH+46JoC66BiJ8UqFBKRnyxwqFuVW35cDCGFzoVjjH/PXY+cnXvc4wlTJFoqLTJrjpJCEogaywjqItb85U7xD+ScC4L1PC64SCKK2CB0aNcH;25:+l9ny/O9s4OpHuX5/XFvWR9EvjUyjxRBP+mkK5kYhHU/moTBeP85VdgoWKAHrYB6AVFTSCbrcykpA0eHVimyJJLSAY422Iz1ANYXg8vvAGKXe4AYNjk8qgEjZx3JTAU6Cf42rrdL7pFQyBAOozLbfVLMsizBfHHJ36DTXDucgGg4lwoMz+IrogL3uWabhLGy9Sr4ZMzhFo5/BqOxfa20jdbCjx4j9BC4SOK/4WBl5n+LFcrJ38D0Yw1cMZ2JDo82VXKWklW4sGLvNkBqlGxOVJQyMGP5+D9cuTz5z+2AWjg0sPDCL3VmGT2okiwpYblKvmMnCZAfEpm/+N+X5dvmug==;31:/fuWaloqrHNDD2zyu0Z8pARGmP49Q1vADn6XuiO16eKoDZNGO2O+vunwVv24vRGv6ChgmCxooM+KF2AJviACGT/8Sa9AZuZWLtcFnM7Bw8w0mF0lUQKobBGGV2R5yIO+n8uMSyubiE/Q8/eZNmdzDjxrlbOr54RRUwyNu/rIKQEPWVzASNlGoQxYo0CBgmzQAPdaf+kpApQgJgHJsM8uixcO3ezLhueUXFBl41TWSRs=
X-MS-TrafficTypeDiagnostic: DM6PR12MB2684:
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;20:vdYuPy6uTWeI8nkmvU/XfpLNQmQorQLMdaosfCXvtD/sg6nxhOoRZsg2LAx4330Dv59XwTSi8roWTaLPMb1Pm1a56RhnoXuMq8WI4RDMQvPvekFlFOJ2UAFYpXYSAtc7A6pyBhrvE1vY+UFQMMPrGZeFf6w7fGH9J+lWC6x/yAeuMskpCYMKr2+5qCYY8Q3dJWCQR+YKzdcKTOBkksJcQ3dxbNCkM0yHUjhi56z7BiXyAJTRzqLgbvH/hOtyn3nkRXbctYlZemA+XjiM5bykxBSCdSu3lE1H8aoVWym7fdlKtuvWSq/Rm8txYJuStrPudm+zkElLRmLe4QJB+F1OHrZPm/oYa7nEc5x5JLjoBEX8fmx+S1YDpUNw62BdAP/xQvitPBKSEeB0huvMAtaHJcD1l+N7LrPwgqTNH00X8SBFPLR1eDUKpYdgstxlNsybeyxd0R2+dLdkvqAFXEzePXD8DD1sc/miTVOmje7flbH/ydxujy072XS/mJ7vXbZd;4:m4IXGEE2Fo/uwfWHexEzUGdFoK5pe/NcesAADYk35Fj2P4xBhndd8iL0crxrT6OU5PRFmtCzg9Kx6OSkHL5MvgSYNvnKrBjRDzoSyJjGimbfnIkR7v+fceZm3edEanyCxO8YSoZNRo7gYFTQuNe/lUUVDmUq+tmofrYoGldHrg1Du1MN47FHPuw2ZFDEnCjv1kDnsUbjhe2d9SDg/4DUom2SUm2lg7npr7o9vtgEMrAZqUOKfqFhWZ+0DoLc+Jl4QDqnB83+xjgeNBbO168W5G89U+g9OT6RTrdzy2H5/lMtQBoYMvYZOOwsBO9YejIdL8QXu1Om+x488FFk+O1jLshKeQPDgVw3Emx5JrzbL4nWrW+NJUgkGD+mxtswAhLy
X-Microsoft-Antispam-PRVS: 
 <DM6PR12MB26843555F32E5B31094880A1E5000@DM6PR12MB2684.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(823301075)(10201501046)(3231311)(944501410)(52105095)(93006095)(93001095)(3002001)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123558120)(20161123562045)(20161123564045)(201708071742011)(7699050);SRVR:DM6PR12MB2684;BCL:0;PCL:0;RULEID:;SRVR:DM6PR12MB2684;
X-Forefront-PRVS: 07880C4932
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(366004)(346002)(376002)(39860400002)(396003)(136003)(189003)(199004)(14444005)(8936002)(81156014)(81166006)(446003)(476003)(2616005)(956004)(86362001)(11346002)(36756003)(486006)(2870700001)(44832011)(2906002)(47776003)(25786009)(50226002)(66066001)(4326008)(6116002)(97736004)(6666003)(7736002)(105586002)(316002)(54906003)(106356001)(76176011)(3846002)(23676004)(7696005)(8676002)(305945005)(52116002)(16526019)(386003)(186003)(68736007)(6486002)(26005)(5660300001)(50466002)(53936002)(478600001)(53416004);DIR:OUT;SFP:1101;SCL:1;SRVR:DM6PR12MB2684;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BDM6PR12MB2684=3B23=3ALuuskB+?=
	=?utf-8?q?6BwACHn/0CFuwygpMbJ7059+xkVfHflUmEHLoH0ddR3/wgiAcgOEhbT+nNKj5XSxI?=
	=?utf-8?q?dmA67gTlv3r7vk7+KDlsWRQu6jKpC2wn57T+qxMrs9ycg60L2YT3r8PnrYw/KiFbU?=
	=?utf-8?q?yuvkMFXoNAIjfNsa9NX8Xy5g3yDD0Ho4ODD5IqKOLVIpSl4hWGgZPltjxXk8AtYBX?=
	=?utf-8?q?OLFI6Qu4kDnVo/Vn0ttQfteraRxZWWApzRBFXrK2cg4m0GNFBP0dh6NTGgn96wurh?=
	=?utf-8?q?vhFe/gC3Z/EyAOu7rJpXugt564BOUcmQ1KawwZ/WBpF+8SEmfg62Q5YQ/wKPin0hu?=
	=?utf-8?q?+HTki1sMCajDuvnxm484AaMN9rdYw6CR0nKSFdLRVnSHKDiNbd967j440L7vPZlD1?=
	=?utf-8?q?l5c84O6riC3APKDvGK7sRSiFyr/VIo6BYwUKJCUU5tndr5ka80a4qYSkXRHjbIxGG?=
	=?utf-8?q?5q/eKEuKsUXPKDu2L53wxqWexafN5J9tHLv02w+lKaDPY80zX5wHJ9RyibgH0GWh3?=
	=?utf-8?q?7xIsxyNyNLyp/vaTIG0xvOGcQDZUT+G1Lq8VKz3BfhkoS6WozNp26oBqXcVcin6xc?=
	=?utf-8?q?VFoE0f90M5yUAaAbk7dwHTMTQLAD8BfMb46GTDoRBc3gj9Dql4CtF71my0ojdo+X9?=
	=?utf-8?q?UyEsGAjHy0Y4KwsC4AwwrrmQOfhACwcfmj1UKTqumhX/CnC8p1UrkWBBIUh1SkzRf?=
	=?utf-8?q?W6V/SK4FyV4fHXvGg/bpROFl5cmY/nDRDuxxv9pIJRc/s18OJhsKri+ANo4TiXkzc?=
	=?utf-8?q?EHv8eXHEa0EAYCbwQV4q4hoBb5SbtxqGMPnVEnauEbTDgpxcZW7fb8NpNPXV8N4oA?=
	=?utf-8?q?6/5PuEYFMRnfvZtFOAzLTcRYlfniJpnQujb3NoPvk50IRsxEM6qAEQTlnVQFlSrIJ?=
	=?utf-8?q?/R2pk2l+ejZdubFQTDFvQZALpmqcMfEq2TzFTWiUd1SOYzwTqjOFB59Evml3FnSvf?=
	=?utf-8?q?7AJ4WIKyWtn7Z/dUvGQGk6i3MvCm+kitZGqGBJAfQE2dUZ/emuFbAx16ZHLPkFNmR?=
	=?utf-8?q?kcT+exVuD+ykBT2hstwr726TwXLEsB54ODnN/qgR8Y2PK1m3S28qNQemmu7/SMRpC?=
	=?utf-8?q?Fu2HPj2A9bAbD5ZsO4gL+EmwT22tiD3st4p62MIkOhy+1FZJf+sP+utT6urpHJpBq?=
	=?utf-8?q?Ya5rFWXsw1/KeJ84/M9cLc6FSeEpTEx3mAbDW9q?=
X-Microsoft-Antispam-Message-Info: 
 p1NE2tYIbDuhOjHjhl4zU5s2v5JG7kslsYkrb9YCFdWa29EsvMzqtS4k5EWmpKw1W91bE5+f/sfvJChrthNkq79R0C7TS7KzYfENHMqjBXZxS8OYyMGhO4e8nffKVbLBHBfsCiT48r4jyQQHk4v9HuJdATpbQmxuCtUSfW/Jlu/riTW6jVVnt6q1FNzR9kQ5bRc1MdJWXsz39WyRBOgteH1tFHq7QvRtPAi+Lo6tfTGp/YsBV8EAJDsoc3L9uNMIU18DfgFuqNo4c+tPhoClt3pI2TZJitlSbr6PaC/7+m700oXDVRkVqqOWBexMqZp/6cSEUzi+96zUjkK8bY54qMbmJcHwtdyOwWG5gwO80mA=
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;6:KvDqsT1e6R+VycoCkPjD+yH2TviADZ7gzCQNow0MMKS06qwvVX+wTnQ+q6PTUyMpurB51o0//rsEQnPdfIqCvJTsbK5Uo7HC97a5Hmc3ds44hi4bnzEj+3OuclmsXYoMXnOj2je3FsqRMepjb9KOgV6WgaBLZeYpssrIj0CETsoIqc1huFckLZvI1SVmrrKM7S8eE95nOjtURNjgMQiL/x3wyM9RSeNcgYWX9DFhKJaHyT464vRnCBuS9Tr0EICGdN4olp1KOTcT6DRhPR7a1Cb6IKOOtnthjiz7MfK3cy/8V+2eCPgQOGYbrYQqBvBoNzPFl1TrFckznXPxMhJVboVoCdKcQIGPuBX8I/UVEtDQ25O/bJVz1SN4hfkKfvMgDVnLESD+zyRy3dclz8Heuzh4JSPbj9C13RZDYzosqd/uGQSZOZVY0JgToOECd+SPcebCb+jmZ5d43Oo/dslV4g==;5:TLZfW1ftTwqG0VgS/ILeosKU1zIEBzIU/jF2HFczipmd4OlG42KS2z13IxG6Aub5M0+ap0zdyIwSWjVyuemt+zezTtwbaO5yoyOg6SYKtv3gWS1sRF7RoK7lpo1G5zZE2313ga4hbvdYuwidhOl5kr1++AgdirV1Jbh5a1H+z7A=;7:MSnk02YQkTA42FUfr8OPmnf0QvMF+EzW/EXpZyFqEZ/07vRW4bKaSZp3t/1Sz1U3+TKIPE1I70ZdgkMXtt3yBixQcmwqrjI4/hLol90BAH7INiwFG2RuZOM/cRl0v5Ksj0QXvbL5fLsTnRyvgdMP4F8SuofujsExub+kWepp8pdKCIu9OOYzW/ceFmQCuOrvSRfE25hI4sTNhv579aWfdoANvT5IJtilbS1xlHdP1I/3CBojTPcIekrQCHmFkT7d
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;20:nSYhT/GI5zeBKmEPuvp1b5qOaytWfZge+2sn1e1MMWPAjp34sRaokHO86Q2R17ORQFbzwtsbZ6BVgz8R1NZHM5J4iE+Jvm8WzkM3iuBwmFmm+wgDQI/mYdpTGQVVjlMK3pLUjxa0GOYQNOIZ/amicdDR1thnnDVG8tE0w1mA4l9nhWpZBt+ncST4OlULWCLLEWYJ5tNrmG9hC7wFgDbarIeuDJEPMd3/eYgKH3Jt2azOyloHHCoh8q+HzI10GnqP
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 07 Sep 2018 17:57:42.6206 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 4fc228f8-ebac-4505-116a-08d614eb691c
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR12MB2684
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Commit: 368a540e0232 (x86/kvmclock: Remove memblock dependency)
caused SEV guest regression. When SEV is active, we map the shared
variables (wall_clock and hv_clock_boot) with C=0 to ensure that both
the guest and the hypervisor are able to access the data. To map the
variables we use kernel_physical_mapping_init() to split the large pages,
but splitting large pages requires allocating a new PMD, which fails now
that kvmclock initialization is called early during boot.

Recently we added a special .data..decrypted section to hold the shared
variables. This section is mapped with C=0 early during boot. Use
__decrypted attribute to put the wall_clock and hv_clock_boot in
.data..decrypted section so that they are mapped with C=0.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
Fixes: 368a540e0232 ("x86/kvmclock: Remove memblock dependency")
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: kvm@vger.kernel.org
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
Reviewed-by: Borislav Petkov <bp@suse.de>
Acked-by: Paolo Bonzini <pbonzini@redhat.com>
---
 arch/x86/kernel/kvmclock.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/arch/x86/kernel/kvmclock.c b/arch/x86/kernel/kvmclock.c
index 1e67646..376fd3a 100644
--- a/arch/x86/kernel/kvmclock.c
+++ b/arch/x86/kernel/kvmclock.c
@@ -61,8 +61,8 @@ early_param("no-kvmclock-vsyscall", parse_no_kvmclock_vsyscall);
 	(PAGE_SIZE / sizeof(struct pvclock_vsyscall_time_info))
 
 static struct pvclock_vsyscall_time_info
-			hv_clock_boot[HVC_BOOT_ARRAY_SIZE] __aligned(PAGE_SIZE);
-static struct pvclock_wall_clock wall_clock;
+			hv_clock_boot[HVC_BOOT_ARRAY_SIZE] __decrypted __aligned(PAGE_SIZE);
+static struct pvclock_wall_clock wall_clock __decrypted;
 static DEFINE_PER_CPU(struct pvclock_vsyscall_time_info *, hv_clock_per_cpu);
 
 static inline struct pvclock_vcpu_time_info *this_cpu_pvti(void)

From patchwork Fri Sep  7 17:57:30 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10592425
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 01C2B921
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  7 Sep 2018 17:58:04 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EB5B92B802
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  7 Sep 2018 17:58:03 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id DF9682B8B2; Fri,  7 Sep 2018 17:58:03 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3563C2B802
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  7 Sep 2018 17:58:03 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727824AbeIGWj6 (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 7 Sep 2018 18:39:58 -0400
Received: from mail-eopbgr680053.outbound.protection.outlook.com
 ([40.107.68.53]:59456
        "EHLO NAM04-BN3-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727788AbeIGWj5 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 7 Sep 2018 18:39:57 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=a2m8HRzQFzN854GkvPKpkwzXXcI/+sRpyoysssIAjZU=;
 b=rWowcCwdaY/aUMVR/iF5NNw89k49FPnz8MgcpXagKijDJLHuMszkXEUmRoAp1SugGXoNbS279c+GRFWBKA6M1ydPMaBhzBHKM9Gbp/zvv34yev7ZrzdDgB9WZBn9Ee1Y/HwqgBP2O1C5ZMf9wXqIjfT8R/it+zyGQc+RmzeiyZ8=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 DM6PR12MB2684.namprd12.prod.outlook.com (2603:10b6:5:4a::33) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1122.16; Fri, 7 Sep 2018 17:57:43 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v6 5/5] x86/kvm: Avoid dynamic allocation of pvclock data when
 SEV is active
Date: Fri,  7 Sep 2018 12:57:30 -0500
Message-Id: <1536343050-18532-6-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1536343050-18532-1-git-send-email-brijesh.singh@amd.com>
References: <1536343050-18532-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: SN4PR0401CA0004.namprd04.prod.outlook.com
 (2603:10b6:803:21::14) To DM6PR12MB2684.namprd12.prod.outlook.com
 (2603:10b6:5:4a::33)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 51e8a1df-e131-4bc6-b169-08d614eb69d2
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:DM6PR12MB2684;
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;3:HcHogJlCBHFh8CNPlOqMurGLbJqUWY2tKVyYG1yuePyPTiNC+9xv3AfyqgZLhbGxuq9a55bdvSYb5ghphMK4+YMO7pXPqn73+gOvhIxhOVMj5r0S+fJPdvKN8XmgALKWTqK3eZDy2sMIUa+1ppU9DKSGVpN+F3hTl0gxx6OYn0gPTvhP3HEk5fSueaBEOD1o/wVJM8pU3EuGKHcXMX6o4mN4Vd/F7MZ0RhPQgTqvXFE1jWEGNQqOPOihksLQHbYj;25:yTM7v+/YrZJ4zcRkKDVZBTFFSDOTwPIawpc+tPw3ha0GbKKZW8FUcSgV6wcISKDNc+Qhv748T7NHdEUnWV1rA0eDGYKBHwoQxxJjCqd1Xzl+JEegg3cYsznk4+gqIztYzwJvqIGAS9krPR2iThilhFe7KHHloi8RBz/GGRbqDgCNAceCffYBkK4XneoxR/rGCss1zw5Jb+Ugk39mWJj2KNhwa2nvaCBcXkfJAjnbOXcX+JbK3AFNsQT3CzAd+BFuLPkeixSE2wUDXdZ3OE/2GvYxnYepCDp6tCWg9CP8OQpQ+bKvBScfn2jGo0i+2zDxlUvMHEpII9a6ProgNaBJMw==;31:Vkt3srfBPd7g86as0Csum2JmnPBfMKdEoWdgueAmElfzYk1G54NTrsKIzgdb6R4L1bGwLukoWZ4YEAqSQxeBLMPGmJ5J8lcka3RJMFH6SOoD0TwgRExxQb1LfqlSvFwmKNnSsgZUeUVwLnUC1860/8lrSHKjKzyrHwYOoQ6WQMIw4luwcghmb2mukda1NzaHlQMLFDanr6FhbVOg262LS2KMc2k1xKkz1IIKeAcmMYY=
X-MS-TrafficTypeDiagnostic: DM6PR12MB2684:
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;20:l92uAN975segWTJtejfcExOed0DASgPkDZ3W4eXWTAy7A6s41JF0pxSPO3r4y/m35ERZmpNoyTOwuJSDY8i51DG5vevfWsR4Rlu/Ln3o37tN23IBr50c2/+OibL66bymB6csfJwr76KRFYBuuYzLVKouJWcjgKRSTRaf8z0mc+RS1wFh+KosOR0bqnFmNa18VpaETixH378hWyynzpaQPA3FFEoCKv3VEUZX/zeZgtv3Fv7S6S8cpXSzVsHcSigyFkhs5PEA0J+nl7ez6m5w62MSED4khI/xwTOYBpO7GJhGZTlitUt1N9+uYx3jX+dxgGZRMCLIj+rlEKrU5Pc5R0ht3N4+KaiwAJTvnTWgV2Fut7msdcYInebI9cKXzAqF5lCQMzXmnbCyPEg4bA8rcKOBvFV1XNr3Pu/H/o5XsT/Vvx2Kin1mM0JCnvb2fNvsVsxOq68l9dUfg0twDZSd0T+FI6aBTX/BIy49boWM+udARJdanllPhhXUrmwRDT1O;4:x2yVW9M6JXOK+PYXgIxsVIIo5FoeTHDo8/CmXCcaGoqq+SjkPLtPX6zjMhyEZOREUwslEWhG2XIg3WyJIpznQDwludK842Stxd4+Vi4bDrHpWHbi/4MfJh6aPUrpDFy6UJ/1Zxp7BqkxL/pUZD9dtyRJ002ATquP2lfHLZgo1u86T6WcBNsA14Zhc5JvgxMZfqP24d1F6bUujuX6x+U8PBvTSNZwLWs1kHJOE9b/qneehgooyeiLHMWOgazttVABgeYefY0MFw0HdM8aCy+ywBLugNixXYlE52ze8rSNKGbtemgoIWd9lUwXDTsYVMFzkANeFm27ESBMTgAaOrfm+1w8DKs7JLGMxwKLemuBIPWb4sWQRcaIzBYy+417xMxx
X-Microsoft-Antispam-PRVS: 
 <DM6PR12MB26849A5225EE5EE15A5438D4E5000@DM6PR12MB2684.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(823301075)(10201501046)(3231311)(944501410)(52105095)(93006095)(93001095)(3002001)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123558120)(20161123562045)(20161123564045)(201708071742011)(7699050);SRVR:DM6PR12MB2684;BCL:0;PCL:0;RULEID:;SRVR:DM6PR12MB2684;
X-Forefront-PRVS: 07880C4932
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(366004)(346002)(376002)(39860400002)(396003)(136003)(189003)(199004)(8936002)(81156014)(81166006)(446003)(476003)(2616005)(956004)(86362001)(11346002)(36756003)(486006)(2870700001)(44832011)(2906002)(47776003)(25786009)(50226002)(66066001)(4326008)(6116002)(97736004)(6666003)(7736002)(105586002)(316002)(54906003)(106356001)(76176011)(3846002)(23676004)(7696005)(8676002)(305945005)(52116002)(16526019)(386003)(186003)(68736007)(6486002)(26005)(5660300001)(50466002)(53936002)(478600001)(53416004);DIR:OUT;SFP:1101;SCL:1;SRVR:DM6PR12MB2684;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BDM6PR12MB2684=3B23=3AcLHwj1G?=
	=?utf-8?q?q/cL1bo/IbYl+ISgD8ltSl51wBW0LB2B0XCUD0tLxgp1WEA+EvkKg+0LAJL4qAdp+?=
	=?utf-8?q?qAd1HtO/Z7zC22bXHybQa/rftRrDtcs+bXDDiZT/EwMEdUa8NZLt1zWqf5YzJTRr0?=
	=?utf-8?q?SctK1SYfIBgZlAhRC6y1Njjeliisn5w8lxLo69fbPqERjQtAnta8zNisT3pVyPJIz?=
	=?utf-8?q?76MolDGi8P6mm1DUskqHCrQDVMTYSp3fzm9OV/e8FD//TDKa/quJpoCc8LaHGvyBV?=
	=?utf-8?q?YveU7/gXbPO60/IjC6qF+jZWU6UnMn+N61hQni3dZxtyU9vPTxhiQlXj7P/F1Royk?=
	=?utf-8?q?RaTyA8VF3VH40KynVjIXv2NJumqSBNFQdReRmRgGg8A1tSjqpLjEbsGwdzQEriKJx?=
	=?utf-8?q?SjHaXCnR+w3LebaimHrszO6EMjlRaQQhSfWFaPF2tJBED+9Gz52uDYru6q9i1Ui99?=
	=?utf-8?q?mOSMbkHmIgJk8gTauIhabeaI/1DBXBnuBNFttk0oUlGFoDEjBC9E/gMvQQCGuZ9ry?=
	=?utf-8?q?30nayBccO+ghkFpaS+ZJtZc7krv9lC6WZSIGbcUa+JGvLh/EDCf5PlMVZZDn9+ZBE?=
	=?utf-8?q?m6xfobE6kiHp+ym41qIu60mdmroH1n0AxCWEV7nq7QYFBswON1wIy4Jjl6/6r2p43?=
	=?utf-8?q?48iT5KStQRjh2YoObS0CFnVx8pMwMkAfXPUORKQjH0j5pPIYCregOD3zR58g3qdY/?=
	=?utf-8?q?TV5GV4COkokwgce54xE4YZjcoVm/jhcTCxZolWyjZBZEyhmb37ECHIk3sVghbwLwr?=
	=?utf-8?q?aNz/HZkUCO2XB4ARL5eO42b+gvhkDupA7Zy1aF0pbvl/SpDVmsWzOUsGJquqlhfqj?=
	=?utf-8?q?mk7E6MaqUOArkZnpJ34oArZhgy4ShV4NfZniC5z+G0SRp+0axD/hRTMoAuc6snibO?=
	=?utf-8?q?aiQ7ZVSuNsG/cKIyXIN124Ae5DBKqvEN85XCM0Iyk73Zj13Um80hT4aH5yKFZHe5T?=
	=?utf-8?q?cdUa6sOEa8OwJtSGSyrbD/mCBgMF1ig8Qof+0zYDF8qj+pntZNZMIorv/bh3jxP1B?=
	=?utf-8?q?NR2qZGoJoh6BhF4zpN4ghgqchGDVpRHpayxvFJR0C5FUDed4wefhxPh3YdS7XkArn?=
	=?utf-8?q?hUaeCEHEc5y6vUwsxH1GkUaiaGs5VcsRlYT7Ya7b8PJRq4a+RwuW2WT3r3QvnVFi5?=
	=?utf-8?q?JFyf5v96XM6LjwnFPs=3D?=
X-Microsoft-Antispam-Message-Info: 
 mqauxotdWePdt+3lENXEdqDE3HYGykPzAImk9qU2GwLHTc4QPz11JZ++UUfoBwP6sCzpbHICT47irOXP5ZRilXIV113LXIMouj22tg6zvIHGjEhxFoiiB5/p77Nd1Pg2AItxbiNIX0xnxYB8uf/RSaNBTUH/puXeBpaH6VkdeFss+VwaltVuiUaOWkiMGjm8ozvfzbtCLm/WCKx0sV/cyFaGanLCK3rTrVJk4dw8lgFgjx40ZOwdlMlH3PIBKWajORb02YrZzTTqOysZk4ieKiKFuIMuSnlGFlSHDZgjww2bsW9Ug2wo/MV5HVMCUTzyBRm41m3t6+j+/XYCAyHLskOrBLDjXuALGEgGWCsYx8Q=
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;6:sBhB3mMleloTuocrO/Xi58esL+edvK1hiGo6mHhCzcg8KYmKrLuyGLEhQG1YT5d+2oLgrPsPhLNbGISfu/JV1IaRx0oxw3RYYZMn+B6IVUOZfaiJnv2+1eUoIJFVGR1CS6sPImqXi4sSb7CAGKteJXoAEA0JSNH9T3ql+L4tYwtREVqDhC6B+ERgigHr39AfUvF+8B0MB8m35jSdaH/F7aMvphaWeNTYUmVzJOTBD/h9KZoSRZE02VAOE+12XsthftEzQjDXXtUUGwqVCHsrNcnfJ0o6qFmdZk4A4J4+5x80JUG3k2nWLJoQ01QwRZCAg74G0iLaYwXrgBVZcJr8NEL0mPusWur7WKTTwBP4oxjGMnKqWb5BhC4UOGBoD5e1P5ZH9Bf8GKixeOCVf69YnTFiC8AoCJzC+00pg314Ld8AKC7BHaeTIcsDQ0MW1eEJDEWzTn3N/shJJ8mhSunCMw==;5:Wj8LJ8jbx8fZRQc7v4NlUW6iUaC2sAd7Ihep9sdMD+wTWkQ2HlzPwV/gRoLi9J32Bontx8dNPQO+Ck2+YX8Co6eoRrZbiz4Gjs6Y73E8RYmivngzc0OENkGuJpwOLYalb5w2bzZxH4oCc2bmXncF40YBA1kf+V2Biq4DlwadSLE=;7:RzgovNdgGwTB7W3nnbSCJIjUeb2HG11HVwBnJjmUPTxz48ph2TAv7eFIDEcTXDhyTb1msqr8VCZE+O04c/HgunIriLr3D2uGVN+hJCnnEhI+wfjaFUvFJxE+En3e2whh1fuVCPnpx/Wd4HeQs9AUT8SU1lG+EdWFaKRcXeCPNRvRyaoUQttwNZ3YaJe2HRtPI46+hLyofFqMiyjvhz64xwmyxaXudizHs2B0vMMThdxLtjGgDOd+b0WqNNK2M6k4
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;DM6PR12MB2684;20:hp3fNpLK22ygieidEHavJsdigwuOinSdRBal3whJQkzdGNiqjnCyZ0iRisHowXT/4j6Xu3SGiJ3AIH//csRpifyDwwCw/2ENItHWg/oDe7rG/ulaDP7po8pq15GFcslkxuFdcASobOXq/R/+daNwM2TJp1S3MyRZJv4shdsqdSLi2AZmaogzx7+DwNXZeFkuBW7RoMzLYkW4BKidycISWOM0oAlZagW8dYNMonvPPYELcus6L9lQnZ9O1Mr5P1Q4
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 07 Sep 2018 17:57:43.8204 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 51e8a1df-e131-4bc6-b169-08d614eb69d2
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR12MB2684
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Currently, the per-cpu pvclock data is allocated dynamically when
cpu > HVC_BOOT_ARRAY_SIZE. The physical address of this variable is
shared between the guest and the hypervisor hence it must be mapped as
unencrypted (ie. C=0) when SEV is active.

The C-bit works on a page, hence we will be required to perform a
full 4k page allocation to store a single 32-byte pvclock variable. It
will waste fairly sizeable amount of memory since each CPU will be doing
a separate 4k allocation. Let's define a second array for the SEV case to
statically allocate for NR_CPUS and put this array in .data..decrypted
section so that its mapped with C=0 during boot. The .data..decrypted
section has a big chunk of memory that is currently unused. And since
second array will be used only when memory encryption is active hence
free it when encryption is not active.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Suggested-by: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: kvm@vger.kernel.org
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
Acked-by: Paolo Bonzini <pbonzini@redhat.com>
---
 arch/x86/include/asm/mem_encrypt.h |  4 ++++
 arch/x86/kernel/kvmclock.c         | 14 ++++++++++++++
 arch/x86/kernel/vmlinux.lds.S      |  3 +++
 arch/x86/mm/init.c                 |  3 +++
 arch/x86/mm/mem_encrypt.c          | 10 ++++++++++
 5 files changed, 34 insertions(+)

diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h
index 802b2eb..cc46584 100644
--- a/arch/x86/include/asm/mem_encrypt.h
+++ b/arch/x86/include/asm/mem_encrypt.h
@@ -48,11 +48,13 @@ int __init early_set_memory_encrypted(unsigned long vaddr, unsigned long size);
 
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void);
+void __init free_decrypted_mem(void);
 
 bool sme_active(void);
 bool sev_active(void);
 
 #define __decrypted __attribute__((__section__(".data..decrypted")))
+#define __decrypted_aux __attribute__((__section__(".data..decrypted.aux")))
 
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
@@ -80,6 +82,7 @@ static inline int __init
 early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0; }
 
 #define __decrypted
+#define __decrypted_aux
 
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
@@ -93,6 +96,7 @@ early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0;
 #define __sme_pa_nodebug(x)	(__pa_nodebug(x) | sme_me_mask)
 
 extern char __start_data_decrypted[], __end_data_decrypted[];
+extern char __start_data_decrypted_aux[];
 
 #endif	/* __ASSEMBLY__ */
 
diff --git a/arch/x86/kernel/kvmclock.c b/arch/x86/kernel/kvmclock.c
index 376fd3a..6086b56 100644
--- a/arch/x86/kernel/kvmclock.c
+++ b/arch/x86/kernel/kvmclock.c
@@ -65,6 +65,15 @@ static struct pvclock_vsyscall_time_info
 static struct pvclock_wall_clock wall_clock __decrypted;
 static DEFINE_PER_CPU(struct pvclock_vsyscall_time_info *, hv_clock_per_cpu);
 
+#ifdef CONFIG_AMD_MEM_ENCRYPT
+/*
+ * The auxiliary array will be used when SEV is active. In non-SEV case,
+ * it will be freed by free_decrypted_mem().
+ */
+static struct pvclock_vsyscall_time_info
+			hv_clock_aux[NR_CPUS] __decrypted_aux;
+#endif
+
 static inline struct pvclock_vcpu_time_info *this_cpu_pvti(void)
 {
 	return &this_cpu_read(hv_clock_per_cpu)->pvti;
@@ -269,6 +278,11 @@ static int kvmclock_setup_percpu(unsigned int cpu)
 	/* Use the static page for the first CPUs, allocate otherwise */
 	if (cpu < HVC_BOOT_ARRAY_SIZE)
 		p = &hv_clock_boot[cpu];
+#ifdef CONFIG_AMD_MEM_ENCRYPT
+	/* Use the static page from auxiliary array instead of allocating it. */
+	else if (sev_active())
+		p = &hv_clock_aux[cpu - HVC_BOOT_ARRAY_SIZE];
+#endif
 	else
 		p = kzalloc(sizeof(*p), GFP_KERNEL);
 
diff --git a/arch/x86/kernel/vmlinux.lds.S b/arch/x86/kernel/vmlinux.lds.S
index 4cb1064..bde287a 100644
--- a/arch/x86/kernel/vmlinux.lds.S
+++ b/arch/x86/kernel/vmlinux.lds.S
@@ -77,6 +77,9 @@ jiffies_64 = jiffies;
 	. = ALIGN(PMD_SIZE);					\
 	__start_data_decrypted = .;				\
 	*(.data..decrypted);					\
+	. = ALIGN(PAGE_SIZE);					\
+	__start_data_decrypted_aux = .;				\
+	*(.data..decrypted.aux);				\
 	. = ALIGN(PMD_SIZE);					\
 	__end_data_decrypted = .;				\
 
diff --git a/arch/x86/mm/init.c b/arch/x86/mm/init.c
index 7a8fc26..052b279 100644
--- a/arch/x86/mm/init.c
+++ b/arch/x86/mm/init.c
@@ -815,9 +815,12 @@ void free_kernel_image_pages(void *begin, void *end)
 		set_memory_np_noalias(begin_ul, len_pages);
 }
 
+void __weak free_decrypted_mem(void) { }
+
 void __ref free_initmem(void)
 {
 	e820__reallocate_tables();
+	free_decrypted_mem();
 
 	free_kernel_image_pages(&__init_begin, &__init_end);
 }
diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c
index b2de398..9a08c52 100644
--- a/arch/x86/mm/mem_encrypt.c
+++ b/arch/x86/mm/mem_encrypt.c
@@ -348,6 +348,16 @@ bool sev_active(void)
 EXPORT_SYMBOL(sev_active);
 
 /* Architecture __weak replacement functions */
+void __init free_decrypted_mem(void)
+{
+	if (mem_encrypt_active())
+		return;
+
+	free_init_pages("unused decrypted",
+			(unsigned long)__start_data_decrypted_aux,
+			(unsigned long)__end_data_decrypted);
+}
+
 void __init mem_encrypt_init(void)
 {
 	if (!sme_me_mask)
