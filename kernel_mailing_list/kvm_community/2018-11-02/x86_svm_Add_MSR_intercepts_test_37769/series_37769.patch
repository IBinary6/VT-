From patchwork Fri Nov  2 15:36:39 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: "Tambe, William" <WILLIAM.TAMBE@amd.com>
X-Patchwork-Id: 10665721
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id E348313BF
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  2 Nov 2018 15:36:52 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D2A2B28741
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  2 Nov 2018 15:36:52 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id C76042C3B4; Fri,  2 Nov 2018 15:36:52 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 742A72B34E
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  2 Nov 2018 15:36:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728106AbeKCAoT (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 2 Nov 2018 20:44:19 -0400
Received: from mail-eopbgr690061.outbound.protection.outlook.com
 ([40.107.69.61]:37689
        "EHLO NAM04-CO1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727837AbeKCAoS (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 2 Nov 2018 20:44:18 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=6QLcVh4rMTCAre4+tJj6C4KnbTDdavj//KHzJB+tHro=;
 b=xQruXhV8dVdFL5w4NYKIkPGLo9awUYZM0okFapgz+ZEM+NFj96rrcDad9Ca3JSy1xhgYIdE4alX1/kBvXFHI5ED+bJpuV8WpCTcdbhVy9FvnZ7VZxIWxceC4LwcXvJve7iWDRnSSQyMV5qLOta0NthDSbYsKque6kITtr87Fg9Q=
Received: from DM5PR1201MB0091.namprd12.prod.outlook.com (10.174.106.21) by
 DM5PR1201MB2474.namprd12.prod.outlook.com (10.172.87.136) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1294.26; Fri, 2 Nov 2018 15:36:40 +0000
Received: from DM5PR1201MB0091.namprd12.prod.outlook.com
 ([fe80::5084:cdf4:32fb:977e]) by DM5PR1201MB0091.namprd12.prod.outlook.com
 ([fe80::5084:cdf4:32fb:977e%5]) with mapi id 15.20.1273.028; Fri, 2 Nov 2018
 15:36:40 +0000
From: "Tambe, William" <William.Tambe@amd.com>
To: "kvm@vger.kernel.org" <kvm@vger.kernel.org>
CC: "pbonzini@redhat.com" <pbonzini@redhat.com>
Subject: [kvm-unit-tests PATCH v1 1/2] x86: svm: Fix incorrect ordering within
 struct regs
Thread-Topic: [kvm-unit-tests PATCH v1 1/2] x86: svm: Fix incorrect ordering
 within struct regs
Thread-Index: AQHUcsHZf5sb771h1Uyy88BEl5BDfg==
Date: Fri, 2 Nov 2018 15:36:39 +0000
Message-ID: <20181102153616.4792-2-william.tambe@amd.com>
References: <20181102153616.4792-1-william.tambe@amd.com>
In-Reply-To: <20181102153616.4792-1-william.tambe@amd.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: SN4PR0501CA0089.namprd05.prod.outlook.com
 (2603:10b6:803:22::27) To DM5PR1201MB0091.namprd12.prod.outlook.com
 (2603:10b6:4:54::21)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=William.Tambe@amd.com;
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [165.204.77.1]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 
 1;DM5PR1201MB2474;20:a39EiqBua95qyoz3IwMBc+kaEGZ4egD9wz8OTFMC/IsGyr/rXF6NRT81jKUqTPOleVjvVSW9wImwukfWfLyzInmPm+JoB+Emy180MoiCNSpN3jALJgX1JWY2epHG5fZIiGdjw3+T/GUlHsVXKzg3SG6PVUg/rnYcTP6mOdzOwHNIYJy0r1VoQElSq3s4M5nloL6u0gmEmFTR6Ak8KGvheAHD80KSXJPecoA6WNJACXs9TnkL31/o9J5uaKfaYAVz
x-ms-office365-filtering-correlation-id: 03dd239e-e6a1-4a0b-959a-08d640d8fb6d
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:DM5PR1201MB2474;
x-ms-traffictypediagnostic: DM5PR1201MB2474:
x-microsoft-antispam-prvs: 
 <DM5PR1201MB24743BF5DF38AD8556594CD2F7CF0@DM5PR1201MB2474.namprd12.prod.outlook.com>
x-exchange-antispam-report-test: UriScan:(767451399110);
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(823302103)(10201501046)(3002001)(93006095)(93001095)(3231382)(944501410)(52105095)(6055026)(148016)(149066)(150057)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123558120)(20161123564045)(20161123560045)(20161123562045)(201708071742011)(7699051)(76991095);SRVR:DM5PR1201MB2474;BCL:0;PCL:0;RULEID:;SRVR:DM5PR1201MB2474;
x-forefront-prvs: 08444C7C87
x-forefront-antispam-report: 
 SFV:NSPM;SFS:(10009020)(366004)(346002)(136003)(39860400002)(396003)(376002)(189003)(199004)(316002)(476003)(11346002)(446003)(2616005)(486006)(7736002)(86362001)(2501003)(97736004)(2900100001)(66066001)(36756003)(2351001)(105586002)(106356001)(305945005)(5660300001)(6116002)(3846002)(1076002)(2906002)(6486002)(478600001)(72206003)(14454004)(68736007)(256004)(14444005)(25786009)(6916009)(71190400001)(71200400001)(52116002)(99286004)(4326008)(186003)(26005)(76176011)(102836004)(386003)(5640700003)(6436002)(6506007)(53936002)(8936002)(6512007)(81156014)(8676002)(81166006)(1730700003);DIR:OUT;SFP:1101;SCL:1;SRVR:DM5PR1201MB2474;H:DM5PR1201MB0091.namprd12.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
received-spf: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
x-microsoft-antispam-message-info: 
 sUUMJ+WeoutIFulsY91fi4yxH0HGR/gYpV/5sz+Dp7ArfifyZ4JfoIJoEMjR97H+ol/uu0RgVCckbhuNa5wAleQy6er6vYUGDalRm+sVhZ8GRPleGpgFIGQiukVSij6yMAeZzpe3s0whcTJn/1cg/FVVvVeYFKgmvyY8mkkuzsvlsG/t/4m9NN3Mk1VCGVGVHKEpgVAqTCkxsX2rI4LnjdAcwvnJP7zmrLzdYD+1V7k8FCoDz1MqIsE+ZlfyBAo6q6AkQZ0/nxgZXhDo1wWpqBwsyUm7wyh7Kn+elJVqBoM3o1l3AVg7evCLWYB1q0ur2MgsKS0riTxYcppjwdGa8ohNN4xRZYju4ErgGvEwySU=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
MIME-Version: 1.0
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 03dd239e-e6a1-4a0b-959a-08d640d8fb6d
X-MS-Exchange-CrossTenant-originalarrivaltime: 02 Nov 2018 15:36:39.9474
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR1201MB2474
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

"struct regs" is used within x86/svm.c to describe
the memory region where SAVE_GPR_C saves registers.

The ordering within "struct regs" must be corrected
so that it matches how SAVE_GPR_C stores registers.

Signed-off-by: William Tambe <william.tambe@amd.com>
---
 x86/svm.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/x86/svm.c b/x86/svm.c
index 701ab2f..bc0396d 100644
--- a/x86/svm.c
+++ b/x86/svm.c
@@ -199,9 +199,9 @@ static void test_thunk(struct test *test)
 
 struct regs {
         u64 rax;
+        u64 rbx;
         u64 rcx;
         u64 rdx;
-        u64 rbx;
         u64 cr2;
         u64 rbp;
         u64 rsi;

From patchwork Fri Nov  2 15:36:40 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Tambe, William" <WILLIAM.TAMBE@amd.com>
X-Patchwork-Id: 10665719
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 9BD2F14BD
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  2 Nov 2018 15:36:48 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 895572B34E
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  2 Nov 2018 15:36:48 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7C73A2B39C; Fri,  2 Nov 2018 15:36:48 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 565ED2C2A5
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  2 Nov 2018 15:36:47 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728087AbeKCAoL (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 2 Nov 2018 20:44:11 -0400
Received: from mail-eopbgr820072.outbound.protection.outlook.com
 ([40.107.82.72]:39744
        "EHLO NAM01-SN1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726049AbeKCAoL (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 2 Nov 2018 20:44:11 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=eoWQMku6Lp8G83G4hKJqDB/k/r1tD023RPtP5ey5748=;
 b=rY7Uyjk7zy+zr/9ianSQqPjKLlfUPgo2UpUcM+dj7MK/TWGEq3RnxnwsJX3awDvpDqhJ/gqPugcmi622dDdJJ/Z9zNVOL2pwfVRzxSldDiUjLDKtjEo3BFbmP6JFKLokibGCxUHlA+VVAOIbAfVk5Vm4EcSRqLEMkQFsIGgqa8k=
Received: from DM5PR1201MB0091.namprd12.prod.outlook.com (10.174.106.21) by
 DM5PR1201MB0203.namprd12.prod.outlook.com (10.174.107.15) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1294.26; Fri, 2 Nov 2018 15:36:40 +0000
Received: from DM5PR1201MB0091.namprd12.prod.outlook.com
 ([fe80::5084:cdf4:32fb:977e]) by DM5PR1201MB0091.namprd12.prod.outlook.com
 ([fe80::5084:cdf4:32fb:977e%5]) with mapi id 15.20.1273.028; Fri, 2 Nov 2018
 15:36:40 +0000
From: "Tambe, William" <William.Tambe@amd.com>
To: "kvm@vger.kernel.org" <kvm@vger.kernel.org>
CC: "pbonzini@redhat.com" <pbonzini@redhat.com>
Subject: [kvm-unit-tests PATCH v1 2/2] x86: svm: Add MSR intercepts test
Thread-Topic: [kvm-unit-tests PATCH v1 2/2] x86: svm: Add MSR intercepts test
Thread-Index: AQHUcsHZnYQfkjkd3E+b0mDuwF+ARg==
Date: Fri, 2 Nov 2018 15:36:40 +0000
Message-ID: <20181102153616.4792-3-william.tambe@amd.com>
References: <20181102153616.4792-1-william.tambe@amd.com>
In-Reply-To: <20181102153616.4792-1-william.tambe@amd.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: SN4PR0501CA0089.namprd05.prod.outlook.com
 (2603:10b6:803:22::27) To DM5PR1201MB0091.namprd12.prod.outlook.com
 (2603:10b6:4:54::21)
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [165.204.77.1]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 
 1;DM5PR1201MB0203;20:iScEG1uO1ozOZzENIYIG6MeyQKUmpwRddt7r/9y6wMV+OzUXsDMKZXPH+Av+NWcs3D9qFMAELCu59sQg7PjFd5hrnH3+1xo5fktvCKlljm6RbL1y+DDKTUdLJFJ3dQEqPCJB90iWDNElpD9NQ4m/OCFOlp46612n90tA3duwRu9G0IaIs81xyqKQNfWAiSiWhaIKw1wXpw2bnzElpcsW0Y+4J2diZCEr5U2a/bKwBAJ9LsypUAVwyDe14cbimh95
x-ms-office365-filtering-correlation-id: 63f70edc-1b50-48da-c667-08d640d8fbf9
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:DM5PR1201MB0203;
x-ms-traffictypediagnostic: DM5PR1201MB0203:
x-microsoft-antispam-prvs: 
 <DM5PR1201MB0203D9602B92BB4E1857428EF7CF0@DM5PR1201MB0203.namprd12.prod.outlook.com>
x-exchange-antispam-report-test: UriScan:(767451399110);
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(93006095)(93001095)(10201501046)(3002001)(3231382)(944501410)(4982022)(52105095)(6055026)(148016)(149066)(150057)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123564045)(20161123562045)(20161123558120)(201708071742011)(7699051)(76991095);SRVR:DM5PR1201MB0203;BCL:0;PCL:0;RULEID:;SRVR:DM5PR1201MB0203;
x-forefront-prvs: 08444C7C87
x-forefront-antispam-report: 
 SFV:NSPM;SFS:(10009020)(366004)(39860400002)(136003)(396003)(376002)(346002)(199004)(189003)(6512007)(6916009)(2906002)(316002)(26005)(966005)(6346003)(186003)(25786009)(478600001)(2900100001)(1076002)(66066001)(72206003)(68736007)(99286004)(5660300001)(6116002)(6506007)(6486002)(386003)(102836004)(14454004)(305945005)(52116002)(76176011)(7736002)(3846002)(53936002)(105586002)(1730700003)(71200400001)(71190400001)(81156014)(36756003)(97736004)(8676002)(5640700003)(86362001)(2501003)(6306002)(575784001)(4326008)(2351001)(11346002)(6436002)(2616005)(476003)(256004)(446003)(106356001)(81166006)(486006)(8936002);DIR:OUT;SFP:1101;SCL:1;SRVR:DM5PR1201MB0203;H:DM5PR1201MB0091.namprd12.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
received-spf: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=William.Tambe@amd.com;
x-microsoft-antispam-message-info: 
 Wn3jKoQhXICVYYlM1OTjClekg+s+V03HUaEe1/oc8GNpfyVvRs5m2sxVo1B+fkcMhq7bhFxq+Q1pcCMejg8Fw3f5D4l2Rd/ODtfxPkTCDx4FpdHMmF85DpD3EfrRKXZ1IW+gWRK/E4GGeG6wCaqH4y85Sf3PkFMY1hyteGnKuWcmdId7Q1I8v/SlOR6nnHxvxpMJkfPyOUTRW3OCcCxoWEAj/fGYxzvjwSYf5o2lg5x0orAJSHeOERbi2JEFFeizzWFLtllrSJVf7ro/QNcRQU/+oYO/fTsT6VEX9lpop752jLVnHGy9XDIqAC70msNUZBO+72JZjZ02a5kUvoI8mbEZu0W5JM7MHfFIwV6/TF0=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="utf-8"
Content-ID: <08D051EBA2BF494590B7C6A8F99957D1@namprd12.prod.outlook.com>
MIME-Version: 1.0
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 63f70edc-1b50-48da-c667-08d640d8fbf9
X-MS-Exchange-CrossTenant-originalarrivaltime: 02 Nov 2018 15:36:40.7891
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR1201MB0203
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Test MSR intercepts in the ranges covered by the MSRPM (MSR permissions
map) as described in section 15.11 "MSR Intercepts" of AMD64 Architecture
Programmer's Manual Volume 2 - System Programming:
http://support.amd.com/TechDocs/24593.pdf

    0000_0000h – 0000_1FFFh
    C000_0000h – C000_1FFFh
    C001_0000h – C001_1FFFh

For each MSR, a read intercept test followed by a write intercept test
is performed. SEV_STATUS MSR (C001_0131) is skipped; per section
15.34.10 "SEV_STATUS MSR" of AMD64 Architecture Programmer's Manual
volume 2 - System Programming: http://support.amd.com/TechDocs/24593.pdf
SEV_STATUS MSR (C001_0131) is a non-interceptable MSR.

Signed-off-by: William Tambe <william.tambe@amd.com>
---
 x86/svm.c | 130 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 130 insertions(+)

diff --git a/x86/svm.c b/x86/svm.c
index bc0396d..4620411 100644
--- a/x86/svm.c
+++ b/x86/svm.c
@@ -40,6 +40,11 @@ u64 runs;
 u8 *io_bitmap;
 u8 io_bitmap_area[16384];
 
+#define MSR_BITMAP_SIZE 8192
+
+u8 *msr_bitmap;
+u8 msr_bitmap_area[MSR_BITMAP_SIZE + PAGE_SIZE];
+
 static bool npt_supported(void)
 {
    return cpuid(0x8000000A).d & 1;
@@ -59,6 +64,8 @@ static void setup_svm(void)
 
     io_bitmap = (void *) (((ulong)io_bitmap_area + 4095) & ~4095);
 
+    msr_bitmap = (void *) ALIGN((ulong)msr_bitmap_area, PAGE_SIZE);
+
     if (!npt_supported())
         return;
 
@@ -167,6 +174,7 @@ static void vmcb_ident(struct vmcb *vmcb)
     save->dbgctl = rdmsr(MSR_IA32_DEBUGCTLMSR);
     ctrl->intercept = (1ULL << INTERCEPT_VMRUN) | (1ULL << INTERCEPT_VMMCALL);
     ctrl->iopm_base_pa = virt_to_phys(io_bitmap);
+    ctrl->msrpm_base_pa = virt_to_phys(msr_bitmap);
 
     if (npt_supported()) {
         ctrl->nested_ctl = 1;
@@ -408,6 +416,126 @@ static bool check_next_rip(struct test *test)
     return address == test->vmcb->control.next_rip;
 }
 
+static void prepare_msr_intercept(struct test *test)
+{
+    default_prepare(test);
+    test->vmcb->control.intercept |= (1ULL << INTERCEPT_MSR_PROT);
+    test->vmcb->control.intercept_exceptions |= (1ULL << GP_VECTOR);
+    memset(msr_bitmap, 0xff, MSR_BITMAP_SIZE);
+}
+
+static void test_msr_intercept(struct test *test)
+{
+    unsigned long msr_value = 0xef8056791234abcd; /* Arbitrary value */
+    unsigned long msr_index;
+
+    for (msr_index = 0; msr_index <= 0xc0011fff; msr_index++) {
+        if (msr_index == 0xC0010131 /* MSR_SEV_STATUS */) {
+            /*
+             * Per section 15.34.10 "SEV_STATUS MSR" of AMD64 Architecture
+             * Programmer's Manual volume 2 - System Programming:
+             * http://support.amd.com/TechDocs/24593.pdf
+             * SEV_STATUS MSR (C001_0131) is a non-interceptable MSR.
+             */
+            continue;
+        }
+
+        /* Skips gaps between supported MSR ranges */
+        if (msr_index == 0x2000)
+            msr_index = 0xc0000000;
+        else if (msr_index == 0xc0002000)
+            msr_index = 0xc0010000;
+
+        test->scratch = -1;
+
+        rdmsr(msr_index);
+
+        /* Check that a read intercept occurred for MSR at msr_index */
+        if (test->scratch != msr_index)
+            report("MSR 0x%lx read intercept", false, msr_index);
+
+        /*
+         * Poor man approach to generate a value that
+         * seems arbitrary each time around the loop.
+         */
+        msr_value += (msr_value << 1);
+
+        wrmsr(msr_index, msr_value);
+
+        /* Check that a write intercept occurred for MSR with msr_value */
+        if (test->scratch != msr_value)
+            report("MSR 0x%lx write intercept", false, msr_index);
+    }
+
+    test->scratch = -2;
+}
+
+static bool msr_intercept_finished(struct test *test)
+{
+    u32 exit_code = test->vmcb->control.exit_code;
+    u64 exit_info_1;
+    u8 *opcode;
+
+    if (exit_code == SVM_EXIT_MSR) {
+        exit_info_1 = test->vmcb->control.exit_info_1;
+    } else {
+        /*
+         * If #GP exception occurs instead, check that it was
+         * for RDMSR/WRMSR and set exit_info_1 accordingly.
+         */
+
+        if (exit_code != (SVM_EXIT_EXCP_BASE + GP_VECTOR))
+            return true;
+
+        opcode = (u8 *)test->vmcb->save.rip;
+        if (opcode[0] != 0x0f)
+            return true;
+
+        switch (opcode[1]) {
+        case 0x30: /* WRMSR */
+            exit_info_1 = 1;
+            break;
+        case 0x32: /* RDMSR */
+            exit_info_1 = 0;
+            break;
+        default:
+            return true;
+        }
+
+        /*
+         * Warn that #GP exception occured instead.
+         * RCX holds the MSR index.
+         */
+        printf("%s 0x%lx #GP exception\n",
+            exit_info_1 ? "WRMSR" : "RDMSR", regs.rcx);
+    }
+
+    /* Jump over RDMSR/WRMSR instruction */
+    test->vmcb->save.rip += 2;
+
+    /*
+     * Test whether the intercept was for RDMSR/WRMSR.
+     * For RDMSR, test->scratch is set to the MSR index;
+     *      RCX holds the MSR index.
+     * For WRMSR, test->scratch is set to the MSR value;
+     *      RDX holds the upper 32 bits of the MSR value,
+     *      while RAX hold its lower 32 bits.
+     */
+    if (exit_info_1)
+        test->scratch =
+            ((regs.rdx << 32) | (test->vmcb->save.rax & 0xffffffff));
+    else
+        test->scratch = regs.rcx;
+
+    return false;
+}
+
+static bool check_msr_intercept(struct test *test)
+{
+    memset(msr_bitmap, 0, MSR_BITMAP_SIZE);
+    return (test->scratch == -2);
+}
+
 static void prepare_mode_switch(struct test *test)
 {
     test->vmcb->control.intercept_exceptions |= (1ULL << GP_VECTOR)
@@ -1066,6 +1194,8 @@ static struct test tests[] = {
       default_finished, check_cr3_intercept },
     { "next_rip", next_rip_supported, prepare_next_rip, test_next_rip,
       default_finished, check_next_rip },
+    { "msr intercept check", default_supported, prepare_msr_intercept,
+       test_msr_intercept, msr_intercept_finished, check_msr_intercept },
     { "mode_switch", default_supported, prepare_mode_switch, test_mode_switch,
        mode_switch_finished, check_mode_switch },
     { "asid_zero", default_supported, prepare_asid_zero, test_asid_zero,
