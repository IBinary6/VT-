From patchwork Fri Nov  2 14:21:52 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: "Tambe, William" <WILLIAM.TAMBE@amd.com>
X-Patchwork-Id: 10665575
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 98D3C13B5
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  2 Nov 2018 14:21:58 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 81E362BDEF
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  2 Nov 2018 14:21:58 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 72AC82BDFF; Fri,  2 Nov 2018 14:21:58 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A700C2BDEF
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  2 Nov 2018 14:21:57 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727676AbeKBX3N (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 2 Nov 2018 19:29:13 -0400
Received: from mail-co1nam03on0081.outbound.protection.outlook.com
 ([104.47.40.81]:40784
        "EHLO NAM03-CO1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726701AbeKBX3N (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 2 Nov 2018 19:29:13 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=YW/EDm71FIM0qofkhJN1Mp+GpM2VT2xS/bcyXt9Mmlc=;
 b=A/+n6wjfp5sfpLzY4sTlK+Q+rGbZzWik8quOaj5yCNzvBpNWCSjyh6Pauu/OOut6lkFduhdrIGNWjf6p5kJqqztZkBvlVcrfpS15G1QdXf/uxKU+nebpPYxtlnsRB29vFubfWimhCfGhhL7iXSlkdrP8GRI3kIP2QWihZc7iXy0=
Received: from DM5PR1201MB0091.namprd12.prod.outlook.com (10.174.106.21) by
 DM5PR1201MB0010.namprd12.prod.outlook.com (10.172.87.151) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1294.20; Fri, 2 Nov 2018 14:21:52 +0000
Received: from DM5PR1201MB0091.namprd12.prod.outlook.com
 ([fe80::5084:cdf4:32fb:977e]) by DM5PR1201MB0091.namprd12.prod.outlook.com
 ([fe80::5084:cdf4:32fb:977e%5]) with mapi id 15.20.1273.028; Fri, 2 Nov 2018
 14:21:52 +0000
From: "Tambe, William" <William.Tambe@amd.com>
To: "kvm@vger.kernel.org" <kvm@vger.kernel.org>
Subject: [kvm-unit-tests PATCH] x86: svm: Add debug registers intercepts test
Thread-Topic: [kvm-unit-tests PATCH] x86: svm: Add debug registers intercepts
 test
Thread-Index: AQHUcrdm7vaPXW4rx0mcUxy0/OcLGw==
Date: Fri, 2 Nov 2018 14:21:52 +0000
Message-ID: <20181102142141.2873-1-william.tambe@amd.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: SN4PR0501CA0023.namprd05.prod.outlook.com
 (2603:10b6:803:40::36) To DM5PR1201MB0091.namprd12.prod.outlook.com
 (2603:10b6:4:54::21)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=William.Tambe@amd.com;
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [165.204.77.1]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 
 1;DM5PR1201MB0010;20:gxWPopQq7xLPQLUS5nEM9pWMwDdbO1+daTtc7d4A+r9SMmzKg5JiUWA3bncCoqYKpVlWia4mtQCmyH+Gl7ZgHZhs8KcSMP/q0pg4sIwIM2OOETBOk9OnIv4BLhvSj10Uy3D5qjYyyDVsC6LEJN3vCsd2GM/AUmUOoduTwtFc+Lc0mixNptRf9dNPFXRb+Htc9nWSD6ihBcBAEEf4/NKCjinPyXXukc6aEybPjLJ2SVMHM3u4XYKmKFxF3UMHQqix
x-ms-office365-filtering-correlation-id: 76854842-adc1-4a20-723e-08d640ce88a3
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:DM5PR1201MB0010;
x-ms-traffictypediagnostic: DM5PR1201MB0010:
x-microsoft-antispam-prvs: 
 <DM5PR1201MB0010E768C150D86C39932B73F7CF0@DM5PR1201MB0010.namprd12.prod.outlook.com>
x-exchange-antispam-report-test: UriScan:(767451399110);
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(823302103)(3231382)(944501410)(4982022)(52105095)(3002001)(10201501046)(93006095)(93001095)(6055026)(148016)(149066)(150057)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123562045)(20161123560045)(20161123564045)(20161123558120)(201708071742011)(7699051)(76991095);SRVR:DM5PR1201MB0010;BCL:0;PCL:0;RULEID:;SRVR:DM5PR1201MB0010;
x-forefront-prvs: 08444C7C87
x-forefront-antispam-report: 
 SFV:NSPM;SFS:(10009020)(136003)(376002)(396003)(366004)(346002)(39860400002)(189003)(199004)(106356001)(105586002)(5660300001)(99286004)(26005)(8936002)(72206003)(71190400001)(966005)(71200400001)(256004)(6116002)(3846002)(575784001)(25786009)(86362001)(97736004)(2906002)(14454004)(5640700003)(6436002)(68736007)(305945005)(6506007)(186003)(6486002)(6306002)(386003)(486006)(6512007)(8676002)(2616005)(53936002)(2501003)(476003)(478600001)(2900100001)(36756003)(2351001)(52116002)(1730700003)(81156014)(1076002)(81166006)(7736002)(102836004)(66066001)(6916009)(316002);DIR:OUT;SFP:1101;SCL:1;SRVR:DM5PR1201MB0010;H:DM5PR1201MB0091.namprd12.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
received-spf: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
x-microsoft-antispam-message-info: 
 zvhHHXHnRSpCL73OBivjRW0Jknl3VpRO9fvT8oGx68ptb5p8hxSmrR9rh7qyc7Iy8GShj4Yc4FjNqEa16ZuhbyYVp9DTMaItYZ0G5aAi9IxHH6poSpl3Gc6J729N2SwCgOM7gXkmvI0e969JY3JRcqs4CLanYqQAGZEXa0VOgPPkaG0z1Zq1W3cctnxyFa/hBiemMrl+Fke4qNoaC9Pyz8j9rhBoPOTh6WWEbL5ET+LQD2l9xYFfUMrV6rPiwPzb9BLm29T7esHmewR0016zdnWOgEg6avpGeaWp6SPwXEwwktJSw796yU+fPZ4BFMp7cxHXm789kJaqcPclAgyyvudbOioh9CYpqEU/3xh+mqo=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
MIME-Version: 1.0
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 76854842-adc1-4a20-723e-08d640ce88a3
X-MS-Exchange-CrossTenant-originalarrivaltime: 02 Nov 2018 14:21:52.4031
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR1201MB0010
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Test debug registers read and write intercepts.

Signed-off-by: William Tambe <william.tambe@amd.com>
---
 x86/svm.c | 118 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 118 insertions(+)

diff --git a/x86/svm.c b/x86/svm.c
index bc0396d..e5d9f0b 100644
--- a/x86/svm.c
+++ b/x86/svm.c
@@ -8,6 +8,8 @@
 #include "types.h"
 #include "alloc_page.h"
 
+#define SVM_EXIT_MAX_DR_INTERCEPT 0x3f
+
 /* for the nested page table*/
 u64 *pml4e;
 u64 *pdpe;
@@ -382,6 +384,120 @@ static void test_cr3_intercept_bypass(struct test *test)
     test->scratch = a;
 }
 
+static void prepare_dr_intercept(struct test *test)
+{
+    default_prepare(test);
+    test->vmcb->control.intercept_dr_read = 0xff;
+    test->vmcb->control.intercept_dr_write = 0xff;
+}
+
+static void test_dr_intercept(struct test *test)
+{
+    unsigned int i, failcnt = 0;
+
+    /* Loop testing debug register reads */
+    for (i = 0; i < 8; i++) {
+
+        switch (i) {
+        case 0:
+            asm volatile ("mov %%dr0, %0" : "=r"(test->scratch) : : "memory");
+            break;
+        case 1:
+            asm volatile ("mov %%dr1, %0" : "=r"(test->scratch) : : "memory");
+            break;
+        case 2:
+            asm volatile ("mov %%dr2, %0" : "=r"(test->scratch) : : "memory");
+            break;
+        case 3:
+            asm volatile ("mov %%dr3, %0" : "=r"(test->scratch) : : "memory");
+            break;
+        case 4:
+            asm volatile ("mov %%dr4, %0" : "=r"(test->scratch) : : "memory");
+            break;
+        case 5:
+            asm volatile ("mov %%dr5, %0" : "=r"(test->scratch) : : "memory");
+            break;
+        case 6:
+            asm volatile ("mov %%dr6, %0" : "=r"(test->scratch) : : "memory");
+            break;
+        case 7:
+            asm volatile ("mov %%dr7, %0" : "=r"(test->scratch) : : "memory");
+            break;
+        }
+
+        if (test->scratch != i) {
+            report("dr%u read intercept", false, i);
+            failcnt++;
+        }
+    }
+
+    /* Loop testing debug register writes */
+    for (i = 0; i < 8; i++) {
+
+        switch (i) {
+        case 0:
+            asm volatile ("mov %0, %%dr0" : : "r"(test->scratch) : "memory");
+            break;
+        case 1:
+            asm volatile ("mov %0, %%dr1" : : "r"(test->scratch) : "memory");
+            break;
+        case 2:
+            asm volatile ("mov %0, %%dr2" : : "r"(test->scratch) : "memory");
+            break;
+        case 3:
+            asm volatile ("mov %0, %%dr3" : : "r"(test->scratch) : "memory");
+            break;
+        case 4:
+            asm volatile ("mov %0, %%dr4" : : "r"(test->scratch) : "memory");
+            break;
+        case 5:
+            asm volatile ("mov %0, %%dr5" : : "r"(test->scratch) : "memory");
+            break;
+        case 6:
+            asm volatile ("mov %0, %%dr6" : : "r"(test->scratch) : "memory");
+            break;
+        case 7:
+            asm volatile ("mov %0, %%dr7" : : "r"(test->scratch) : "memory");
+            break;
+        }
+
+        if (test->scratch != i) {
+            report("dr%u write intercept", false, i);
+            failcnt++;
+        }
+    }
+
+    test->scratch = failcnt;
+}
+
+static bool dr_intercept_finished(struct test *test)
+{
+    ulong n = (test->vmcb->control.exit_code - SVM_EXIT_READ_DR0);
+
+    /* Only expect DR intercepts */
+    if (n > (SVM_EXIT_MAX_DR_INTERCEPT - SVM_EXIT_READ_DR0))
+        return true;
+
+    /*
+     * Compute debug register number.
+     * Per Appendix C "SVM Intercept Exit Codes" of AMD64 Architecture
+     * Programmer's Manual Volume 2 - System Programming:
+     * http://support.amd.com/TechDocs/24593.pdf
+     * there are 16 VMEXIT codes each for DR read and write.
+     */
+    test->scratch = (n % 16);
+
+    /* Jump over MOV instruction */
+    test->vmcb->save.rip += 3;
+
+    return false;
+}
+
+static bool check_dr_intercept(struct test *test)
+{
+    return !test->scratch;
+}
+
 static bool next_rip_supported(void)
 {
     return (cpuid(SVM_CPUID_FUNC).d & 8);
@@ -1064,6 +1180,8 @@ static struct test tests[] = {
     { "cr3 read intercept emulate", smp_supported,
       prepare_cr3_intercept_bypass, test_cr3_intercept_bypass,
       default_finished, check_cr3_intercept },
+    { "dr intercept check", default_supported, prepare_dr_intercept,
+      test_dr_intercept, dr_intercept_finished, check_dr_intercept },
     { "next_rip", next_rip_supported, prepare_next_rip, test_next_rip,
       default_finished, check_next_rip },
     { "mode_switch", default_supported, prepare_mode_switch, test_mode_switch,
