From patchwork Wed Aug 29 23:42:40 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Peter Shier <pshier@google.com>
X-Patchwork-Id: 10581083
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 02ABD174C
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 23:43:21 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E86D8285B0
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 23:43:20 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id DCDC928600; Wed, 29 Aug 2018 23:43:20 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-15.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI,
	USER_IN_DEF_DKIM_WL autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 682A9285E3
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 23:43:20 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727423AbeH3DmU (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 29 Aug 2018 23:42:20 -0400
Received: from mail-yw1-f74.google.com ([209.85.161.74]:42766 "EHLO
        mail-yw1-f74.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727212AbeH3DmU (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 29 Aug 2018 23:42:20 -0400
Received: by mail-yw1-f74.google.com with SMTP id 1-v6so3406862ywd.9
        for <kvm@vger.kernel.org>; Wed, 29 Aug 2018 16:43:02 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=il7D48MIJ9g9PzX9qIrtugVjVySW8vmXUUux5o8nzWY=;
        b=drSfc4aFTk6bDJWWNB4FKHueiawdu4L1HI/RtOS6JC2ZkUT6/RC3oSJnw/AdUBeb+E
         /0XYosfJ3XhF2BuX7ESdZBWw3IJNhBozLTQlyYRQcHt+wUvT6ZVvJ3vM5nOnRSiRbfD6
         FVM8mDpzdZ4aB9R7N0Djv/IB4mKMlO985PGJuC+rkBq/xzyDcZsyPx9qtDVr3pvwq/3N
         pEVID5XCzNobK9dYKC4bezI8Zu2eKerYLwsGw6n+GVt70f168C8kb9qaTnwVxK7etO7u
         LXzU7lwIBcijLar9PwE8JgpPgsNqU9FctrSzbToc9LD46Z6GeVklxZJ39Jh9LAEOEMlq
         ssvQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=il7D48MIJ9g9PzX9qIrtugVjVySW8vmXUUux5o8nzWY=;
        b=IjvZEnooG90Vr4V6SawOMVVkhcpOFi30ipUGRfL6RbXR5gVFtXkhKZC4NA9CWwXmV+
         H66Y6ePavuag0Rs2geIl7qzlBrsHvGi9FypJkLqavsCQzubGPsRhFF3rWm6WG5rK3DG4
         6PJuimbaYk37t5zuoc/ZY82ibpu6B9S6zeQvx2kTI/pQuS9mqevuy8p31ejZljY/FIOD
         TmHXanm3Rz7TfDFSulk2p5lCaDmi/CKLD8Ao1Aqs6eWhniVLiBGoy6Y5AVpk0fIa3mIv
         zx6FqliBJtFMTn2vlt/3oa202glEDIURxHVzieyN2/DUWLMu2j1sBiNaUaAcZqasGG72
         dpOw==
X-Gm-Message-State: APzg51AW2m7fMs6kvXLUsFfabGKINE1XJM77aNvQdB2uOviQMkDiAqPC
        E3mbJhxPnjjYnfJNS1N1zTvtmZSHLv6OJ7BTIFVf4a4mbtv79h5ENbJnUAzZhwdE+2QTeLdYqEP
        bVJAk8hgAEiQi16pDXIsjl/cL+OliPyfVTCxeyrnf/qFauih0ztqJZqVk4A==
X-Google-Smtp-Source: 
 ANB0VdbEOR9dPKQWhPyloCNyLfymDrCVB9CZ4IAZw8KXn9l+/JSI89Pf/a15+nrPtKMP3vYMzBjTRQsf91k=
X-Received: by 2002:a25:7805:: with SMTP id
 t5-v6mr2483241ybc.78.1535586181580;
 Wed, 29 Aug 2018 16:43:01 -0700 (PDT)
Date: Wed, 29 Aug 2018 16:42:40 -0700
In-Reply-To: <20180829234241.103002-1-pshier@google.com>
Message-Id: <20180829234241.103002-2-pshier@google.com>
Mime-Version: 1.0
References: <20180829234241.103002-1-pshier@google.com>
X-Mailer: git-send-email 2.19.0.rc0.228.g281dcd1b4d0-goog
Subject: [PATCH 1/2] kvm: x86: propagate KVM_GET/SET_MSRS failures to
 userspace
From: Peter Shier <pshier@google.com>
To: kvm@vger.kernel.org
Cc: jmattson@google.com, Peter Shier <pshier@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

These IOCTLs return the number of MSRS successfully read/written but lose
error info in case of failure. Rename kvm_msrs.pad to kvm_msrs.errno and
use it to return cause of first failure.

Signed-off-by: Peter Shier <pshier@google.com>
Reviewed-by: Jim Mattson <jmattson@google.com>
---
 Documentation/virtual/kvm/api.txt | 12 +++++++++---
 arch/x86/include/uapi/asm/kvm.h   |  2 +-
 arch/x86/kvm/x86.c                | 26 +++++++++++++++++---------
 3 files changed, 27 insertions(+), 13 deletions(-)

diff --git a/Documentation/virtual/kvm/api.txt b/Documentation/virtual/kvm/api.txt
index c664064f76fb6..b9b86e6727448 100644
--- a/Documentation/virtual/kvm/api.txt
+++ b/Documentation/virtual/kvm/api.txt
@@ -487,7 +487,7 @@ Capability: basic (vcpu), KVM_CAP_GET_MSR_FEATURES (system)
 Architectures: x86
 Type: system ioctl, vcpu ioctl
 Parameters: struct kvm_msrs (in/out)
-Returns: number of msrs successfully returned;
+Returns: number of msrs successfully read;
         -1 on error
 
 When used as a system ioctl:
@@ -500,9 +500,12 @@ When used as a vcpu ioctl:
 Reads model-specific registers from the vcpu.  Supported msr indices can
 be obtained using KVM_GET_MSR_INDEX_LIST in a system ioctl.
 
+If return value is non-negative and < kvm_msrs.nmsrs, then kvm_msrs.errno
+contains a (positive) value from errno.h for first MSR access that failed.
+
 struct kvm_msrs {
 	__u32 nmsrs; /* number of msrs in entries */
-	__u32 pad;
+	__u32 errno; /* error from 1st failed MSR access */
 
 	struct kvm_msr_entry entries[0];
 };
@@ -524,7 +527,8 @@ Capability: basic
 Architectures: x86
 Type: vcpu ioctl
 Parameters: struct kvm_msrs (in)
-Returns: 0 on success, -1 on error
+Returns: number of msrs successfully written;
+        -1 on error
 
 Writes model-specific registers to the vcpu.  See KVM_GET_MSRS for the
 data structures.
@@ -533,6 +537,8 @@ Application code should set the 'nmsrs' member (which indicates the
 size of the entries array), and the 'index' and 'data' members of each
 array entry.
 
+If return value is non-negative and < kvm_msrs.nmsrs, then kvm_msrs.errno
+contains a (positive) value from errno.h for first MSR access that failed.
 
 4.20 KVM_SET_CPUID
 
diff --git a/arch/x86/include/uapi/asm/kvm.h b/arch/x86/include/uapi/asm/kvm.h
index 86299efa804ad..c3783a059adf7 100644
--- a/arch/x86/include/uapi/asm/kvm.h
+++ b/arch/x86/include/uapi/asm/kvm.h
@@ -181,7 +181,7 @@ struct kvm_msr_entry {
 /* for KVM_GET_MSRS and KVM_SET_MSRS */
 struct kvm_msrs {
 	__u32 nmsrs; /* number of msrs in entries */
-	__u32 pad;
+	__u32 errno; /* error from 1st failed MSR access */
 
 	struct kvm_msr_entry entries[0];
 };
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 506bd2b4b8bb7..7d6ab722650e4 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -2209,10 +2209,10 @@ static int set_msr_mce(struct kvm_vcpu *vcpu, struct msr_data *msr_info)
 			 */
 			if ((offset & 0x3) == 0 &&
 			    data != 0 && (data | (1 << 10)) != ~(u64)0)
-				return -1;
+				return 1;
 			if (!msr_info->host_initiated &&
 				(offset & 0x3) == 1 && data != 0)
-				return -1;
+				return 1;
 			vcpu->arch.mce_banks[offset] = data;
 			break;
 		}
@@ -2807,18 +2807,23 @@ EXPORT_SYMBOL_GPL(kvm_get_msr_common);
 /*
  * Read or write a bunch of msrs. All parameters are kernel addresses.
  *
- * @return number of msrs set successfully.
+ * @return number of msrs accessed successfully.
  */
 static int __msr_io(struct kvm_vcpu *vcpu, struct kvm_msrs *msrs,
 		    struct kvm_msr_entry *entries,
 		    int (*do_msr)(struct kvm_vcpu *vcpu,
 				  unsigned index, u64 *data))
 {
-	int i;
+	int i, r;
 
-	for (i = 0; i < msrs->nmsrs; ++i)
-		if (do_msr(vcpu, entries[i].index, &entries[i].data))
+	for (i = 0; i < msrs->nmsrs; ++i) {
+		r = do_msr(vcpu, entries[i].index, &entries[i].data);
+		if (r) {
+			/* Convert non-standard returns to generic error */
+			msrs->errno = r > 0 ? EINVAL : -r;
 			break;
+		}
+	}
 
 	return i;
 }
@@ -2853,11 +2858,14 @@ static int msr_io(struct kvm_vcpu *vcpu, struct kvm_msrs __user *user_msrs,
 		goto out;
 	}
 
-	r = n = __msr_io(vcpu, &msrs, entries, do_msr);
-	if (r < 0)
-		goto out_free;
+	msrs.errno = 0;
+	n = __msr_io(vcpu, &msrs, entries, do_msr);
 
 	r = -EFAULT;
+	if (copy_to_user(&user_msrs->errno, &msrs.errno,
+			 sizeof user_msrs->errno))
+		goto out_free;
+
 	if (writeback && copy_to_user(user_msrs->entries, entries, size))
 		goto out_free;
 

From patchwork Wed Aug 29 23:42:41 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Peter Shier <pshier@google.com>
X-Patchwork-Id: 10581085
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 40F03180E
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 23:43:21 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3211F285B0
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 23:43:21 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 263CE285E3; Wed, 29 Aug 2018 23:43:21 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-15.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI,
	USER_IN_DEF_DKIM_WL autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 88C93285FF
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 23:43:20 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727454AbeH3DmY (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 29 Aug 2018 23:42:24 -0400
Received: from mail-pf1-f201.google.com ([209.85.210.201]:38632 "EHLO
        mail-pf1-f201.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727449AbeH3DmY (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 29 Aug 2018 23:42:24 -0400
Received: by mail-pf1-f201.google.com with SMTP id e15-v6so3677291pfi.5
        for <kvm@vger.kernel.org>; Wed, 29 Aug 2018 16:43:06 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=I4AWTTQDABBIr4TA9vcJLfjSDu2UB6xOrAGyKXGkqoE=;
        b=FSpGCyQlqkDNdPF6isVgDhAcMEjQHCJLUBZn9gko1Zakyll7MytXTuLnlau/eyM08f
         Lx3fHSbl9FX+5NCto2mULSNTSDHByvdc9m6MnU7G4LB60BTwSnABENV/bF6egFhU+QO/
         OQ0fLc7ozkEV1zxAYooyTRrsTra8jcRa2olOlYwFBOjXnx+KCLS4d00FQ6U7gwhKN7/b
         rVt4oG0/7QvN7WjzLm/hHxlD82oXXWc+5yfVv9PddGnT3CRvEt4+YN2ps1AdYL71k7g0
         +/C+m0HxW4qN0dokZUchfOWXw+H71I98IN6ZPWrfqLIGVz8W1ZXPiusrHhvj0352ItSl
         cp/w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=I4AWTTQDABBIr4TA9vcJLfjSDu2UB6xOrAGyKXGkqoE=;
        b=iRvD0oYaFzM+UWUllLWXJr7iOU60nC+QNLnh+NVY96JLIi2SbmEnZw2BiaTUQvHsoA
         gpK2CTKBEXH/IG/xD42qypzA9IwIXiXeUnkg1qMjD3Qh1uFKFXIp2XjVBGR0GCjs7KTL
         tS7NRifeT1lU/fmP6NN15FGTUmg6EYTlmUf/ocXIgedAZ9QfGe6siGbbi6VNqh2i+Htb
         YAt+uKHggA1oh5Br11hFeLASy63wfzswDR+/h3k4eW5JCFHfOt1bKBk4IrVlmclnrXUb
         WIRP4VbSwjZ/+y2tiDrLQgDGuBnW9FP1F8mix6OOT7s6VaXseuyEwimBCwnT9JUVlAh6
         kZzw==
X-Gm-Message-State: APzg51Ant5Bh8nEoMOdTRVtC+spzebZ47Gak9MRmChrpRJRwYS+8byJ0
        RCArvNesN0Yu3ZxJp74MCa62qef8TtZX6CnCuByFaO/TUS6os7ycJJz+WNueAn0kpAR/IVdBBxu
        jjAjc8N14YynhHJBMvpIGtXMumtOmFzigQXFO5jVtgG3i2f19Gu3zrolT+g==
X-Google-Smtp-Source: 
 ANB0VdbYIsF18O2x1Wi4lAs2YZlYoeegP8m6LFBILB4047C17VJlfzQrlSKIhh95SRclvjRxMjyIf4FzdvU=
X-Received: by 2002:a63:a06a:: with SMTP id
 u42-v6mr2214697pgn.32.1535586186151;
 Wed, 29 Aug 2018 16:43:06 -0700 (PDT)
Date: Wed, 29 Aug 2018 16:42:41 -0700
In-Reply-To: <20180829234241.103002-1-pshier@google.com>
Message-Id: <20180829234241.103002-3-pshier@google.com>
Mime-Version: 1.0
References: <20180829234241.103002-1-pshier@google.com>
X-Mailer: git-send-email 2.19.0.rc0.228.g281dcd1b4d0-goog
Subject: [PATCH 2/2] kvm: x86: differentiate unrecognized MSRs from errors
From: Peter Shier <pshier@google.com>
To: kvm@vger.kernel.org
Cc: jmattson@google.com, Peter Shier <pshier@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Change all MSR access code that handles an MSR range to return -ENOENT if
the specified MSR is out of range. Does not affect KVM_GET/SET_MSRS return
values to preserve existing IOCTL API contract. Does not affect existing
guest behavior on unrecognized MSR (#GP).

Signed-off-by: Peter Shier <pshier@google.com>
Reviewed-by: Jim Mattson <jmattson@google.com>
---
 arch/x86/kvm/hyperv.c    | 16 ++++++++--------
 arch/x86/kvm/lapic.c     |  2 +-
 arch/x86/kvm/mtrr.c      | 10 +++++++---
 arch/x86/kvm/pmu_amd.c   | 24 +++++++++++++-----------
 arch/x86/kvm/pmu_intel.c |  5 +++--
 arch/x86/kvm/vmx.c       |  4 ++--
 arch/x86/kvm/x86.c       |  8 ++++----
 7 files changed, 38 insertions(+), 31 deletions(-)

diff --git a/arch/x86/kvm/hyperv.c b/arch/x86/kvm/hyperv.c
index 01d209ab5481b..69d93672c68a3 100644
--- a/arch/x86/kvm/hyperv.c
+++ b/arch/x86/kvm/hyperv.c
@@ -289,7 +289,7 @@ static int synic_set_msr(struct kvm_vcpu_hv_synic *synic,
 		ret = synic_set_sint(synic, msr - HV_X64_MSR_SINT0, data, host);
 		break;
 	default:
-		ret = 1;
+		ret = -ENOENT;
 		break;
 	}
 	return ret;
@@ -324,7 +324,7 @@ static int synic_get_msr(struct kvm_vcpu_hv_synic *synic, u32 msr, u64 *pdata,
 		*pdata = atomic64_read(&synic->sint[msr - HV_X64_MSR_SINT0]);
 		break;
 	default:
-		ret = 1;
+		ret = -ENOENT;
 		break;
 	}
 	return ret;
@@ -774,7 +774,7 @@ static int kvm_hv_msr_get_crash_data(struct kvm_vcpu *vcpu,
 	struct kvm_hv *hv = &vcpu->kvm->arch.hyperv;
 
 	if (WARN_ON_ONCE(index >= ARRAY_SIZE(hv->hv_crash_param)))
-		return -EINVAL;
+		return -ENOENT;
 
 	*pdata = hv->hv_crash_param[index];
 	return 0;
@@ -817,7 +817,7 @@ static int kvm_hv_msr_set_crash_data(struct kvm_vcpu *vcpu,
 	struct kvm_hv *hv = &vcpu->kvm->arch.hyperv;
 
 	if (WARN_ON_ONCE(index >= ARRAY_SIZE(hv->hv_crash_param)))
-		return -EINVAL;
+		return -ENOENT;
 
 	hv->hv_crash_param[index] = data;
 	return 0;
@@ -1023,7 +1023,7 @@ static int kvm_hv_set_msr_pw(struct kvm_vcpu *vcpu, u32 msr, u64 data,
 	default:
 		vcpu_unimpl(vcpu, "Hyper-V uhandled wrmsr: 0x%x data 0x%llx\n",
 			    msr, data);
-		return 1;
+		return -ENOENT;
 	}
 	return 0;
 }
@@ -1116,7 +1116,7 @@ static int kvm_hv_set_msr(struct kvm_vcpu *vcpu, u32 msr, u64 data, bool host)
 	default:
 		vcpu_unimpl(vcpu, "Hyper-V uhandled wrmsr: 0x%x data 0x%llx\n",
 			    msr, data);
-		return 1;
+		return -ENOENT;
 	}
 
 	return 0;
@@ -1161,7 +1161,7 @@ static int kvm_hv_get_msr_pw(struct kvm_vcpu *vcpu, u32 msr, u64 *pdata)
 		break;
 	default:
 		vcpu_unimpl(vcpu, "Hyper-V unhandled rdmsr: 0x%x\n", msr);
-		return 1;
+		return -ENOENT;
 	}
 
 	*pdata = data;
@@ -1223,7 +1223,7 @@ static int kvm_hv_get_msr(struct kvm_vcpu *vcpu, u32 msr, u64 *pdata,
 		break;
 	default:
 		vcpu_unimpl(vcpu, "Hyper-V unhandled rdmsr: 0x%x\n", msr);
-		return 1;
+		return -ENOENT;
 	}
 	*pdata = data;
 	return 0;
diff --git a/arch/x86/kvm/lapic.c b/arch/x86/kvm/lapic.c
index 0cefba28c864a..a8fb1c618bf54 100644
--- a/arch/x86/kvm/lapic.c
+++ b/arch/x86/kvm/lapic.c
@@ -1885,7 +1885,7 @@ int kvm_lapic_reg_write(struct kvm_lapic *apic, u32 reg, u32 val)
 			ret = 1;
 		break;
 	default:
-		ret = 1;
+		ret = -ENOENT;
 		break;
 	}
 	if (ret)
diff --git a/arch/x86/kvm/mtrr.c b/arch/x86/kvm/mtrr.c
index e9ea2d45ae66b..28fd39c30ba50 100644
--- a/arch/x86/kvm/mtrr.c
+++ b/arch/x86/kvm/mtrr.c
@@ -383,8 +383,12 @@ int kvm_mtrr_set_msr(struct kvm_vcpu *vcpu, u32 msr, u64 data)
 {
 	int index;
 
-	if (!kvm_mtrr_valid(vcpu, msr, data))
-		return 1;
+	if (!kvm_mtrr_valid(vcpu, msr, data)) {
+		if (!msr_mtrr_valid(msr))
+			return -ENOENT;
+		else
+			return 1;
+	}
 
 	index = fixed_msr_to_range_index(msr);
 	if (index >= 0)
@@ -417,7 +421,7 @@ int kvm_mtrr_get_msr(struct kvm_vcpu *vcpu, u32 msr, u64 *pdata)
 	}
 
 	if (!msr_mtrr_valid(msr))
-		return 1;
+		return -ENOENT;
 
 	index = fixed_msr_to_range_index(msr);
 	if (index >= 0)
diff --git a/arch/x86/kvm/pmu_amd.c b/arch/x86/kvm/pmu_amd.c
index 1495a735b38e7..ad9f8462a7da6 100644
--- a/arch/x86/kvm/pmu_amd.c
+++ b/arch/x86/kvm/pmu_amd.c
@@ -228,7 +228,7 @@ static int amd_pmu_get_msr(struct kvm_vcpu *vcpu, u32 msr, u64 *data)
 		return 0;
 	}
 
-	return 1;
+	return -ENOENT;
 }
 
 static int amd_pmu_set_msr(struct kvm_vcpu *vcpu, struct msr_data *msr_info)
@@ -243,16 +243,18 @@ static int amd_pmu_set_msr(struct kvm_vcpu *vcpu, struct msr_data *msr_info)
 	if (pmc) {
 		pmc->counter += data - pmc_read_counter(pmc);
 		return 0;
-	}
-	/* MSR_EVNTSELn */
-	pmc = get_gp_pmc_amd(pmu, msr, PMU_TYPE_EVNTSEL);
-	if (pmc) {
-		if (data == pmc->eventsel)
-			return 0;
-		if (!(data & pmu->reserved_bits)) {
-			reprogram_gp_counter(pmc, data);
-			return 0;
-		}
+	} else {
+		/* MSR_EVNTSELn */
+		pmc = get_gp_pmc_amd(pmu, msr, PMU_TYPE_EVNTSEL);
+		if (pmc) {
+			if (data == pmc->eventsel)
+				return 0;
+			if (!(data & pmu->reserved_bits)) {
+				reprogram_gp_counter(pmc, data);
+				return 0;
+			}
+		} else
+			return -ENOENT;
 	}
 
 	return 1;
diff --git a/arch/x86/kvm/pmu_intel.c b/arch/x86/kvm/pmu_intel.c
index 5ab4a364348e3..2e722451d325f 100644
--- a/arch/x86/kvm/pmu_intel.c
+++ b/arch/x86/kvm/pmu_intel.c
@@ -193,7 +193,7 @@ static int intel_pmu_get_msr(struct kvm_vcpu *vcpu, u32 msr, u64 *data)
 		}
 	}
 
-	return 1;
+	return -ENOENT;
 }
 
 static int intel_pmu_set_msr(struct kvm_vcpu *vcpu, struct msr_data *msr_info)
@@ -248,7 +248,8 @@ static int intel_pmu_set_msr(struct kvm_vcpu *vcpu, struct msr_data *msr_info)
 				reprogram_gp_counter(pmc, data);
 				return 0;
 			}
-		}
+		} else
+			return -ENOENT;
 	}
 
 	return 1;
diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index 1d26f3c4985ba..d3253c9a8f10f 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -3952,7 +3952,7 @@ static int vmx_set_vmx_msr(struct kvm_vcpu *vcpu, u32 msr_index, u64 data)
 		/*
 		 * The rest of the VMX capability MSRs do not support restore.
 		 */
-		return -EINVAL;
+		return -ENOENT;
 	}
 }
 
@@ -4028,7 +4028,7 @@ static int vmx_get_vmx_msr(struct nested_vmx_msrs *msrs, u32 msr_index, u64 *pda
 		*pdata = msrs->vmfunc_controls;
 		break;
 	default:
-		return 1;
+		return -ENOENT;
 	}
 
 	return 0;
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 7d6ab722650e4..8d2ecf5bcf899 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -2216,7 +2216,7 @@ static int set_msr_mce(struct kvm_vcpu *vcpu, struct msr_data *msr_info)
 			vcpu->arch.mce_banks[offset] = data;
 			break;
 		}
-		return 1;
+		return -ENOENT;
 	}
 	return 0;
 }
@@ -2558,7 +2558,7 @@ int kvm_set_msr_common(struct kvm_vcpu *vcpu, struct msr_data *msr_info)
 		if (!ignore_msrs) {
 			vcpu_debug_ratelimited(vcpu, "unhandled wrmsr: 0x%x data 0x%llx\n",
 				    msr, data);
-			return 1;
+			return -ENOENT;
 		} else {
 			if (report_ignored_msrs)
 				vcpu_unimpl(vcpu,
@@ -2612,7 +2612,7 @@ static int get_msr_mce(struct kvm_vcpu *vcpu, u32 msr, u64 *pdata, bool host)
 			data = vcpu->arch.mce_banks[offset];
 			break;
 		}
-		return 1;
+		return -ENOENT;
 	}
 	*pdata = data;
 	return 0;
@@ -2791,7 +2791,7 @@ int kvm_get_msr_common(struct kvm_vcpu *vcpu, struct msr_data *msr_info)
 		if (!ignore_msrs) {
 			vcpu_debug_ratelimited(vcpu, "unhandled rdmsr: 0x%x\n",
 					       msr_info->index);
-			return 1;
+			return -ENOENT;
 		} else {
 			if (report_ignored_msrs)
 				vcpu_unimpl(vcpu, "ignored rdmsr: 0x%x\n",
