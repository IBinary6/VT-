From patchwork Wed Aug 29 18:23:57 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10580747
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 9C53714BD
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 18:25:46 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8D7F72B9B7
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 18:25:46 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 80F7F2B9B9; Wed, 29 Aug 2018 18:25:46 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B29802B9B7
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 18:25:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728262AbeH2WXc (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 29 Aug 2018 18:23:32 -0400
Received: from mail-cys01nam02on0069.outbound.protection.outlook.com
 ([104.47.37.69]:40616
        "EHLO NAM02-CY1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727698AbeH2WXc (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 29 Aug 2018 18:23:32 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=nX4LbIK0sGaMzSdq9U2Kk6bncbqQs9X3wYZKgzNPqfI=;
 b=oOomz6NkQgZulIg/I/rJlaKnMDJEZI4Mfli94MWtvFm7HVL7ZydP6m29Pzm/3uRFPefdcLRhXi31w2wmNnyzZri7b++rnhsRyDj+xp5MaQ1kLFiWuMUnRAPiTEnzRfHrPVXDS+vyM3CEHHuufWB15KU6+iLgaAlSd7Gr/tG65OA=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 BYAPR12MB2678.namprd12.prod.outlook.com (2603:10b6:a03:69::27) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1101.14; Wed, 29 Aug 2018 18:24:13 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v3 1/4] x86/mm: Restructure sme_encrypt_kernel()
Date: Wed, 29 Aug 2018 13:23:57 -0500
Message-Id: <1535567040-1370-2-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1535567040-1370-1-git-send-email-brijesh.singh@amd.com>
References: <1535567040-1370-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: CY4PR1801CA0020.namprd18.prod.outlook.com
 (2603:10b6:910:74::33) To BYAPR12MB2678.namprd12.prod.outlook.com
 (2603:10b6:a03:69::27)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: ee44659f-17a1-4fb3-52d7-08d60ddc9fe8
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:BYAPR12MB2678;
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2678;3:f6Jb6iF3rqdye7o7kQ3IsLHMYLcQe08YO10mTKtPYH1mM2Gtd1EdABuDaOJARBdpnpripILmLwttbON/h56x4s2wfZ7GzB3KsR3nPSxS/71JwsZgnfshwbq6sWPvZFzsvqZhJ+ISN/4NRjKrnbROm7GDztjs8xULZrXrLOiAmuKIVThV8mcd+n1yg1kAPNSlmIauYGLzmMv1Ib/XfwuRE+V4fekGrDq6PGuz70PO6z9J7JZEaNg4GHTLImZ+VPJy;25:IXwOYhQAsjbMVNurp034YhVbpN0N/GwfzvfOuavEmJRPKaqb0palPk14wYQwzKr2LwOdffNzY+igDu+QCmMSdNVNlOyAeG5K9C7UHg0XE794Gwj0KmlF9L77k+lRR5bXTbwv4FblJOeo9h+AiNYdjMxntY+WgLrXxHtJAi2CtmNEI66cH7UzsdQIwF3yBH2oh1z6RUb+bl6cdcAp3zTfLwoqJebqVNZK8IIVFaVXeqFEM8SHsRveDiIj3f1GBavjJrnYdd/JrawMlJzpvNvEKZcpQUOs39QfJFZGTdxqgmzVm06utCh1Id9U+1CLy4DA3q9OVexO6iBMlIHKPSIVTQ==;31:gNN7m21JeMtvovkTBWrCiz0XuG/aUP2/lHBI9o+qGkAgHfkzBH9kmxL/Dus765FJA//SCSJOHyypBxrsGJBk9I1+20iwPCPu7DnkGxEs64ekm8Gj5HLvFZqR9OeXJBdAIqpzXuJn9g29iKti79NZwXso4y0aryyj4Q20qL7i8ZJficREIjuUPL5EVhEIQ9oU970T6l76J6n7Yhora7dFiJbaLQ9A+dYsXumcHvHgQFo=
X-MS-TrafficTypeDiagnostic: BYAPR12MB2678:
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2678;20:0Y4sRPNCfielccncY9725fDXxSz/SmT1po5niZCzATt4PrT1bkuqWqvLzt9IRSLwhvssAea6JUc0qEc6UScWsqDGf9anGn5zqzQe9eJ13xiPqe0BjI4UC7fyHwJtjJivlgnGk4skwZqa6dJrkxCveCjoItE1eWfPJX1DVbDN4y5d474z6zVlEg3qc2bJY+yWmRpfVmxaPAn5vfR6x8iPQsrar3gbCLx4ersXPQIAq6HevR+JvmQ9bcLvSuD3cP1xQTWISq0GBXIrmFRkWHwncDvjqhdi/6Z3ivXSgoqUfeA4158UGyUr5zNjtWkSsqfUtw9SPgs11ZYnTT3obzppzzjdhgTp2KkPGB74NKnXhc7AoE5ETb7ux6F4fX1HDwDm/xWBrOfT+VkwiRnmYvhXIPIr/Hf7Xd1Gdb0mujTFv6JV0KR8teywc2AwoS4a8+3Wt/0fT+6hCXjt3W4nleXKXbIMVcZsloH4npfoCIoQMT37BDYwL5f5FbBGNqUCf6nS;4:rW0pb+khw9BU5qkpE6TnSVyoRYlP3siFMvJ3Owwsho0673c4g1Hy4higuM3szsRvMyymSCTYVUpiNQUcHalFwIqFKdkG3Q6Kbr8o7F3MgtZ0ZDluJfTSAlIVAna2CoJrAQJb2eGBU+TvZ/z3ER8hvpylohMlvSllpS9qt1DX8YifNaFDhG66N7787Bb2kQXnezdMX8AxAqlGA8W0Mjh1a6aZ3KYw2TWvufLR5tB0Z+n51mQwnRQgRaiQCn5Rpw6GGTMAUlnschpWHguyiCWAoNZx/wH0B4ad9v/LA4g1CfZ4uZNN/DMAgy38dh0VEFZhDmwFz45wToO19yFVwiCP31pSg5tSETNX5TQdcY6dK0XWJFlW4WoiDTgR8Oux692l
X-Microsoft-Antispam-PRVS: 
 <BYAPR12MB26787F86FD945842FCB35DFFE5090@BYAPR12MB2678.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(823301075)(93006095)(93001095)(3231311)(944501410)(52105095)(3002001)(10201501046)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123564045)(20161123562045)(20161123558120)(201708071742011)(7699016);SRVR:BYAPR12MB2678;BCL:0;PCL:0;RULEID:;SRVR:BYAPR12MB2678;
X-Forefront-PRVS: 077929D941
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(396003)(39860400002)(346002)(366004)(376002)(136003)(189003)(199004)(478600001)(386003)(6486002)(53936002)(5660300001)(14444005)(54906003)(4326008)(6666003)(97736004)(25786009)(23676004)(7736002)(52116002)(7696005)(305945005)(76176011)(50466002)(50226002)(53416004)(36756003)(81156014)(81166006)(8936002)(106356001)(2616005)(956004)(476003)(3846002)(6116002)(86362001)(2870700001)(2906002)(47776003)(446003)(68736007)(186003)(16526019)(486006)(66066001)(316002)(105586002)(26005)(8676002)(11346002)(44832011);DIR:OUT;SFP:1101;SCL:1;SRVR:BYAPR12MB2678;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BBYAPR12MB2678=3B23=3AheBN4bd?=
	=?utf-8?q?7J0EKfueamOAUjd1HJPPLwhUHdbmYJ4m8uP2fclEB5OsEpYlVXjbF61NXv8MTTbbv?=
	=?utf-8?q?fzcyzv1cwqS/zDeSW99F3d0BP35hGRYZ22Rj1737L8twDI5803ACoQgu9yV0r4XXK?=
	=?utf-8?q?TgQtB1iiHlZnE/hZtDoGD3x0y7oM3BwYRlC7V2d4eOPzLJpR4+MbmG/vb6voa1ply?=
	=?utf-8?q?UAoLQjWCsBh91+beXQfM5qHmyu0qCD98fuHGNotpoYxxkZ/6Z3MQDdmt/GvacxzB0?=
	=?utf-8?q?oI0mKEGM8iidC07Fu3dzbG+Vp0Apllh7d5Fi1Vigg+ycP8mUiYEdaI0UtBZddcwSm?=
	=?utf-8?q?Ld3aaozBplICBUeOiUwgaJ2Q5QZ5MimXtZSrapXCL9NP7FyJoJGoB6Fy9RHFVRSz5?=
	=?utf-8?q?GmtHjfRu9pU2E8f78U7ebvw2sjEgq/QRxz+WsMJZd1pjWwjOueg4qlTzqtOx+V9lv?=
	=?utf-8?q?qXJTNhG4iLcZNV7NKsHOtKYcaayEhEpUjnZ+5Pe/rwgK66Ej3062DDjwlxiRkEn9G?=
	=?utf-8?q?KFbWkXv6SfQqc2t+EVs0LYIo8QXvOCN6qjx63JJl9qKLOGFSv68aK4ZCsbVpauMKW?=
	=?utf-8?q?VH0QRP0lPAuz5PeQ28s55uPF5k4Rnq2xzl+sE6cyvXPTHQABKiRrBGcx2rON3oczX?=
	=?utf-8?q?lyI1ZQdyegjYqXhadjZeRKaNuxKPsG77/smCIKQJoEneXngFfbiYBd9EkFCQPuf8B?=
	=?utf-8?q?SPuXxdUt7ZRhTqCuevFHn1X9DBb3z262Rzvqm5U26r1i8Jz5UIMInD8kf76KJTOmZ?=
	=?utf-8?q?K1ieSnwN/Ek4qlce/Zo6Jn3JIlt5WuapG2WRCS9V18S+H3xeVFA8cpHr0//NUAq+q?=
	=?utf-8?q?4nCraGsYyOtIh4dzVfqxV5YLiQP+7fKIuXQlQ3Z9QtgRiy5jyvbKHLFrfsTBDxfX/?=
	=?utf-8?q?xyFDvkXWHmjnSMAE+3jh0JZdnhX9hRXWvo1G0UoUz5NVNMnAKH4XG/vVkaJWAzZ+f?=
	=?utf-8?q?Q/1KdYWwcKQzhydwudjD/1sE4cF2NdoylNEVJDs0daw+p0xAj/iw6bxU4ed45JCxp?=
	=?utf-8?q?2Uc67XrjJat/YmHWieRoPcGJO8hN/Nkeh0/3Jmuq1S8VMRZj+n7n8jPnjcucffRbH?=
	=?utf-8?q?6azsarzSeCGOZZfJCzttdjBQtsYt0kTHWOeXlQ40Gggt4wJYI6E3NpE/HRM4KJmFo?=
	=?utf-8?q?qUT2iOLqsSJ0Ac2LgXislKaVETfQSch1Z04yiEm?=
X-Microsoft-Antispam-Message-Info: 
 LUtQsaj3AbCb74JRzM6HJZUyCJrF/8bvYM3Phkp/2VAj57YqlUneBTyl3cmxtfWissUkqG3msBE7fkkLsnZwjNIyEsw/BDCNNctrVhp1diPYvf9r7fwm7Fbm4ZUc7+i6nJn99MpNfeUefgn02xvP8kdR/HPDnZhnsPAMth1EgCi1xDtHToXboG5uCXl07z7kULqBtcu4lgkS781WnLPZyN0LunjRDL+WbeRA/4TwjNSDEUXsTRPLSA10xPY5TwPfrwcJsTPHiESKfafwzEgbPt2wg96CytUmenGK57an0fe87QBYB21qun0nYB0Nkq4yayZMXmGEvIE2z+MQauEBOZ6jEyV6Bx+suAi4MJUg0Ow=
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2678;6:ZKAN9nS76Y8AbR/9FrkZdvLGP991qXuji88Fth8YJVrf+px1WZKVfR2sMKEcfscEPv/0/pZe3JrHP/4Vuxd1v/rjtwfBzdgatgOT9DHt9tcy12h4IH4gWU3DwU0ahXOFuxPJGV7zna6rLp39B/0QjNMOp/D32XxL2h6oEnq6WYUc0v0lUmB5Rxg8ofyafovQuYpLuhHfnOLneh6+NcdbFLASdbdaBEkMsX95h5pWn2P5leAEOm4rlO+dGHPEKe9U87UW4Nhe4Q9jpHSuec4Wt+TodDJfPCIC4nTUWBddO/4fnI7WAJ2AaQHIXTS24qwutQtjSR+jFJgPGo6IAF5ZSZGzMwY7UD1PdIGD1DFCSHpbQvoyV1TQcyrHp7kJ9Ccde7MiIkZnGXPpYxSGS40tNwMPaylnmCefx9cVzYbfepe9J5OnbbIM+0IZM46oxSh7axw1BiiUF7FSshMsQw62gw==;5:W2H26iEuNMO9+0ISNd2n8N7+dsWS/XdXpUryiOW6c2d2Rqng/uOi7HiiIInupdp9rWX6lejz803nnv3odFgxeQboAbc3IK/byT7AhvqVHcQAbLfji1ewPdwyhZusrv0XOPqrNPQrQqT0Tx74t5fYayQbgCzwLWttjjDnt90CozU=;7:yDWQDev7gxv39EjXspvGla4OaXq3vUwXibj6aP5pcsIH+6rXg3/NnFyD4aROWTgsFWdXSKNZ+nYnAy+GDGs28di5xpTjCKc/0enaWCWIiasfp95+ev0rb1BarM032gKPP3zRG5cF7sccZrcEpXBzYuHD8oIraDZySCgMNZfz6DYUeTOzblFunDnpQJ1Ii17NYJggjNwc6sZ4E8gbdrUyE2GyBYPxgoDUMMJhIAWjYVpOi6W2ysntuI7A4TOWBlxB
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2678;20:0HV56jxf1q2vZQXfANzvcJdKZKH355/vOA2SXqzpqtPgtSRgR9NCFfsAdevL9Ldp85KUqtaBPIyiWOqLou23g4cuQhNlLQPdFKzc2xL41a259aPr8RwXHfJhUZ3U/KO8drmzHwW1F4QIPffYHdiTHBOCBSkMQ8uo7owIE5SF9yFpz3l+ImD5iiJPa1Ir+oxY1CRUiMynSSyf0xstX9PLZiR7/omA4Sxldif/mRyj+ddGCVI/oiShVELFVXUo5rM9
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 29 Aug 2018 18:24:13.6897 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 ee44659f-17a1-4fb3-52d7-08d60ddc9fe8
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BYAPR12MB2678
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Re-arrange the sme_encrypt_kernel() by moving the workarea map/unmap
logic in a separate static function. There are no logical changes in this
patch. The restructuring will allow us to expand the sme_encrypt_kernel
in future.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: kvm@vger.kernel.org
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/mm/mem_encrypt_identity.c | 160 ++++++++++++++++++++++++-------------
 1 file changed, 104 insertions(+), 56 deletions(-)

diff --git a/arch/x86/mm/mem_encrypt_identity.c b/arch/x86/mm/mem_encrypt_identity.c
index 7ae3686..92265d3 100644
--- a/arch/x86/mm/mem_encrypt_identity.c
+++ b/arch/x86/mm/mem_encrypt_identity.c
@@ -72,6 +72,22 @@ struct sme_populate_pgd_data {
 	unsigned long vaddr_end;
 };
 
+struct sme_workarea_data {
+	unsigned long kernel_start;
+	unsigned long kernel_end;
+	unsigned long kernel_len;
+
+	unsigned long initrd_start;
+	unsigned long initrd_end;
+	unsigned long initrd_len;
+
+	unsigned long workarea_start;
+	unsigned long workarea_end;
+	unsigned long workarea_len;
+
+	unsigned long decrypted_base;
+};
+
 static char sme_cmdline_arg[] __initdata = "mem_encrypt";
 static char sme_cmdline_on[]  __initdata = "on";
 static char sme_cmdline_off[] __initdata = "off";
@@ -266,19 +282,17 @@ static unsigned long __init sme_pgtable_calc(unsigned long len)
 	return entries + tables;
 }
 
-void __init sme_encrypt_kernel(struct boot_params *bp)
+static void __init build_workarea_map(struct boot_params *bp,
+				      struct sme_workarea_data *wa,
+				      struct sme_populate_pgd_data *ppd)
 {
 	unsigned long workarea_start, workarea_end, workarea_len;
 	unsigned long execute_start, execute_end, execute_len;
 	unsigned long kernel_start, kernel_end, kernel_len;
 	unsigned long initrd_start, initrd_end, initrd_len;
-	struct sme_populate_pgd_data ppd;
 	unsigned long pgtable_area_len;
 	unsigned long decrypted_base;
 
-	if (!sme_active())
-		return;
-
 	/*
 	 * Prepare for encrypting the kernel and initrd by building new
 	 * pagetables with the necessary attributes needed to encrypt the
@@ -358,17 +372,17 @@ void __init sme_encrypt_kernel(struct boot_params *bp)
 	 * pagetables and when the new encrypted and decrypted kernel
 	 * mappings are populated.
 	 */
-	ppd.pgtable_area = (void *)execute_end;
+	ppd->pgtable_area = (void *)execute_end;
 
 	/*
 	 * Make sure the current pagetable structure has entries for
 	 * addressing the workarea.
 	 */
-	ppd.pgd = (pgd_t *)native_read_cr3_pa();
-	ppd.paddr = workarea_start;
-	ppd.vaddr = workarea_start;
-	ppd.vaddr_end = workarea_end;
-	sme_map_range_decrypted(&ppd);
+	ppd->pgd = (pgd_t *)native_read_cr3_pa();
+	ppd->paddr = workarea_start;
+	ppd->vaddr = workarea_start;
+	ppd->vaddr_end = workarea_end;
+	sme_map_range_decrypted(ppd);
 
 	/* Flush the TLB - no globals so cr3 is enough */
 	native_write_cr3(__native_read_cr3());
@@ -379,9 +393,9 @@ void __init sme_encrypt_kernel(struct boot_params *bp)
 	 * then be populated with new PUDs and PMDs as the encrypted and
 	 * decrypted kernel mappings are created.
 	 */
-	ppd.pgd = ppd.pgtable_area;
-	memset(ppd.pgd, 0, sizeof(pgd_t) * PTRS_PER_PGD);
-	ppd.pgtable_area += sizeof(pgd_t) * PTRS_PER_PGD;
+	ppd->pgd = ppd->pgtable_area;
+	memset(ppd->pgd, 0, sizeof(pgd_t) * PTRS_PER_PGD);
+	ppd->pgtable_area += sizeof(pgd_t) * PTRS_PER_PGD;
 
 	/*
 	 * A different PGD index/entry must be used to get different
@@ -399,75 +413,109 @@ void __init sme_encrypt_kernel(struct boot_params *bp)
 	decrypted_base <<= PGDIR_SHIFT;
 
 	/* Add encrypted kernel (identity) mappings */
-	ppd.paddr = kernel_start;
-	ppd.vaddr = kernel_start;
-	ppd.vaddr_end = kernel_end;
-	sme_map_range_encrypted(&ppd);
+	ppd->paddr = kernel_start;
+	ppd->vaddr = kernel_start;
+	ppd->vaddr_end = kernel_end;
+	sme_map_range_encrypted(ppd);
 
 	/* Add decrypted, write-protected kernel (non-identity) mappings */
-	ppd.paddr = kernel_start;
-	ppd.vaddr = kernel_start + decrypted_base;
-	ppd.vaddr_end = kernel_end + decrypted_base;
-	sme_map_range_decrypted_wp(&ppd);
+	ppd->paddr = kernel_start;
+	ppd->vaddr = kernel_start + decrypted_base;
+	ppd->vaddr_end = kernel_end + decrypted_base;
+	sme_map_range_decrypted_wp(ppd);
 
 	if (initrd_len) {
 		/* Add encrypted initrd (identity) mappings */
-		ppd.paddr = initrd_start;
-		ppd.vaddr = initrd_start;
-		ppd.vaddr_end = initrd_end;
-		sme_map_range_encrypted(&ppd);
+		ppd->paddr = initrd_start;
+		ppd->vaddr = initrd_start;
+		ppd->vaddr_end = initrd_end;
+		sme_map_range_encrypted(ppd);
 		/*
 		 * Add decrypted, write-protected initrd (non-identity) mappings
 		 */
-		ppd.paddr = initrd_start;
-		ppd.vaddr = initrd_start + decrypted_base;
-		ppd.vaddr_end = initrd_end + decrypted_base;
-		sme_map_range_decrypted_wp(&ppd);
+		ppd->paddr = initrd_start;
+		ppd->vaddr = initrd_start + decrypted_base;
+		ppd->vaddr_end = initrd_end + decrypted_base;
+		sme_map_range_decrypted_wp(ppd);
 	}
 
 	/* Add decrypted workarea mappings to both kernel mappings */
-	ppd.paddr = workarea_start;
-	ppd.vaddr = workarea_start;
-	ppd.vaddr_end = workarea_end;
-	sme_map_range_decrypted(&ppd);
+	ppd->paddr = workarea_start;
+	ppd->vaddr = workarea_start;
+	ppd->vaddr_end = workarea_end;
+	sme_map_range_decrypted(ppd);
 
-	ppd.paddr = workarea_start;
-	ppd.vaddr = workarea_start + decrypted_base;
-	ppd.vaddr_end = workarea_end + decrypted_base;
-	sme_map_range_decrypted(&ppd);
+	ppd->paddr = workarea_start;
+	ppd->vaddr = workarea_start + decrypted_base;
+	ppd->vaddr_end = workarea_end + decrypted_base;
+	sme_map_range_decrypted(ppd);
 
-	/* Perform the encryption */
-	sme_encrypt_execute(kernel_start, kernel_start + decrypted_base,
-			    kernel_len, workarea_start, (unsigned long)ppd.pgd);
+	wa->kernel_start = kernel_start;
+	wa->kernel_end = kernel_end;
+	wa->kernel_len = kernel_len;
 
-	if (initrd_len)
-		sme_encrypt_execute(initrd_start, initrd_start + decrypted_base,
-				    initrd_len, workarea_start,
-				    (unsigned long)ppd.pgd);
+	wa->initrd_start = initrd_start;
+	wa->initrd_end = initrd_end;
+	wa->initrd_len = initrd_len;
+
+	wa->workarea_start = workarea_start;
+	wa->workarea_end = workarea_end;
+	wa->workarea_len = workarea_len;
+
+	wa->decrypted_base = decrypted_base;
+}
 
+static void __init teardown_workarea_map(struct sme_workarea_data *wa,
+				         struct sme_populate_pgd_data *ppd)
+{
 	/*
 	 * At this point we are running encrypted.  Remove the mappings for
 	 * the decrypted areas - all that is needed for this is to remove
 	 * the PGD entry/entries.
 	 */
-	ppd.vaddr = kernel_start + decrypted_base;
-	ppd.vaddr_end = kernel_end + decrypted_base;
-	sme_clear_pgd(&ppd);
-
-	if (initrd_len) {
-		ppd.vaddr = initrd_start + decrypted_base;
-		ppd.vaddr_end = initrd_end + decrypted_base;
-		sme_clear_pgd(&ppd);
+	ppd->vaddr = wa->kernel_start + wa->decrypted_base;
+	ppd->vaddr_end = wa->kernel_end + wa->decrypted_base;
+	sme_clear_pgd(ppd);
+
+	if (wa->initrd_len) {
+		ppd->vaddr = wa->initrd_start + wa->decrypted_base;
+		ppd->vaddr_end = wa->initrd_end + wa->decrypted_base;
+		sme_clear_pgd(ppd);
 	}
 
-	ppd.vaddr = workarea_start + decrypted_base;
-	ppd.vaddr_end = workarea_end + decrypted_base;
-	sme_clear_pgd(&ppd);
+	ppd->vaddr = wa->workarea_start + wa->decrypted_base;
+	ppd->vaddr_end = wa->workarea_end + wa->decrypted_base;
+	sme_clear_pgd(ppd);
 
 	/* Flush the TLB - no globals so cr3 is enough */
 	native_write_cr3(__native_read_cr3());
 }
 
+void __init sme_encrypt_kernel(struct boot_params *bp)
+{
+	struct sme_populate_pgd_data ppd;
+	struct sme_workarea_data wa;
+
+	if (!sme_active())
+		return;
+
+	build_workarea_map(bp, &wa, &ppd);
+
+	/* When SEV is active, encrypt kernel and initrd */
+	sme_encrypt_execute(wa.kernel_start,
+			    wa.kernel_start + wa.decrypted_base,
+			    wa.kernel_len, wa.workarea_start,
+			    (unsigned long)ppd.pgd);
+
+	if (wa.initrd_len)
+		sme_encrypt_execute(wa.initrd_start,
+				    wa.initrd_start + wa.decrypted_base,
+				    wa.initrd_len, wa.workarea_start,
+				    (unsigned long)ppd.pgd);
+
+	teardown_workarea_map(&wa, &ppd);
+}
+
 void __init sme_enable(struct boot_params *bp)
 {
 	const char *cmdline_ptr, *cmdline_arg, *cmdline_on, *cmdline_off;

From patchwork Wed Aug 29 18:23:58 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10580749
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 114BE139B
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 18:28:52 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EDCA62B9A6
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 18:28:51 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E0C172B9AD; Wed, 29 Aug 2018 18:28:51 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5BB922B9A6
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 18:28:51 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727818AbeH2W0x (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 29 Aug 2018 18:26:53 -0400
Received: from mail-cys01nam02on0068.outbound.protection.outlook.com
 ([104.47.37.68]:16160
        "EHLO NAM02-CY1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727399AbeH2W0w (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 29 Aug 2018 18:26:52 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=f6PW9E0NX+svtefZx6/rCifZcI4kR5EN7WimzZP/yVQ=;
 b=hz6KcMqADc9KYJ8AmYMZAqKkajDTh7u3nCofgSDN8I67DvafBFj3hDFZVFFCrx6yUiDfW0xowDcCcSh6kGp8WpPL2GQC7tVG/MEYyC1+HOJcIjEDeQQqtwQa+FZmJK/XYTNzQGICgZ9mt2qOnfJc93uZRbZaLnYWbbSl4gHOKe0=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 BYAPR12MB2678.namprd12.prod.outlook.com (2603:10b6:a03:69::27) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1101.14; Wed, 29 Aug 2018 18:24:15 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v3 2/4] x86/mm: fix sme_populate_pgd() to update page flags
Date: Wed, 29 Aug 2018 13:23:58 -0500
Message-Id: <1535567040-1370-3-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1535567040-1370-1-git-send-email-brijesh.singh@amd.com>
References: <1535567040-1370-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: CY4PR1801CA0020.namprd18.prod.outlook.com
 (2603:10b6:910:74::33) To BYAPR12MB2678.namprd12.prod.outlook.com
 (2603:10b6:a03:69::27)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: f9674059-9b18-4ffa-aa57-08d60ddca101
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:BYAPR12MB2678;
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2678;3:PHPA63FKSOotxPxRnU+KYV9UL5D2aD6g4K9RjWnJzn/j6NmdPOTO0SnzCCPWd4wn+6AzRfgelpV+VZtVnm3+2ieasslFqTxdoZtEw5D0wu1Q+Sqd8VcLACayYH+48olM5M+480JdQyDIHZdUWf0a2K+kApwP+FPApBzd2UMhaLE29vZP7ToBrbeusAtwfcdkJBr5kHj5k6/mgZc9NuC0RG9e0sOxU/M3JOtQe4JVTa9kv2hG48lgFmHGivVAPPYW;25:QUbc++g7/jxAsHyfmUGqBdzsTIlJ7KKdIlLSTVhxMUoEnJEoNlgqnRLPzkTwFxg+qbjPVvylbF9yVfjlbNgxqFUByqvlAL2p/zkuy3Zb1RjfYJaN6Mqz8oEQaFSOJCGVH7spPe8Au6HujRejFfogM1wjSbwgSLtMfkoOFJsm8wyftpdpPTczntIaXqjYcY1crZq+jOaqH3b8rRK9P9RpSCyGpz5UlzP6bTINwFPRcPOlAngFUVz3CQDQR5IjoGCBwT4Mp2d+xyoKM8sAHDjF5Fm19uJeC4Mds0QN46+qVCvsl3YRwp6Ph5Mjm5NNyqziOnIy6SlsYYninIebsRWNNQ==;31:gAMb4oVRPfeRaXjtwerIw6vSYQOHkBX4AW6TwQVR26TzjBw0bG+WCO8aRR1nkjr5Db/MPQWEOQckQKhPEXm76Eu/qve5O9Qu7GdNSRxc+VI0MMNI94DhvJOuyYrNSkpa5XxqSFQCGnidqVVpSzUOR3IkVQZujZw2RD7zQ4DcAtBS5Bu0VDrdnI7V2/ugK89PwZ5aa/hD0tBHtt0YQRWNHBqymNmioHS4fn3QTAe1HRM=
X-MS-TrafficTypeDiagnostic: BYAPR12MB2678:
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2678;20:N8LXYy+zd9JE+7RZhZCHfre6adQYJ1gSiGg62hniWVHyk8af0AdFeouhk8jgflQ/hw46FzheVUUdO1N5QrKi3eYogdOKZaOHajE6NhUgV847mJOoSCIQ1bET6jn+CoVaXk0jpI+UYfKLibFKk8pAp3PQecNDGWS7elbGaTiNm1IBZsohEvV57r4ZEeZ0IYvMS8STSjja364grVFs0Y2V66djMkswvDF4zt8A/YlUGx7ytqV20LbdQ41I6c/nQdh0KOkS9GhdniEHmviFauJmzgG2RnhQ+OUzPiOgTPkc5P0QzfofnAQXu1NaIDBzF3+iKdCm3EtL9pUG8k+TnuxDs/k2JbCjND+z/76nh1F+vl9ROVCnFdTRz9OPa9LT2XebdzJnSkfsmKO2vb3efTTUhJZC/AEvZ8OGKDfih9d3tV/NGe8eEPLUeugoFxvvrFc71ddh3+BfCIKafHSnT8Jn3Vf8MJ5eWsj8FyYaDziYt72lvV8D/1nEVyuu8TxsiOiT;4:0c8ra8xzGMSORGTcsVngQ8IVulxsb3Ep0ixpA9nqfoagsNhLyovyPKhyMb9O8yYhrBkic/uxOLu9Sfurr88PRGI8pt8wvsezsKTCbJ1rxxtYUAzuxKoAz98SAoI7fBsmuS1Zh5ka/mLkB4pV2rdcDNBaSoDOSg8EDZKcpltkJJX6qOJwTKJJMMZl8varLIDBWkFCdlJYPf2Esqu95DZfqzuuOBv6gvqTLUIbEowj2aXMSIU9qIyIN3LEoyrzhvGJd6QrtMTnurDlhRh4Z6T+Xf8LZQKt3UTsjMr6H/5v4umI2CVz6PPu0IOqOX+Q83roNiu0TR5abcD3w2cnTS0NfOY8MAyYA8fhjWF4DaOKndU4pFP2VK+0chvY+SDTWO2v
X-Microsoft-Antispam-PRVS: 
 <BYAPR12MB26781B0E728C987F2BF38F9BE5090@BYAPR12MB2678.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(823301075)(93006095)(93001095)(3231311)(944501410)(52105095)(3002001)(10201501046)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123564045)(20161123562045)(20161123558120)(201708071742011)(7699016);SRVR:BYAPR12MB2678;BCL:0;PCL:0;RULEID:;SRVR:BYAPR12MB2678;
X-Forefront-PRVS: 077929D941
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(396003)(39860400002)(346002)(366004)(376002)(136003)(189003)(199004)(478600001)(386003)(6486002)(53936002)(5660300001)(14444005)(54906003)(4326008)(6666003)(97736004)(25786009)(23676004)(7736002)(52116002)(7696005)(305945005)(76176011)(50466002)(15650500001)(50226002)(53416004)(36756003)(81156014)(81166006)(8936002)(106356001)(2616005)(956004)(476003)(3846002)(6116002)(86362001)(2870700001)(2906002)(47776003)(446003)(68736007)(186003)(16526019)(486006)(66066001)(316002)(105586002)(26005)(8676002)(11346002)(44832011);DIR:OUT;SFP:1101;SCL:1;SRVR:BYAPR12MB2678;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BBYAPR12MB2678=3B23=3AcQn03M2?=
	=?utf-8?q?45OnFbM0S5pCs/6l+YOvwAWICXFIw7sgp1NUISJxaKAYCGvpdDi5ZJac2oJgng50x?=
	=?utf-8?q?jcoJwRZJyc0tqvfGSNZAd+JdrZUyk0MOGxyrTHEpHxCt0YeIkFN8A//QlEEWjdcic?=
	=?utf-8?q?oGLivEFttv3PzKFGFduwiMboEYTJo9RJia8asS8zUA5nhmYqmRiXVfrTveeF9c8p5?=
	=?utf-8?q?A0jLzD1cLibv790j8nEDj6nqcwCcss8px9p2JL29wIOQD6OLV0y+Xt+fLGsmEbKvC?=
	=?utf-8?q?9zy5F7BpqEKErgH9lzP1brBakyhbIgygr/IN01ExTuLaPkEMb7SqsnhhNqoS9kxEu?=
	=?utf-8?q?e6KeTTLLU3UVV3z/cbeTU0XBlxnJ9+14p1sIQxi273icCE2l7SFQ1PcUCxCV6P3Gs?=
	=?utf-8?q?FA+5dtoXVuLctK2RI354evIGuph8jOOecx61PLnBxZL3NIIE8E/yQNW0/9e0mofpw?=
	=?utf-8?q?JsJxTK6aECXCcj/+1Smnm+oTbIo2Qw7fYbU+QX76IRlkB6X5BeFlpRcwuoIF3pEBv?=
	=?utf-8?q?gg/CsThCKuLAl2kn/xoxMC2+WRhpULRIhhddQdud/Lq74h4Ko1dFhtkbQzIeJciAw?=
	=?utf-8?q?sdrsNfV8bIQVi7gOv7tbgpQXWAS7Ev6t57AHIPuQpNMxf6IZYh2QITKHCexnbzZrd?=
	=?utf-8?q?Zq6q2IqvMCHJr15IiASST05MOGsZFBMpQtse3sUc5HFlIYSxyPj378t+4OxoWsYx3?=
	=?utf-8?q?HfccWPAZQVzCALndcWzs3osu9cfiPma6iBNlfGkNPWB6hRIn0qBEe8NtHXn8gMdWi?=
	=?utf-8?q?Lw9O0CVJbBLSXXHjrOBAobwmB1DwGbRLbji2souJZRR2Q3Q5mLGLLHpSHGtQ1E51K?=
	=?utf-8?q?+XFaDUv3OpKr4uFJ1wh2rSRA0FBEV5OoEiHt1eNnBF2ZydW9sQyr4075oizz3ovx+?=
	=?utf-8?q?2VZqY5j2CZvwMJ2MoBqeu97jGClytEun+cyQeGZ9D8zMW70oJs3LdHE36VPF9uyWt?=
	=?utf-8?q?ymcXVW32HmXgHszxL1OJbZDti6gSMXZDl8IsfU20fgHu1YRkZXKDUlYpseFD5lBLY?=
	=?utf-8?q?m/11QvZRRpDDgAU/9gzNYtwE2ttBIsFSwvlh6tpv1CfExddt+3JW6+X+ShxrXfacy?=
	=?utf-8?q?9xytNGzUj5ACAbjQcvc545KZbPG1jIzmBVKvhmrcFBI+154qSWWYV/+JFRUiPI8jr?=
	=?utf-8?q?4XykqAg9WuJ9UfrdkU9jKr5gAjkNtzih+fhEHHiSh+N3IhIRx9YDg0K2cJhAw=3D?=
	=?utf-8?q?=3D?=
X-Microsoft-Antispam-Message-Info: 
 WpH0h2pRsG8XbZbXsaTdvQnLWyYDoZR0DQEHxM5zlejdmzTaIByMZ1ppAeIICRK2u5EUJb+hYY7Yz7o3kkrjIxjprVY5nfAaY4kTEfmJ0b32cK2wghlCnyX1iAli0l5Qixy7vEM3TaUfdVNUPmWja3FZT79f05P2dV/XTYPs301+zbpsSY9AMt5SJ60fj3AjphlQuu4Kl5iWgky5EjGR54qPNzLgMfj3CB1H0haEa9tJcMrHto+7YLCHWOgNVhowSioo8en2y3NuIZqZyutH4RcVqCJ7nun0OYbb6RTrkCHwRb+A/eCyHRn4Kjo/VThlDNY64JrCgyv0AVv8rhiztWXHQZj0ybI5k88ubjLKVQo=
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2678;6:lxgrl/5UQVXqJLbqrP3HIDKdFMInbAGHZIZ+aGSO2wyn6Ip3V64oWs3saq60ep9IFPgVjyyL9JtYenYwM+ZwMhuVX2QwdfuVnQNG6x6JGCw6pMoCAziFVGtzRh8LspK7qP1rAs44Ir36o0uQuEnDMdHxaJbRkH7TQIRF+ImTqOo8QZ2rsl6xy5NxxMOnN73dzC5+Q4SU7BbR+OVHfjJv21M/nXtpKQa5WSvneZwvCWhPhChPKqEffm1xNgVsCm7IV+CNIPE6kjTyc4Ox14YQlA1tUqDXUjCYDt/oEWGSUZqGOcDVHcvM/UOS5tsp8XW5Tp3/6plcYT4dl8KlPPcGB/u4+ta9wy4Hi4cAOo4NX6YeJRf84RN34yf5+6j15UFL4J56QZbHZaFyYU9f317rVQRYlONwA3TQQL/nMYXqXykqCmgLN2Uq+vTluDi/fMQmlJEL+xF3YQFjt4AlyVi8ag==;5:aTCBA5H92EzGDHDTMBHc/HINXStKxkUhVybDvJr5Sgd8FhzecVz05cGkfwOMlU9CziJD03iaTy1TwGNNSQaogG+qY4ZbAyD8aXjrhfYi9+nrlHi8TrtYXVqhWw7XOvA0cLVDctMbMRTr+izTwQDf3TGSuu2tNmsZxJXLjmyZLjk=;7:IzNuDdUpYN7eaBGQ4TuB4xbY+9Tc7+rPn5Uj1S+CLDAaisboml08je8qMa4cwTEYl3Jd4wAFNNN9SkQWgE9z6J1b3s8rcEWUPs1G9oeo77H8nSQdP/t8zNDdGvKTs/0EPNcJws0Ejf98cZfMF3SxXh9aPSFjVZG+eXDmOtL2kCpI4lfLZQDuq4Qw91SHWqEeHoNdp8KNX80nIa/3Ujgq3PL9VISTS+IZP0CalX0OaAi1vO0vqgvHeto7bk+NhqJ/
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2678;20:3AUTPYXum7j8DeqgjjeL/j5khX05OJrQxiEHPFCrh0MgQYaQMbET/JaqhEZl35PMimeimx0shLsnnBS+i9xJeJSlu3r876kibGNq+fvTg/k7lidWLzQKoXn6mBYuYntItNBBzm9uo8XXyx+lQezCIBcmAD4iKWkbI2o/E3h5Gth/fcsNDZWlxcJA2gv0ZACJchx5BBix+XrLwAdxZQEL8VOnngPBU/4QHMlRaVJHJCDyziGAdOfsBzAVcjKK7NPf
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 29 Aug 2018 18:24:15.2366 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 f9674059-9b18-4ffa-aa57-08d60ddca101
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BYAPR12MB2678
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Fix sme_populate_pgd() to update page flags if the PMD/PTE entry
already exists.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: kvm@vger.kernel.org
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/mm/mem_encrypt_identity.c | 6 +-----
 1 file changed, 1 insertion(+), 5 deletions(-)

diff --git a/arch/x86/mm/mem_encrypt_identity.c b/arch/x86/mm/mem_encrypt_identity.c
index 92265d3..7659e65 100644
--- a/arch/x86/mm/mem_encrypt_identity.c
+++ b/arch/x86/mm/mem_encrypt_identity.c
@@ -154,9 +154,6 @@ static void __init sme_populate_pgd_large(struct sme_populate_pgd_data *ppd)
 		return;
 
 	pmd = pmd_offset(pud, ppd->vaddr);
-	if (pmd_large(*pmd))
-		return;
-
 	set_pmd(pmd, __pmd(ppd->paddr | ppd->pmd_flags));
 }
 
@@ -182,8 +179,7 @@ static void __init sme_populate_pgd(struct sme_populate_pgd_data *ppd)
 		return;
 
 	pte = pte_offset_map(pmd, ppd->vaddr);
-	if (pte_none(*pte))
-		set_pte(pte, __pte(ppd->paddr | ppd->pte_flags));
+	set_pte(pte, __pte(ppd->paddr | ppd->pte_flags));
 }
 
 static void __init __sme_map_range_pmd(struct sme_populate_pgd_data *ppd)

From patchwork Wed Aug 29 18:23:59 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10580745
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 9583D14BD
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 18:25:42 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8781C2B9B4
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 18:25:42 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7B68A2B9B7; Wed, 29 Aug 2018 18:25:42 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8A6692B9B4
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 18:25:41 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728395AbeH2WXf (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 29 Aug 2018 18:23:35 -0400
Received: from mail-cys01nam02on0069.outbound.protection.outlook.com
 ([104.47.37.69]:40616
        "EHLO NAM02-CY1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727698AbeH2WXf (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 29 Aug 2018 18:23:35 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=EHTnCaCyYQku3G9QtxRihRo0HvohR6vYT2FmWsYILWU=;
 b=Rf5JC0IqdUwIK8YitIHjVuqHtA1A27sqRh4r/DNCFzjz35ckUj/9h4wts0jZlCzUFCQaOCouajWcvC6WrDhRLp5U7SEP48MLAYzA/yDMsY0tQieC4uKSxlpX+yx31DF0lbMpoAl+iLi3OgwMZL4im+9JL3x1lQlHNgUilMqrCe4=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 BYAPR12MB2678.namprd12.prod.outlook.com (2603:10b6:a03:69::27) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1101.14; Wed, 29 Aug 2018 18:24:16 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v3 3/4] x86/mm: add .data..decrypted section to hold shared
 variables
Date: Wed, 29 Aug 2018 13:23:59 -0500
Message-Id: <1535567040-1370-4-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1535567040-1370-1-git-send-email-brijesh.singh@amd.com>
References: <1535567040-1370-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: CY4PR1801CA0020.namprd18.prod.outlook.com
 (2603:10b6:910:74::33) To BYAPR12MB2678.namprd12.prod.outlook.com
 (2603:10b6:a03:69::27)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 379e1e9c-6281-4314-a0a4-08d60ddca1f9
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:BYAPR12MB2678;
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2678;3:Or3zVSaa0JzY0wG3tX2fBHlgO6SgbYmdIHAMvkYCzd17eca4o/xuy+9y+dY+hbRF+PXHmcLBNqY5e9CupJOZmoJ0Qurk9uUQrsrwLxYaleQPDZsfgruM8KckxOYUcNKt6kf2eN+ke3ZwrYANDWM412dinV6ZyZyNiBNGQiNIXB2XA5dsWoqnofNH0kzlROm5Gprlqfx3l8ChgapkiCKd6Y5LTdpk9JAhYkZo8apkTjnmdjxnW7YETqYO+nGRZUrx;25:2vYISjCNvxMOUOFxfCPXwAXCdkqaGCV+GXx6PS6xmcXgryw2hgSSDfVyXOd8eM+RgqwYJbhJ010+hhHSclCipnKByM2IxMUKHJxlh4aMmPbLlG0HIzQgVby6OoFseLW1M/sm/LiJj0MNUJ53pYNa2FtsNzUMPFLBHeFMg+h5lvEYyLjam/QfhLDuIMCS5BbJJsgrpKPZF/E7eMiF36LdScpZQ693PtchnRYSY1geiuwZHM/CSVyyB/piYThBRKCYcm52nWcfoj/oGJinHbtc3o+E+FhH/0Kkt5UmpjecLBWKbltc+DXAoTTOpcC4IMhpxL4R9U0LcE0zFWnUN7mSTA==;31:uY5yO5jOMVE7VUbuZAK/YIMG9M2NY5eQvvwf9z1D4xq68hbYps9HiL68HHwqBiHJP2QKgXIGiHYDeAhqMN31np/XrwVS/AAneDHC1G18YWi50C3VrmQBXahgZFKxh523NJIsWHhdA2a46EPS6Vr8+ucQ+4C5SZEc/YI/B41TP+QlLXEf/ROVpFmEBmhKpB+iKwZooC75Vq2a9fR1RnLsQZThUBrYqzQjiYTwozHbcvQ=
X-MS-TrafficTypeDiagnostic: BYAPR12MB2678:
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2678;20:1f4BfvdXdN4GsLTVUpV7h/Jb+OjJ1hclbvCc4izP4sCqKg72FAoG+8lK2FX7RTdzYynqlcgcKAIiBRjQJ2hjSYKpwBIj90rxbZJKNv7z7oA2/IXsUC90CslNBTNJIqSot2aflFd3XVM+8CsR5NBrA/mVoyiXD5BpRT3AbihfWeMeuI7FDUtbnvtqcAvKZK6Pt/JtXhz0vCrVrJ+Fb2TPKdbfU/ihmVzdTKFA8EKrsrR2OcteeycHXLupUOLuK44GjIt/fCJeYhh6uNi7xq35E4DEcuWVgIR7wAczS0/Mm8XREKG8BNp8EBXnT+ZOciTb7+koMghjIwnjT7scYJiCCnhNgjmIbheBbQ1itFL0yTSr6XPXewidymuyZFY3LQO2y7SpJNLIWEC1QM0S4yULTp0dU4KaOFN4zAHxZ80eKPOcPN+m0/5Icfyd4PPgGkpSYTB1s4N1Z0IixeTYsb+mbvrSOUVY1kqFNEADm7D2uiNE9hDVe+oLFj1rYzfEWSNs;4:DPngW9Dt8xD5KNuz4HPeAhemQPdXdHSnWJZNjSFexws+Spf108L1isTxi0v0l0V8aHbd8CHTInMXNltYCrQDsEz+tMf+tUoVUGgmLFhvmljANXZa8BWlm6KFBcY+c5kPW5lhtK/JJUa+BUn2FtZW+BHPhE8Lg66wpJ9bH0L/CFRanbfzTZIQusWht6AgOCvsZtNCuChQS72Pv01NZRu/hEhxFRn9ppPsxqTCOOwB1d8OHRglQYYZRgwXRKbk2NRqqbakmti2tLFkDhcZxOaQD1zp3/JAmpGQI+nNlQgNIciWfonpuBwCvtBpnple5nXOcYRX2fDkuhiDarynQIOMPse7y31TmqBkTpD+5YkkjS6ygMJx3/exHtLXsViLkLG9rttVh8rm4WcMj96yPatcjA==
X-Microsoft-Antispam-PRVS: 
 <BYAPR12MB2678BA6453C3E540219A638EE5090@BYAPR12MB2678.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(163750095850)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(823301075)(93006095)(93001095)(3231311)(944501410)(52105095)(3002001)(10201501046)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123564045)(20161123562045)(20161123558120)(201708071742011)(7699016);SRVR:BYAPR12MB2678;BCL:0;PCL:0;RULEID:;SRVR:BYAPR12MB2678;
X-Forefront-PRVS: 077929D941
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(396003)(39860400002)(346002)(366004)(376002)(136003)(189003)(199004)(478600001)(386003)(6486002)(53936002)(5660300001)(54906003)(4326008)(6666003)(97736004)(25786009)(23676004)(7736002)(52116002)(7696005)(305945005)(76176011)(50466002)(50226002)(53416004)(36756003)(81156014)(81166006)(8936002)(106356001)(2616005)(956004)(476003)(3846002)(6116002)(575784001)(86362001)(2870700001)(2906002)(47776003)(446003)(68736007)(186003)(16526019)(486006)(66066001)(316002)(105586002)(26005)(8676002)(11346002)(44832011)(142923001)(101420200001);DIR:OUT;SFP:1101;SCL:1;SRVR:BYAPR12MB2678;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BBYAPR12MB2678=3B23=3ADEN3WTd?=
	=?utf-8?q?Mmq2pqQTCcK5AwebbkCinoSorxfaMmnIVZnItzMKFfCpduG2INfpggwwoVxsa0Tw6?=
	=?utf-8?q?Q9kRyE1MJQ3Mjx0oU+HqNIxoa3XZ1WWw4HE600zE1QW9GhcWrwfItL3pnSKlk9S7Q?=
	=?utf-8?q?zHqI01M+/XzfsquF+Jwf1H1xv5Sft2hz8lJjSrtGstAc0RR3xM3v+gxRy30TjEh5L?=
	=?utf-8?q?aL4CABBiS+3ZgnuiqL1QqBWo0DeExGIe/df2KxvPzABfCA7iSnWsmce538ZRVgNLz?=
	=?utf-8?q?8zFF5XmW5VfuI+xwuyVp5aK8N3Mq6OSQrlpbE7ANdz8+cW6kLC56nnVKCcsLkkaZd?=
	=?utf-8?q?07Xjh+TtimaSSC5YOUkhMaAVJmJMBnFwlcCvW40ZlErX44ul5JYUrEXC4fIW/KwL8?=
	=?utf-8?q?fW4zGYRDqFofsGfrV+mvEOPZ0jmvX6r0TcblRPDxKMloxvciclPjkR+Hnf5JH3piY?=
	=?utf-8?q?CpfwEQt6y02gvexR46jn9q+kPy4/7gWcfu2bTYS0sCaKMTanANMiO1xZq7/eAL1fa?=
	=?utf-8?q?zT/1Y/QHrV6Pee8q+h+Ks2fb/Xqy2adYUv64aqVHMGdYhXK1zHiNFh6mo1NYbjAc0?=
	=?utf-8?q?lSBHrK/nNbT8WbgutRnPf97bYtAQPDxZZRfXBKSOUc5Nrm8pwAbodJnXrh+PvfLGB?=
	=?utf-8?q?LOY2eCQ24ASAobPJdT1D3QZdlHvV08xJ3M11mSZOvammtwu0wqbrCkPu2M9vw6zn0?=
	=?utf-8?q?OOZ7hUgjGSpj4FjOCkccCQ5OzIyiKGIrm45RO4CFj3jt1tklVjGO3UZQIzkUpmfNS?=
	=?utf-8?q?gPWeeNnOblZractSrj8aU2aEk0ubiuDfIe9QjmE/PORy3yNHGwdJ5ZqjocSugKhUN?=
	=?utf-8?q?gB1lr6GD6PjKT/aIkMSjSD08Rmpgqs+HrSMEA15avXLxTuh/0m0V29Rt+gqP/SC7N?=
	=?utf-8?q?OSB4Bw9eDfEgS48YWcg0OIcFPFXNA0KpnPA/IuE893YAYAku1uZch16bmpMzPisTZ?=
	=?utf-8?q?HrFN63RGGvLPx+YN6BhowFlAsvJFw1idmb2o0lYhWXoIGcKd75u0aT5UqFVZqWsYA?=
	=?utf-8?q?rr3egzpBGGSIoSqj3cLi/6GB5Ie9Xpl6/YSmTlmBhrGXcQbaYt/mKY6NedON5v1gr?=
	=?utf-8?q?LS5KGraln7npneVCE5zsCEkUK4gz9/yVgZrLh2kfL35qtFZ+6pEmjdonXcO4wvQcn?=
	=?utf-8?q?UjCEQ7UMGWde8VpyMIiRju8sggNtR8w6qokAMIoMt7ouBwpxOGsU0r4j4aOU9Gjog?=
	=?utf-8?q?jeo1wNLwMT2K/GJvw=3D?=
X-Microsoft-Antispam-Message-Info: 
 H6oQsnNBp0R9wU1rwzi0FXNb2T5dTH1yL0xtLwNyg5Wna3YqXhkIHrpiyWToW0MO1wBcgCT1366reQZyiKWEo9fV60sP02Z4PJp09wTJdZOt2806ljjJnHcQvf0m1KfLdIFOmJKqWt83cXbwyok0jT33lCG+amRG3twnS0WIWTtO01mMtKCGAs0+ruoawZ4qllAQCx70vFbSLEEFOYZL+bVckCMiXae+l8T1uqnqcblMk+cVV0SJif7ttQxK6Ui2qObYqSXfptmtraGboqo5rzp3zDkbeX0WBEDB9an88ufvL81eB0b/iCTrAVI6cjx7QYFJLxBGeRb8Jaa5mCfiw339tyKN2oI1pupcGzLHa8g=
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2678;6:2QC3+kE718Dtw1bZFsdatH8d+M7h82mKPNzuZdT27rSDlofRsmk4U6ygjezGJ7lW+iChFUFnqnn+QFeev4D/cTOj0cvZki6LNst9MZjDD2zlPD6tt5EjzE/et0OQCHVHHffeRY1cI2KqSXesGwA+PUmPEe2E2xhhG0GQyv43KJOft1NJKNTQxwdFknG3XeWgSM9jzREBpKyx3U5YwZYX6oVWR8bmkMUhUtSeGixuytJw82xA6BzQ8PaQT7axP71vs/wN6Rd6m1+B0kWPhMAkveKYo9ekzeDZKVRRDT0rgWNruy597ZtBOGNxeSfPF1DRA/kO6MHMJSQ7FRjxEQ535TrZUGW63lLCQqT+JU9n4eqSKoUOEQxiMAGd/O9h66SZwiY2A3iemudIVNFPX9RvUUVpcGI2oEi+ziirzkNifZ5G08nSalcO1VsWtDjbqNHiCwby65rV3DzRvy4zKF7a+w==;5:Qb9LjST0wioK7JamMLNMpXLhX/8rhRJS3DTvZSyoWFedE6klV5Uyadply4jM7YnLbuEnNtFwaGRnWi7exQYs0V4Wnmh7VNE+k0Q2gl0SnCoN0FUo/0nm0LefAIO720v2b/Wo1lMNwWAE1uIg7AhpM6k+R67oTdaY84mB0hMiVq0=;7:K+JviqxSG/PdDqk0lw9rJFGVi2MqfpvJ471zH5HXRS876TAWfTVcv11KxALwxKvwf2BQI4F/6eCtU0ob5tPXU7EwQlybblCIQ+p54aqV00m0PWm04KMH8yQ5hXEFdZtpg8RAJ9oQJqWctZiEkC0qUUhEJS/o7ORSc/i/9eHvVt/bnCb2u7T9Zar6RhmjadF7BCmI9koCTh0pUBSYlc0adF3wta70SvnOBvMi719IP7GtKV6Uy9LolgXXhMjspgtB
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2678;20:co5kvKe5/SJTCyMRlsxMCsYfjYUAkI9edyoKWjRMRi/htquIZO+hbuIB1gtuXZd//TZ2Bfb0WaT6NGTJYvmX+YcN9iOyu4XyC++Uo4hMqfneDbc/r/jAY5YMvhy3137i5SO2Na1dfTfTzZrDPOfaO+Tini/m5J3VjWmDBr4cnvXEVQ83HewTWxvjunGidBEWx2JihOetkUE8g1d4fgB/Aa8XC8DbRtKqVMwX2RL9RQNOfGj1KRy/92H1LPPbMteR
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 29 Aug 2018 18:24:16.8617 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 379e1e9c-6281-4314-a0a4-08d60ddca1f9
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BYAPR12MB2678
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

kvmclock defines few static variables which are shared with the
hypervisor during the kvmclock initialization.

When SEV is active, memory is encrypted with a guest-specific key, and
if guest OS wants to share the memory region with hypervisor then it must
clear the C-bit before sharing it. Currently, we use
kernel_physical_mapping_init() to split large pages before clearing the
C-bit on shared pages. But it fails when called from the kvmclock
initialization (mainly because memblock allocator is not ready that early
during boot).

Add a __decrypted section attribute which can be used when defining
such shared variable. The so-defined variables will be placed in the
.data..decrypted section. This section is mapped with C=0 early
during boot, we also ensure that the initialized values are updated
to match with C=0 (i.e perform an in-place decryption). The
.data..decrypted section is PMD-aligned and sized so that we avoid
the need to split the large pages when mapping the section.

The sme_encrypt_kernel() was used to perform the in-place encryption
of the Linux kernel and initrd when SME is active. The routine has been
enhanced to decrypt the .data..decrypted section for both SME and SEV
cases.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: kvm@vger.kernel.org
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/include/asm/mem_encrypt.h |  6 +++
 arch/x86/kernel/head64.c           | 11 +++++
 arch/x86/kernel/vmlinux.lds.S      | 17 +++++++
 arch/x86/mm/mem_encrypt_identity.c | 94 ++++++++++++++++++++++++++++++++------
 4 files changed, 113 insertions(+), 15 deletions(-)

diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h
index c064383..802b2eb 100644
--- a/arch/x86/include/asm/mem_encrypt.h
+++ b/arch/x86/include/asm/mem_encrypt.h
@@ -52,6 +52,8 @@ void __init mem_encrypt_init(void);
 bool sme_active(void);
 bool sev_active(void);
 
+#define __decrypted __attribute__((__section__(".data..decrypted")))
+
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
 #define sme_me_mask	0ULL
@@ -77,6 +79,8 @@ early_set_memory_decrypted(unsigned long vaddr, unsigned long size) { return 0;
 static inline int __init
 early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0; }
 
+#define __decrypted
+
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
 /*
@@ -88,6 +92,8 @@ early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0;
 #define __sme_pa(x)		(__pa(x) | sme_me_mask)
 #define __sme_pa_nodebug(x)	(__pa_nodebug(x) | sme_me_mask)
 
+extern char __start_data_decrypted[], __end_data_decrypted[];
+
 #endif	/* __ASSEMBLY__ */
 
 #endif	/* __X86_MEM_ENCRYPT_H__ */
diff --git a/arch/x86/kernel/head64.c b/arch/x86/kernel/head64.c
index 8047379..af39d68 100644
--- a/arch/x86/kernel/head64.c
+++ b/arch/x86/kernel/head64.c
@@ -112,6 +112,7 @@ static bool __head check_la57_support(unsigned long physaddr)
 unsigned long __head __startup_64(unsigned long physaddr,
 				  struct boot_params *bp)
 {
+	unsigned long vaddr, vaddr_end;
 	unsigned long load_delta, *p;
 	unsigned long pgtable_flags;
 	pgdval_t *pgd;
@@ -234,6 +235,16 @@ unsigned long __head __startup_64(unsigned long physaddr,
 	/* Encrypt the kernel and related (if SME is active) */
 	sme_encrypt_kernel(bp);
 
+	/* Clear the memory encryption mask from the .data..decrypted section. */
+	if (mem_encrypt_active()) {
+		vaddr = (unsigned long)__start_data_decrypted;
+		vaddr_end = (unsigned long)__end_data_decrypted;
+		for (; vaddr < vaddr_end; vaddr += PMD_SIZE) {
+			i = pmd_index(vaddr);
+			pmd[i] -= sme_get_me_mask();
+		}
+	}
+
 	/*
 	 * Return the SME encryption mask (if SME is active) to be used as a
 	 * modifier for the initial pgdir entry programmed into CR3.
diff --git a/arch/x86/kernel/vmlinux.lds.S b/arch/x86/kernel/vmlinux.lds.S
index 8bde0a4..78d3169 100644
--- a/arch/x86/kernel/vmlinux.lds.S
+++ b/arch/x86/kernel/vmlinux.lds.S
@@ -89,6 +89,21 @@ PHDRS {
 	note PT_NOTE FLAGS(0);          /* ___ */
 }
 
+/*
+ * This section contains data which will be mapped as decrypted. Memory
+ * encryption operates on a page basis. Make this section PMD-aligned
+ * to avoid spliting the pages while mapping the section early.
+ *
+ * Note: We use a separate section so that only this section gets
+ * decrypted to avoid exposing more than we wish.
+ */
+#define DATA_DECRYPTED						\
+	. = ALIGN(PMD_SIZE);					\
+	__start_data_decrypted = .;				\
+	*(.data..decrypted);					\
+	. = ALIGN(PMD_SIZE);					\
+	__end_data_decrypted = .;				\
+
 SECTIONS
 {
 #ifdef CONFIG_X86_32
@@ -171,6 +186,8 @@ SECTIONS
 		/* rarely changed data like cpu maps */
 		READ_MOSTLY_DATA(INTERNODE_CACHE_BYTES)
 
+		DATA_DECRYPTED
+
 		/* End of data section */
 		_edata = .;
 	} :data
diff --git a/arch/x86/mm/mem_encrypt_identity.c b/arch/x86/mm/mem_encrypt_identity.c
index 7659e65..08e70ba 100644
--- a/arch/x86/mm/mem_encrypt_identity.c
+++ b/arch/x86/mm/mem_encrypt_identity.c
@@ -51,6 +51,8 @@
 				 (_PAGE_PAT | _PAGE_PWT))
 
 #define PMD_FLAGS_ENC		(PMD_FLAGS_LARGE | _PAGE_ENC)
+#define PMD_FLAGS_ENC_WP	((PMD_FLAGS_ENC & ~_PAGE_CACHE_MASK) | \
+				 (_PAGE_PAT | _PAGE_PWT))
 
 #define PTE_FLAGS		(__PAGE_KERNEL_EXEC & ~_PAGE_GLOBAL)
 
@@ -59,6 +61,8 @@
 				 (_PAGE_PAT | _PAGE_PWT))
 
 #define PTE_FLAGS_ENC		(PTE_FLAGS | _PAGE_ENC)
+#define PTE_FLAGS_ENC_WP	((PTE_FLAGS_ENC & ~_PAGE_CACHE_MASK) | \
+				 (_PAGE_PAT | _PAGE_PWT))
 
 struct sme_populate_pgd_data {
 	void    *pgtable_area;
@@ -231,6 +235,11 @@ static void __init sme_map_range_encrypted(struct sme_populate_pgd_data *ppd)
 	__sme_map_range(ppd, PMD_FLAGS_ENC, PTE_FLAGS_ENC);
 }
 
+static void __init sme_map_range_encrypted_wp(struct sme_populate_pgd_data *ppd)
+{
+	__sme_map_range(ppd, PMD_FLAGS_ENC_WP, PTE_FLAGS_ENC_WP);
+}
+
 static void __init sme_map_range_decrypted(struct sme_populate_pgd_data *ppd)
 {
 	__sme_map_range(ppd, PMD_FLAGS_DEC, PTE_FLAGS_DEC);
@@ -378,7 +387,10 @@ static void __init build_workarea_map(struct boot_params *bp,
 	ppd->paddr = workarea_start;
 	ppd->vaddr = workarea_start;
 	ppd->vaddr_end = workarea_end;
-	sme_map_range_decrypted(ppd);
+	if (sev_active())
+		sme_map_range_encrypted(ppd);
+	else
+		sme_map_range_decrypted(ppd);
 
 	/* Flush the TLB - no globals so cr3 is enough */
 	native_write_cr3(__native_read_cr3());
@@ -435,16 +447,27 @@ static void __init build_workarea_map(struct boot_params *bp,
 		sme_map_range_decrypted_wp(ppd);
 	}
 
-	/* Add decrypted workarea mappings to both kernel mappings */
+	/*
+	 * When SEV is active, kernel is already encrypted hence mapping
+	 * the initial workarea_start as encrypted. When SME is active,
+	 * the kernel is not encrypted hence add decrypted workarea
+	 * mappings to both kernel mappings.
+	 */
 	ppd->paddr = workarea_start;
 	ppd->vaddr = workarea_start;
 	ppd->vaddr_end = workarea_end;
-	sme_map_range_decrypted(ppd);
+	if (sev_active())
+		sme_map_range_encrypted(ppd);
+	else
+		sme_map_range_decrypted(ppd);
 
 	ppd->paddr = workarea_start;
 	ppd->vaddr = workarea_start + decrypted_base;
 	ppd->vaddr_end = workarea_end + decrypted_base;
-	sme_map_range_decrypted(ppd);
+	if (sev_active())
+		sme_map_range_encrypted(ppd);
+	else
+		sme_map_range_decrypted(ppd);
 
 	wa->kernel_start = kernel_start;
 	wa->kernel_end = kernel_end;
@@ -487,28 +510,69 @@ static void __init teardown_workarea_map(struct sme_workarea_data *wa,
 	native_write_cr3(__native_read_cr3());
 }
 
+static void __init decrypt_shared_data(struct sme_workarea_data *wa,
+				       struct sme_populate_pgd_data *ppd)
+{
+	unsigned long decrypted_start, decrypted_end, decrypted_len;
+
+	/* Physical addresses of decrypted data section */
+	decrypted_start = __pa_symbol(__start_data_decrypted);
+	decrypted_end = ALIGN(__pa_symbol(__end_data_decrypted), PMD_PAGE_SIZE);
+	decrypted_len = decrypted_end - decrypted_start;
+
+	if (!decrypted_len)
+		return;
+
+	/* Add decrypted mapping for the section (identity) */
+	ppd->paddr = decrypted_start;
+	ppd->vaddr = decrypted_start;
+	ppd->vaddr_end = decrypted_end;
+	sme_map_range_decrypted(ppd);
+
+	/* Add encrypted-wp mapping for the section (non-identity) */
+	ppd->paddr = decrypted_start;
+	ppd->vaddr = decrypted_start + wa->decrypted_base;
+	ppd->vaddr_end = decrypted_end + wa->decrypted_base;
+	sme_map_range_encrypted_wp(ppd);
+
+	/* Perform in-place decryption */
+	sme_encrypt_execute(decrypted_start,
+			    decrypted_start + wa->decrypted_base,
+			    decrypted_len, wa->workarea_start,
+			    (unsigned long)ppd->pgd);
+
+	ppd->vaddr = decrypted_start + wa->decrypted_base;
+	ppd->vaddr_end = decrypted_end + wa->decrypted_base;
+	sme_clear_pgd(ppd);
+}
+
 void __init sme_encrypt_kernel(struct boot_params *bp)
 {
 	struct sme_populate_pgd_data ppd;
 	struct sme_workarea_data wa;
 
-	if (!sme_active())
+	if (!mem_encrypt_active())
 		return;
 
 	build_workarea_map(bp, &wa, &ppd);
 
-	/* When SEV is active, encrypt kernel and initrd */
-	sme_encrypt_execute(wa.kernel_start,
-			    wa.kernel_start + wa.decrypted_base,
-			    wa.kernel_len, wa.workarea_start,
-			    (unsigned long)ppd.pgd);
-
-	if (wa.initrd_len)
-		sme_encrypt_execute(wa.initrd_start,
-				    wa.initrd_start + wa.decrypted_base,
-				    wa.initrd_len, wa.workarea_start,
+	/* When SME is active, encrypt kernel and initrd */
+	if (sme_active()) {
+		sme_encrypt_execute(wa.kernel_start,
+				    wa.kernel_start + wa.decrypted_base,
+				    wa.kernel_len, wa.workarea_start,
 				    (unsigned long)ppd.pgd);
 
+		if (wa.initrd_len)
+			sme_encrypt_execute(wa.initrd_start,
+					    wa.initrd_start + wa.decrypted_base,
+					    wa.initrd_len, wa.workarea_start,
+					    (unsigned long)ppd.pgd);
+	}
+
+	/* Decrypt the contents of .data..decrypted section */
+	decrypt_shared_data(&wa, &ppd);
+
 	teardown_workarea_map(&wa, &ppd);
 }
 

From patchwork Wed Aug 29 18:24:00 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10580743
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 97F82139B
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 18:25:37 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8A7172B9B4
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 18:25:37 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7E9DC2B9B8; Wed, 29 Aug 2018 18:25:37 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DA4FB2B9B4
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 29 Aug 2018 18:25:36 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728471AbeH2WXg (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 29 Aug 2018 18:23:36 -0400
Received: from mail-cys01nam02on0069.outbound.protection.outlook.com
 ([104.47.37.69]:40616
        "EHLO NAM02-CY1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1728379AbeH2WXg (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 29 Aug 2018 18:23:36 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=0vp2bp9U+wsXTL0boWlK2FCenSlIPJSAoYF7atEFIkQ=;
 b=1mEvI+BlgwE2tPRMk3n0Tu7X9JTSVh3Sr22KSODlei3tFdg0yJ3/0gmNqutRs4GOLGIqMFMQzwS3DpVhHuuhNc2k0wpYkMeTleSNsSPwAm/N+5mE8itV5bpdLmLkuLybpm9cmG9nIxO29BxThN2mKZpC5Hx7+prZ5ZYc2iAC6Ec=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 BYAPR12MB2678.namprd12.prod.outlook.com (2603:10b6:a03:69::27) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1101.14; Wed, 29 Aug 2018 18:24:18 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v3 4/4] x86/kvm: use __decrypted attribute in shared variables
Date: Wed, 29 Aug 2018 13:24:00 -0500
Message-Id: <1535567040-1370-5-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1535567040-1370-1-git-send-email-brijesh.singh@amd.com>
References: <1535567040-1370-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: CY4PR1801CA0020.namprd18.prod.outlook.com
 (2603:10b6:910:74::33) To BYAPR12MB2678.namprd12.prod.outlook.com
 (2603:10b6:a03:69::27)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 9b9d506c-300c-4865-fa87-08d60ddca2d4
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:BYAPR12MB2678;
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2678;3:yFokDj+nhOcpXwr3KwGgoLXAPq3J8qTp7zmctQkyHyL4oALN1ZrL4eKPm7q6OdzabTAmO8cOIIbxr0ERx7zdhviTuirJfZSZ/EgA6tvVyzEk1N0SDxxhubX9XhiOBBIxHrbqfxDCRq74ZdQJ3l3PFijHqsUMIlhN7Po1w+weAq1i8Cd+g1gmGgtWJj6g0pQBU6bYPB3rG9c5g9cn+mO+VdI8N6ib0I8v6Lo7FFv5KBNRkAOYtwAjrGkT8Uqw0m3Q;25:f65UcnMvsHcfPVN0CuCvSjZhAKLNtkSXzlbLT3/fV0JDEiUR1wEkYdcO5g2XBJsrXdfZR8u2pxxFiYMt1cbJGwZdO3PXmWjvc1vzB+b7U8s+j1CUPJ0EQd1/6heiTFyvNM0O7X+9UcjbUSrZGIZAUmsFqpmYU7qfikLoohDO+FkiElt6JMLtUMDz6Es+O7S1xazG2fWFzee6Cn9fE1gRj7/LdZi82zk+qCqBXOWjMizGfH+NHN/rdkjT9otCkfpfjkjDaCEMCWcBnmCtz2293uJcpKtm+Nlr6WO5DjvufF7o3ueDKIo+Vs2WgzyOGe8HGkbSm2bKOt6oNAK3TgaMEg==;31:1zQXj1bqnWc2p8yP8ghfKiLmqMFbVbEuwfJu+T1zGHTxef6E8lQDS/t7RvWmniOiH9CAIgYQhKNG4Au+Lh4sWxKsHKf73l8n2YEF8EdkQYcI6cnSG+KsnKghNe6qrocXnFvGVwgGEVw9j0UAeLMSkWvvEUhzQxXJHEZ4jmPCdSGI8rzvNVXMhkYyzpKOYOtd8qWk4c7phrA5Z1I1Rsh+b5ooiDlwDTCouF19ZDkcRd8=
X-MS-TrafficTypeDiagnostic: BYAPR12MB2678:
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2678;20:V2UapbiP52ByTOT+JpiRQTj+GLEltu+6uPlFLLWuWVQ0mdjpd7nWDEcjBYIrSvxb/Nt7WjUdjXCDpsJhg3K0UKhCBSjiPBLwqTX94OPY6dqBhSEVH+D7dHfz2Rn+93bhXIttHdVZ2lmekIxhKgTqyT7ugs3uQr69iJUy2opWy9uH5Wj0LiKyhOJFwHIf1ysUIKMUPdDm+0B1TjmSJ30BQY4KTQvwGWeLosxJ9z+jkUtQJjszW4SvgZYwXmaXBuq2nsSjtkPCz3fa3HsYbDCkpUmDmIAElrZujvndlMlynDBvlnQK/rEyC4SX5Nrh+HtHTIuCyqZ8q2tfho2IeleAYSfSG+8vj6xNOgH4atvGaFVaRpxxgpvE8vS9WRMa5Pzr10JHFa7+tbAkT0ShsLGTvyS9m5rGj0M1EzH+ESUYy0ZZhIuv0s5HJHm8DBS/wNLhuYtFJCipvl8QzuH94SjbjYEEouAr9P2DkiFuLNy0k8Agy5jYPKvpJ6kPKTGXoBIM;4:ai8bqPGlPqMDGfJBT+11DxK4mIvyshJWqyo5OzKrWOwADRs+xOAoxxxs6UMVQ/mPfJlZNP/UB6jA86JMbycMAK6HjBdWg6a0TwTpsElnG6/SUGHjiwPnOvRC69bzkixko4yimOL/DPR7/ZxYVcwyX8/mIABUhn+/89pzuLFUCtraJmXf8CgJYUEwqtEaClqw84SNo4/IRUBNkArUNu36IrmrtvIikAVnMbwbSUwpRtxK65Ql5rjp4MD8Wy9KkhFVlQvCSJ8zb+qJV5MyNrTivZuL7bFDKFBpU5pYhwnGxDYaKRO0QtbH/SzmZraQXH6FLBhYQhnP/Zbp6wAhR/0X3uHNPUOtdCz2eyR2ynp1BAp7TuHE+oJ3tZV//6z+oTMq
X-Microsoft-Antispam-PRVS: 
 <BYAPR12MB2678638B2CD381282A8A6DCBE5090@BYAPR12MB2678.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(823301075)(93006095)(93001095)(3231311)(944501410)(52105095)(3002001)(10201501046)(6055026)(149027)(150027)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123564045)(20161123562045)(20161123558120)(201708071742011)(7699016);SRVR:BYAPR12MB2678;BCL:0;PCL:0;RULEID:;SRVR:BYAPR12MB2678;
X-Forefront-PRVS: 077929D941
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(396003)(39860400002)(346002)(366004)(376002)(136003)(189003)(199004)(478600001)(386003)(6486002)(53936002)(5660300001)(14444005)(54906003)(4326008)(6666003)(97736004)(25786009)(23676004)(7736002)(52116002)(7696005)(305945005)(76176011)(50466002)(50226002)(53416004)(36756003)(81156014)(81166006)(8936002)(106356001)(2616005)(956004)(476003)(3846002)(6116002)(86362001)(2870700001)(2906002)(47776003)(446003)(68736007)(186003)(16526019)(486006)(66066001)(316002)(105586002)(26005)(8676002)(11346002)(44832011);DIR:OUT;SFP:1101;SCL:1;SRVR:BYAPR12MB2678;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BBYAPR12MB2678=3B23=3AMhliezr?=
	=?utf-8?q?TBssQuxCpfpAM2KCK5t5LYUva20fYW8GSPwr9cD3eYB96YscBb97RPTzhOy+TGHO/?=
	=?utf-8?q?dpsX7ucoJWbkuifYKT8S34NOHkDEqqZC6SzbA+ns8NrJTXnGE/tlkUkDslJ3a4jgk?=
	=?utf-8?q?ROUBTMWqLV817z4W0osYF7mJCV63ZgJxIzPqZsqHRoglOzV8TKlP8zLm2dlJ3UwmM?=
	=?utf-8?q?hYkL8nNTuJiIY7iWvi/+nXBQ563DDHwF+2kbt60vVcqePFhP54CfG7WRdEdmn4P1y?=
	=?utf-8?q?Zkm4urc2xTbdNzixjB+g/FN/fPC3fehAZs3X7no72Wwa4geBzhJDjvK2mh4nuPBJS?=
	=?utf-8?q?Y2e0/QlZm9XnoMAx/CQfkfH68WBS0DId9gGTag9oh134Q2vkAQ9pyK3QbxXc1zceQ?=
	=?utf-8?q?EABzCdiHFCjtscyfHoCAZZkVbSPZsDl5a1E1Ue8Ga0R2D+v1oLRigqBwuCLH/uZt3?=
	=?utf-8?q?6xQLRHLm3BXdWgpqt8uR2Ao/L+Gq7Q7PwC3SvCY3I9LtxG3KC4ZapTNdNatTGM2QG?=
	=?utf-8?q?WWd/jhpqF6eYIoLMttx8Mz8X3a2R5oUVhOKhVzwRRfFFUJhlVoYv5vz3C6+taZAl6?=
	=?utf-8?q?ur8+JY8ijk8IjGEK7Iw0t4ILLaa0rb6mqAPR2DCdIXxSlrQq5KhldaHe0CNWTLHYd?=
	=?utf-8?q?BgAs4dXm4eHfRW0U7EX8pwnFcZqv32PYy4fcr92mn3+VLaV5EawCrTE/jaLAtPKxr?=
	=?utf-8?q?Zx90897PenPqaPqBzS7BedZTXCUv5vTFxF2vwOJRzymdxhJiwa9THj4dr8FSDt84G?=
	=?utf-8?q?3gFvf2td33Spm5WUrVgGuwy49NS0NY25RHZv+Lx+GuV1VeQXY5QlGmpZLorZg9ZT9?=
	=?utf-8?q?BPEUkS/CMth5/RamR0XDUJEAdfVrxjaPnEFPEJG1K98lRjDWJbAmETA3qcFTQlyEC?=
	=?utf-8?q?bgU0hqwGXyhpGwyLoOVbyG3+6nvJrpNmWp0fDWs+ZbTYlrR0OzfbX9gHDyU9tVgq7?=
	=?utf-8?q?fv+I2q21mTKyNIDPsuOfFtCtil6VblceuG7nHnZLPJ+dXA3l5kiDTiwicEnJ3U6hw?=
	=?utf-8?q?E0hUP8+85AT/k75TuCWzQtRSMT3MSqi+VDsa+RYsxwtBBBiTviLAnniEpUjcjyuEJ?=
	=?utf-8?q?6YtAtmvBAz7Odb4AnhNMr8jYDJfskxkDlZK6g1bMOVsQdM1tquuycRIkKlaE1gqES?=
	=?utf-8?q?Qif/OobZ7pR6RA0TyPYpzmHeBWWGYBc9h3RryLo?=
X-Microsoft-Antispam-Message-Info: 
 6mjp0MZW/Ig9uCwapv8IbyeXHe25STEaBvbaiuSb3MrV6+Qldnpxtc50quwe2Bcwq88hsRWeURHq63ixPHpsYxYGbBHGKDIl4xNST0i5rVITDWkqGVqA12gf9Mk7hO9MQYJXFlDhG+U6BM5v1ChPIPUqbN3w76IrzmlsWdGL4IvTyYhgyElLMm3fpICyHiY+m0ENGnTRUcXM4KW9RZ1IEGBX3MKQk9OyHQQdVxWV3KnrA/QdH323iGEp/3QqPzB7hpupa9wi9YK+qfcajarqFP/cGvc/CEiYr146vRiGIzeIzdIKyuUhXpSj9KJTIOB4ggYKZur7356G7KlldySvAT65S21wSEZG7flX3ppnUIg=
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2678;6:A8EulXeeV2/mhkCswk7++v7j6J1Oi1hvr55+fGczl+0E/MVxhtprozy9hVZu0iTeQOrutiW3eaoOSd2o+eEjmp78/TuelnLUCoWRbyY0eoHgknW9kbLqM7FpV8XPeayufAq/+LAtOSQi9f8kb8bkYeYwgsLgobhDuTdTgVkrgMb1HnKpV/JIED2/KVbyH+sGGDuP1i2NNHy2yqyMfCbvhj5YRMHMPI8hchJ6vSEsGTWkHHMHrKsSa3WYjMc9bY1yCvSPfyltr7b/pQIG45CKlhxHejSwX4Ftn97J64Vth0DjvKTYkje+oJKq7VH5qMifcyxVfrttAA3xuSI7MIJkX4KWH3BpICU6jt7DcYb2HQ3cehVrx3BVAZTgdKMrX9YSfSB8rHvRKf7BcK0oJH7G+/fjwfhkRBrcqmM9HF3+s5wD0XSDAI1ZomwCojGkCX11Idq6H+hh5KUGmNDrNJipcg==;5:apv9ZXx2SmpyueocIFzMqFgty0qlXSyOf4IdQacG5R7ywcfUvvY8PhrR9X+mthYqGto2aJA4J+N+IMOEVxyb4y2g4WM/sLk1O+rWYJGfyRRa19It9c5iahwVVbREl5ysleRjmEcz8STOAkH7YGDJuJgLvxhZdyMNZPxTJuTyTLY=;7:iworNDA77F29cj/KCfYoluiCPumiTmC4hBwBtlfEmrZ9k08iM+G25/ZZ/Wfl9Y84971Bu+Exs7rr0xJKX1eMAy3fSAFLdIklZZ6h2lUYc7nZWrwA8c8yhP6dEMSYVkgovOgwTGbzWauJdvlPs0EsP4YwoC3G8ZIIVv3jG/GYuU5pQkCxDYvaW9QkUwF/RqCLwG+rPlDdL40K5zffdB4vRvE4Z8BNwfiu9LvkcXCVjm4vXBWdgumw4QVf8KnXvSyJ
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;BYAPR12MB2678;20:vZhNwF4wk4aH/aUqeqaZ75dp4+ARRIpsXbMjvUgDl13Li+E8JrWpvJU/KT4iLp8+/rtx5VC6Sqs0BtBM3RfAp8CHsRE04ACIx5p6ifbEcMtGaXf556INTjq2BK2HHWV87bqB2aprH/uuJQhkKY4kZ7VUj2WolMSjNNud9HIk2U5K2UMEsjqN4WIl3JTdDi17OntBzDJydMGznKuyU1IGeskEy25QDK/Zkq5acvDSZMSV0mF49EjT2rz3PfOpaP6u
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 29 Aug 2018 18:24:18.5805 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 9b9d506c-300c-4865-fa87-08d60ddca2d4
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BYAPR12MB2678
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

The following commit:

  368a540e0232 (x86/kvmclock: Remove memblock dependency)

caused SEV guest regression. When SEV is active, we map the shared
variables (wall_clock and hv_clock_boot) with C=0 to ensure that both
the guest and the hypervisor is able to access the data. To map the
variables we use kernel_physical_mapping_init() to split the large pages,
but this routine fails to allocate a new page. Before the above commit,
kvmclock initialization was called after memory allocator was available
but now its called early during boot.

Recently we added a special .data..decrypted section to hold the shared
variables. This section is mapped with C=0 early during boot. Use
__decrypted attribute to put the wall_clock and hv_clock_boot in
.data..decrypted section so that they are mapped with C=0.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Fixes: 368a540e0232 ("x86/kvmclock: Remove memblock dependency")
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: kvm@vger.kernel.org
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/kernel/kvmclock.c | 30 +++++++++++++++++++++++++-----
 1 file changed, 25 insertions(+), 5 deletions(-)

diff --git a/arch/x86/kernel/kvmclock.c b/arch/x86/kernel/kvmclock.c
index 1e67646..08f5f8a 100644
--- a/arch/x86/kernel/kvmclock.c
+++ b/arch/x86/kernel/kvmclock.c
@@ -28,6 +28,7 @@
 #include <linux/sched/clock.h>
 #include <linux/mm.h>
 #include <linux/slab.h>
+#include <linux/set_memory.h>
 
 #include <asm/hypervisor.h>
 #include <asm/mem_encrypt.h>
@@ -61,8 +62,8 @@ early_param("no-kvmclock-vsyscall", parse_no_kvmclock_vsyscall);
 	(PAGE_SIZE / sizeof(struct pvclock_vsyscall_time_info))
 
 static struct pvclock_vsyscall_time_info
-			hv_clock_boot[HVC_BOOT_ARRAY_SIZE] __aligned(PAGE_SIZE);
-static struct pvclock_wall_clock wall_clock;
+			hv_clock_boot[HVC_BOOT_ARRAY_SIZE] __decrypted __aligned(PAGE_SIZE);
+static struct pvclock_wall_clock wall_clock __decrypted;
 static DEFINE_PER_CPU(struct pvclock_vsyscall_time_info *, hv_clock_per_cpu);
 
 static inline struct pvclock_vcpu_time_info *this_cpu_pvti(void)
@@ -267,10 +268,29 @@ static int kvmclock_setup_percpu(unsigned int cpu)
 		return 0;
 
 	/* Use the static page for the first CPUs, allocate otherwise */
-	if (cpu < HVC_BOOT_ARRAY_SIZE)
+	if (cpu < HVC_BOOT_ARRAY_SIZE) {
 		p = &hv_clock_boot[cpu];
-	else
-		p = kzalloc(sizeof(*p), GFP_KERNEL);
+	} else {
+		int rc;
+		unsigned int sz = sizeof(*p);
+
+		if (sev_active())
+			sz = PAGE_ALIGN(sz);
+
+		p = kzalloc(sz, GFP_KERNEL);
+
+		/*
+		 * The physical address of per-cpu variable will be shared with
+		 * the hypervisor. Let's clear the C-bit before we assign the
+		 * memory to per_cpu variable.
+		 */
+		if (p && sev_active()) {
+			rc = set_memory_decrypted((unsigned long)p, sz >> PAGE_SHIFT);
+			if (rc)
+				return rc;
+			memset(p, 0, sz);
+		}
+	}
 
 	per_cpu(hv_clock_per_cpu, cpu) = p;
 	return p ? 0 : -ENOMEM;
