From patchwork Thu Sep  6 11:42:58 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10590469
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id AB494921
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 11:43:44 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 995C62A75A
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 11:43:44 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 8D3AB2A75E; Thu,  6 Sep 2018 11:43:44 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id CB8DF2A75A
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 11:43:42 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728002AbeIFQSp (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Thu, 6 Sep 2018 12:18:45 -0400
Received: from mail-bn3nam01on0067.outbound.protection.outlook.com
 ([104.47.33.67]:46448
        "EHLO NAM01-BN3-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727851AbeIFQSm (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 6 Sep 2018 12:18:42 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=K2txtTs/dKgYSLSmfQ6fmp9U7m+Xsj1BFCJl0Pp9LE0=;
 b=SllQmrj2cqfiho6VQvxc/KjBEwZMMrTDuNI1XqC6BnFAHIb0zJqg25173XQnWPFlBN+i6XU7HDyERJf+a6ABqWmj8wY7JTifzqqSw4FwMOSPr56kYL9Y59UZtdgH5uLPpQqwlc7mHNYUtkdUQMe246ySIADKxra4yaMNHip51fs=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 BN7PR12MB2675.namprd12.prod.outlook.com (2603:10b6:408:29::29) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1101.18; Thu, 6 Sep 2018 11:43:28 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v5 1/5] x86/mm: Restructure sme_encrypt_kernel()
Date: Thu,  6 Sep 2018 06:42:58 -0500
Message-Id: <1536234182-2809-2-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1536234182-2809-1-git-send-email-brijesh.singh@amd.com>
References: <1536234182-2809-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: CY4PR03CA0002.namprd03.prod.outlook.com
 (2603:10b6:903:33::12) To BN7PR12MB2675.namprd12.prod.outlook.com
 (2603:10b6:408:29::29)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 730c220b-285d-40ff-7b15-08d613edf783
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:BN7PR12MB2675;
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;3:A+ZcI1gTIznYNvosDyqVH2sjNU95eFPBlto4lr4WqyYj2Ev6yI5keFN6zh9P7dDoSRBdzzU+hRkdMR/91bE8+CM9Wr1q4gZEvJSed19751wYGFk161gfMmJdov38Wf4yjLRM814VWiXLHSgn07VPUvbIZVlCjRDufQ47JqxZybFdAKPEerQVCkHdZQoL2B1iIEh+0XYHE2OBpteSDqLuz+EF/1YHCH0RDvn7IdQnNHchQEbO9XGKxQ76nw94KEHa;25:cYMrUSpgMkcqtO/JcmBiunOxbfDGBm57QJvvz/n42RgUzHwf+50NmTBwPdJ1P88tz9HRxCkiNpQIQiemrbW+k9lnxbHfYbH4NjouVxUX46Z6TGOoWsNTD+wld41yYsY5KbDpIdboOtGhIV4tdmwc3z3ycaF+cZf8E/L/ZNBh0EGtDZR2m5VwCZl/B3F2t2xP7TKCkQZgvF2QeQxTXMFDilOXZZmD2FQKCnppgavJLviU4uJiG7fSA0348FtP3ofdmDXiHuD+VivPq2QcSf23yF9cTllR+kPBWjt6WFm4BTtorbCygd/yMrks+BCdzQhHcWELvU60fsNmw52hI/mPBg==;31:5FeL4EUdkTwGt1ko2r4Wv0HfyPnQY06LReGi5LpWts5nmSmd9Ut4UsRHLyKCMPQcoBNQDK9NHgm9GpaJc/VLrIeEhkkR+0oBIDRM/F5WaKuVvEeOGEJ94x2j82NpPBD/biGBllQrOzUH10A3SrJeShO1JAhJVvGjeVOw5qMQhrPqChAfWorSdQ2Ooe6yBBbYe7RIiKx+yJK6NqwmZxrL7xOwSRWF5v2Ymrz94lQhtlE=
X-MS-TrafficTypeDiagnostic: BN7PR12MB2675:
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;20:fJ9+n/bh3WykpelawsNGdnFHWF5YSuVtvHtTprsVznZ6QFwIrg56X7rhw8YFUQO9e7hk6qfhfF3pjFIK2B7PdXwdM+knqEdZPpLBx2xiFTOwuIz5dQVALXSWA5INLjTonQvKzVtyt0aiVAXAO+4nZQGnPRTwa4Oium91Ofo4d+8NvwTGODti7d3QSG4t0/NAdhEMe7xAZl9f5jvUYPG4Gb59crkqZ8HCtrurcs3s27y1IBrK5UP18zUdxzRd7DCTINMbDZtoDli3vM/3p8g0YtQUU/c6aSeSDhfrDbdTapASfv1bTNXel+/koPfHfR2CiF9k6GINreUtFHJdXtEoBSr3m901kb6jALVPDP3bHHvGjSTT6qVAt7zNKNp8CHNISka9PpfDVri6bx94GFQJz5D3DJZlc0fep8TUmgjB8JnfHBQJ9IDOVBNwSnTHC8MRDmZXpQslkRsMaSIYM7EsOHZz7aPdmTgwJFPA8lA34Oj9FNWzroAzG2bOI8Gs886I;4:Aa9tZr10vLsWOKL508jFGwELbzEFIkuy8QEd11zkLPVP7CNEiDciJgyeLOCnJKKslA+31UX7FO4ciBcOr6cdow6Rw6pvulaZiw4jz+/SeOCK171lH2lfj974Vyxcs20QgSMaJzmengDmRIiTC12Zs8YLmBB8jlaSqhyqzqTTOcwRxPRRl+TojOFde1SoejWXBHVlnbSjf9cNaJg4WQCvDSLH3Pi1ciDei1dGL5XdjnCAzOZbRkb8MLiV4PlOsvhm11k//EQziaNdY/jUeviLjjQmf5NdoXnle4p3xUBluv0vzi/S60k5cs6VLIpjaYOuWkyiLty4qPxBD/c3tdLWbF549o3gN3hAktn31EboWAIn1dFLUj16bj9vSbm2TWRQ
X-Microsoft-Antispam-PRVS: 
 <BN7PR12MB2675FD3EC84D1816566CCDFBE5010@BN7PR12MB2675.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(823301075)(3231311)(944501410)(52105095)(93006095)(93001095)(3002001)(10201501046)(6055026)(149027)(150027)(6041310)(20161123560045)(20161123564045)(20161123562045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123558120)(201708071742011)(7699016);SRVR:BN7PR12MB2675;BCL:0;PCL:0;RULEID:;SRVR:BN7PR12MB2675;
X-Forefront-PRVS: 0787459938
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(396003)(376002)(366004)(346002)(136003)(39860400002)(189003)(199004)(25786009)(47776003)(86362001)(14444005)(68736007)(66066001)(7736002)(6486002)(53416004)(106356001)(6666003)(5660300001)(3846002)(305945005)(4326008)(6116002)(36756003)(105586002)(26005)(7696005)(50466002)(52116002)(8676002)(11346002)(50226002)(956004)(446003)(2616005)(53936002)(2870700001)(97736004)(23676004)(478600001)(316002)(76176011)(186003)(16526019)(54906003)(81156014)(81166006)(2906002)(44832011)(476003)(386003)(8936002)(486006);DIR:OUT;SFP:1101;SCL:1;SRVR:BN7PR12MB2675;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BBN7PR12MB2675=3B23=3A7Fqd2Gm?=
	=?utf-8?q?Cs4lJu43/ri2Tm7/n17DZOSKWFLrVGyJ/ueTIbhGMDJM3O4fdmbDAfyCfQ9LSavmU?=
	=?utf-8?q?omEX1C2NOl0ntgIxjdN12EfTwgjepBxAY8ok+zcpweli9GdaD1BuLg0T9InIrjy2L?=
	=?utf-8?q?VGUGCxAEbXUMlx6qow6xeYwS3RmpgdvTOPKWP6/PVQ66qY5MS56UUjlTxdNKuQk9S?=
	=?utf-8?q?hfHLAorDPR3yh2eAdhr3hL9cXBjlLkD+lC0PuPFTGXmS9hdx1e5/rf8T+noP2DRNu?=
	=?utf-8?q?9apRRFPNjvOWUnQ2p7lkqYtJFM7reH7vAKaSArOg0l+769sK6j5u2n7PWZi0W6JkJ?=
	=?utf-8?q?g2CcX6W7UFodcmbKWm2VG3VEE1TWiroPtuZ3rGvInYuAsVoJeIxpUIc/ABW2GKBwb?=
	=?utf-8?q?DqXQK4DqZzZnaCyuANfhBodChx4v0y6DkvLblWtUQL+MWlcuCttMsf2NUVIzA9tqz?=
	=?utf-8?q?M/ojms5vpPrviKZSxeJDtkz7R0Q3VP4QSLhTn6NsikdTz/D3CzyKTuGTl6bq8tCRh?=
	=?utf-8?q?s/TAcd5uyaMRmdfjTf9tFKIHtXlaL/HKGBJiRIgSI+z4vASOw5YAETOyg9/X7dJ/U?=
	=?utf-8?q?YLV4+aSyPgNSrXT+wGxQfwHHOQ+Opo6tRKFAh9pATLASllypZtHY+UrhAJ8se2/mL?=
	=?utf-8?q?TYvS8dCMtqb3m2ZvWlWIW0iakx/DUVnhS8aLfIEo76MlVBQe9m/zrKUQl2uSS9Qyq?=
	=?utf-8?q?QM/1DqhoG7bDxyz7NyhAvvlJQ5M7/BMX6+mgharQ6CB3hOXxkM2UAmA8Sv/bqxrMF?=
	=?utf-8?q?uL2gzGd3+aKGuGoSMA9XZoGD1kNAdHHFWIHUtm6oG7Y9k3rJ7l+ymMbL+gCXgy8ps?=
	=?utf-8?q?krf9PTrdiWEMWnLQt1uIgdCPY7mZZj/xX77pp9sQK21/eUjNNkpwwa2+UL3jLHKK5?=
	=?utf-8?q?QtpcaYq/RxH6fin8C2NzsuKULked0/pPU9/8PiH9fX+b+LYmneX5o7tTZ/IW2tWRr?=
	=?utf-8?q?S6iA7xUGLyDncDErFsPZuC7GjiWy7Z00c4Hf81u/L+fnm/8vMCB2Qde9/9LOH+aMm?=
	=?utf-8?q?klwNl84d9xQHfznvfb03y2W7OdLP5LfI7PbNNWWK2sLDfuDWbnZMMT62uRc+JDgL/?=
	=?utf-8?q?3DkgBMgjVEV39/ZTCSUS+IICgpHwZOqxKaxbjhkwakA1L4E5SZokmNSV7WL+WTsQy?=
	=?utf-8?q?DKRXS+CTcohGi86e062TQRL0WW/iSJG1FrpvujH?=
X-Microsoft-Antispam-Message-Info: 
 6aLEOzzODRfdHT4dHpMbT9JDUQ+NS5d1+Cf3JNGChV6UfT+kjKn+PuX6oGzf3JxAYkN0eFib/gzsErxCbCsQSygxgAYEqapEoxTfO1pgaxPgkrJLiQTKwPrtQdZUM0gIvd8ffDVJ2IhHSXJ4BFT3xbOXphbmZrl+sCRotbmqgItMXCfu24fcpXG2nR/1ZMWIcLPzqyMexVD+LE8DfLoCG8V61Ipln3ttK8j07HwxBxn9iMOiBAkuy5VcFc0ybgvb5pAknMW9g8dh0rX43WW2UP48pcnYXvfKUROCbAXx9V0VeNky7Kgmv/n/TJZ+Lp7s/Ol+nVihTHPlZgAq1svrn8/bHDkR0pfqPDkgB5ctmeY=
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;6:krx7XcBvOBgbib7nFWxqzOcZg6yrLGtHbtAvfx1u9NWQCF2TlAZeuvWQvC9dE5iJzXRFs+k5p0VxWuUO4OUo/zdcf+3Vl6rlCa0DoGSTj5wEHSHyeKdCudrUnvKKl6CqUdrK1XYrbey5dYiMymEJPV567GVRDpHE+zMOasqIFkInLMAlbSIYM/NSuOfz0EJr9KknJ5RCMpFsj4kLnt0RSKZFc8AqaUeNxiKyHPc19vSf/vT0M4yJWCvlvfCHCl2YVIrLb0CeKsqejW7/ioFcDtvnI24BrflogdVDliXrGK0JlcLVfS+kM2FbV0ydlFAXpUcpNLRKVIU5XfsD1z4mrF2QRismQLy3zoQO5uY3IaELZph8MXkUWru0ezwXT96TAUCP57PsDjlX+3c8m7Bkx1e3s78W8YjzmKzf6hqM6yf2Vj/E6KVQREhW89KwYONUPRGF87b6KFHK6DdWyKd8zw==;5:rsRI0KDZ8qVcBdfR+AFJ7+Rn8DEa7iwwI4TdUYEkr2my3uSEWTDCf/4qi0yxZkPL0/+n0FAdJ3ptHxHqYe79Qi47q5UjAyP/j2Vgc4i+e/gQxyssWD7pLkmePTXAJ7Da/ZzBXc4E8/V39CjzPTjuCvi3lFBnkofmNi6/TvUD/2E=;7:jFMgQaVrwwvB9mbhfwFWvHfn7Dsgrc2DaMC5cnGP1TfWtlyelyJ4R79M7rUC+FwI3Tbw1/00QTNKfUr/8Q6K5mtELZ42e/VY3+OTrkOBfbdq6+WjoqAYvnwDIFJT6PqpMwXCJNj1/nOE4pZ+okGJuWaMStFp1ummTBG7VMw+MCMk+WwW6g4oyKXk/ABbmCm97aktYdZFhmiGcPS/s+uw8aMhQ6KQinuB+XIYXMjUgJxUmRXS9MM9s7hfDOETwVZP
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;20:mRyajanan8VKY+TD80s0ItCT3Knypy3Oi//LsLZAqlhW2Ef0or9QA1QdZ+qJ30LK2M1LimqsbPO7gL0KtmSgcnYgdL1Jbr7H6/5VebXWNhdZCQrQieeuSA9LukquXXxiMNcg2nes/KbUBoTZSwN4NOJ4eWVASw1e+5NDsxKkTowBG9q6RmL3pBfB4gcEx8Ga8E0VsdERQdnz4if6+rtD4eaqcJZDvDyyi1Pg0QXtAH/EjwHQ2VbG9mf9CzW4sF84
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 06 Sep 2018 11:43:28.7613 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 730c220b-285d-40ff-7b15-08d613edf783
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BN7PR12MB2675
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Re-arrange the sme_encrypt_kernel() by moving the workarea map/unmap
logic in a separate static function. There are no logical changes in this
patch. The restructuring will allow us to expand the sme_encrypt_kernel
in future.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: kvm@vger.kernel.org
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/mm/mem_encrypt_identity.c | 160 ++++++++++++++++++++++++-------------
 1 file changed, 104 insertions(+), 56 deletions(-)

diff --git a/arch/x86/mm/mem_encrypt_identity.c b/arch/x86/mm/mem_encrypt_identity.c
index 7ae3686..92265d3 100644
--- a/arch/x86/mm/mem_encrypt_identity.c
+++ b/arch/x86/mm/mem_encrypt_identity.c
@@ -72,6 +72,22 @@ struct sme_populate_pgd_data {
 	unsigned long vaddr_end;
 };
 
+struct sme_workarea_data {
+	unsigned long kernel_start;
+	unsigned long kernel_end;
+	unsigned long kernel_len;
+
+	unsigned long initrd_start;
+	unsigned long initrd_end;
+	unsigned long initrd_len;
+
+	unsigned long workarea_start;
+	unsigned long workarea_end;
+	unsigned long workarea_len;
+
+	unsigned long decrypted_base;
+};
+
 static char sme_cmdline_arg[] __initdata = "mem_encrypt";
 static char sme_cmdline_on[]  __initdata = "on";
 static char sme_cmdline_off[] __initdata = "off";
@@ -266,19 +282,17 @@ static unsigned long __init sme_pgtable_calc(unsigned long len)
 	return entries + tables;
 }
 
-void __init sme_encrypt_kernel(struct boot_params *bp)
+static void __init build_workarea_map(struct boot_params *bp,
+				      struct sme_workarea_data *wa,
+				      struct sme_populate_pgd_data *ppd)
 {
 	unsigned long workarea_start, workarea_end, workarea_len;
 	unsigned long execute_start, execute_end, execute_len;
 	unsigned long kernel_start, kernel_end, kernel_len;
 	unsigned long initrd_start, initrd_end, initrd_len;
-	struct sme_populate_pgd_data ppd;
 	unsigned long pgtable_area_len;
 	unsigned long decrypted_base;
 
-	if (!sme_active())
-		return;
-
 	/*
 	 * Prepare for encrypting the kernel and initrd by building new
 	 * pagetables with the necessary attributes needed to encrypt the
@@ -358,17 +372,17 @@ void __init sme_encrypt_kernel(struct boot_params *bp)
 	 * pagetables and when the new encrypted and decrypted kernel
 	 * mappings are populated.
 	 */
-	ppd.pgtable_area = (void *)execute_end;
+	ppd->pgtable_area = (void *)execute_end;
 
 	/*
 	 * Make sure the current pagetable structure has entries for
 	 * addressing the workarea.
 	 */
-	ppd.pgd = (pgd_t *)native_read_cr3_pa();
-	ppd.paddr = workarea_start;
-	ppd.vaddr = workarea_start;
-	ppd.vaddr_end = workarea_end;
-	sme_map_range_decrypted(&ppd);
+	ppd->pgd = (pgd_t *)native_read_cr3_pa();
+	ppd->paddr = workarea_start;
+	ppd->vaddr = workarea_start;
+	ppd->vaddr_end = workarea_end;
+	sme_map_range_decrypted(ppd);
 
 	/* Flush the TLB - no globals so cr3 is enough */
 	native_write_cr3(__native_read_cr3());
@@ -379,9 +393,9 @@ void __init sme_encrypt_kernel(struct boot_params *bp)
 	 * then be populated with new PUDs and PMDs as the encrypted and
 	 * decrypted kernel mappings are created.
 	 */
-	ppd.pgd = ppd.pgtable_area;
-	memset(ppd.pgd, 0, sizeof(pgd_t) * PTRS_PER_PGD);
-	ppd.pgtable_area += sizeof(pgd_t) * PTRS_PER_PGD;
+	ppd->pgd = ppd->pgtable_area;
+	memset(ppd->pgd, 0, sizeof(pgd_t) * PTRS_PER_PGD);
+	ppd->pgtable_area += sizeof(pgd_t) * PTRS_PER_PGD;
 
 	/*
 	 * A different PGD index/entry must be used to get different
@@ -399,75 +413,109 @@ void __init sme_encrypt_kernel(struct boot_params *bp)
 	decrypted_base <<= PGDIR_SHIFT;
 
 	/* Add encrypted kernel (identity) mappings */
-	ppd.paddr = kernel_start;
-	ppd.vaddr = kernel_start;
-	ppd.vaddr_end = kernel_end;
-	sme_map_range_encrypted(&ppd);
+	ppd->paddr = kernel_start;
+	ppd->vaddr = kernel_start;
+	ppd->vaddr_end = kernel_end;
+	sme_map_range_encrypted(ppd);
 
 	/* Add decrypted, write-protected kernel (non-identity) mappings */
-	ppd.paddr = kernel_start;
-	ppd.vaddr = kernel_start + decrypted_base;
-	ppd.vaddr_end = kernel_end + decrypted_base;
-	sme_map_range_decrypted_wp(&ppd);
+	ppd->paddr = kernel_start;
+	ppd->vaddr = kernel_start + decrypted_base;
+	ppd->vaddr_end = kernel_end + decrypted_base;
+	sme_map_range_decrypted_wp(ppd);
 
 	if (initrd_len) {
 		/* Add encrypted initrd (identity) mappings */
-		ppd.paddr = initrd_start;
-		ppd.vaddr = initrd_start;
-		ppd.vaddr_end = initrd_end;
-		sme_map_range_encrypted(&ppd);
+		ppd->paddr = initrd_start;
+		ppd->vaddr = initrd_start;
+		ppd->vaddr_end = initrd_end;
+		sme_map_range_encrypted(ppd);
 		/*
 		 * Add decrypted, write-protected initrd (non-identity) mappings
 		 */
-		ppd.paddr = initrd_start;
-		ppd.vaddr = initrd_start + decrypted_base;
-		ppd.vaddr_end = initrd_end + decrypted_base;
-		sme_map_range_decrypted_wp(&ppd);
+		ppd->paddr = initrd_start;
+		ppd->vaddr = initrd_start + decrypted_base;
+		ppd->vaddr_end = initrd_end + decrypted_base;
+		sme_map_range_decrypted_wp(ppd);
 	}
 
 	/* Add decrypted workarea mappings to both kernel mappings */
-	ppd.paddr = workarea_start;
-	ppd.vaddr = workarea_start;
-	ppd.vaddr_end = workarea_end;
-	sme_map_range_decrypted(&ppd);
+	ppd->paddr = workarea_start;
+	ppd->vaddr = workarea_start;
+	ppd->vaddr_end = workarea_end;
+	sme_map_range_decrypted(ppd);
 
-	ppd.paddr = workarea_start;
-	ppd.vaddr = workarea_start + decrypted_base;
-	ppd.vaddr_end = workarea_end + decrypted_base;
-	sme_map_range_decrypted(&ppd);
+	ppd->paddr = workarea_start;
+	ppd->vaddr = workarea_start + decrypted_base;
+	ppd->vaddr_end = workarea_end + decrypted_base;
+	sme_map_range_decrypted(ppd);
 
-	/* Perform the encryption */
-	sme_encrypt_execute(kernel_start, kernel_start + decrypted_base,
-			    kernel_len, workarea_start, (unsigned long)ppd.pgd);
+	wa->kernel_start = kernel_start;
+	wa->kernel_end = kernel_end;
+	wa->kernel_len = kernel_len;
 
-	if (initrd_len)
-		sme_encrypt_execute(initrd_start, initrd_start + decrypted_base,
-				    initrd_len, workarea_start,
-				    (unsigned long)ppd.pgd);
+	wa->initrd_start = initrd_start;
+	wa->initrd_end = initrd_end;
+	wa->initrd_len = initrd_len;
+
+	wa->workarea_start = workarea_start;
+	wa->workarea_end = workarea_end;
+	wa->workarea_len = workarea_len;
+
+	wa->decrypted_base = decrypted_base;
+}
 
+static void __init teardown_workarea_map(struct sme_workarea_data *wa,
+				         struct sme_populate_pgd_data *ppd)
+{
 	/*
 	 * At this point we are running encrypted.  Remove the mappings for
 	 * the decrypted areas - all that is needed for this is to remove
 	 * the PGD entry/entries.
 	 */
-	ppd.vaddr = kernel_start + decrypted_base;
-	ppd.vaddr_end = kernel_end + decrypted_base;
-	sme_clear_pgd(&ppd);
-
-	if (initrd_len) {
-		ppd.vaddr = initrd_start + decrypted_base;
-		ppd.vaddr_end = initrd_end + decrypted_base;
-		sme_clear_pgd(&ppd);
+	ppd->vaddr = wa->kernel_start + wa->decrypted_base;
+	ppd->vaddr_end = wa->kernel_end + wa->decrypted_base;
+	sme_clear_pgd(ppd);
+
+	if (wa->initrd_len) {
+		ppd->vaddr = wa->initrd_start + wa->decrypted_base;
+		ppd->vaddr_end = wa->initrd_end + wa->decrypted_base;
+		sme_clear_pgd(ppd);
 	}
 
-	ppd.vaddr = workarea_start + decrypted_base;
-	ppd.vaddr_end = workarea_end + decrypted_base;
-	sme_clear_pgd(&ppd);
+	ppd->vaddr = wa->workarea_start + wa->decrypted_base;
+	ppd->vaddr_end = wa->workarea_end + wa->decrypted_base;
+	sme_clear_pgd(ppd);
 
 	/* Flush the TLB - no globals so cr3 is enough */
 	native_write_cr3(__native_read_cr3());
 }
 
+void __init sme_encrypt_kernel(struct boot_params *bp)
+{
+	struct sme_populate_pgd_data ppd;
+	struct sme_workarea_data wa;
+
+	if (!sme_active())
+		return;
+
+	build_workarea_map(bp, &wa, &ppd);
+
+	/* When SEV is active, encrypt kernel and initrd */
+	sme_encrypt_execute(wa.kernel_start,
+			    wa.kernel_start + wa.decrypted_base,
+			    wa.kernel_len, wa.workarea_start,
+			    (unsigned long)ppd.pgd);
+
+	if (wa.initrd_len)
+		sme_encrypt_execute(wa.initrd_start,
+				    wa.initrd_start + wa.decrypted_base,
+				    wa.initrd_len, wa.workarea_start,
+				    (unsigned long)ppd.pgd);
+
+	teardown_workarea_map(&wa, &ppd);
+}
+
 void __init sme_enable(struct boot_params *bp)
 {
 	const char *cmdline_ptr, *cmdline_arg, *cmdline_on, *cmdline_off;

From patchwork Thu Sep  6 11:42:59 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10590477
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 8D1A8921
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 11:44:21 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7BCCD2A50E
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 11:44:21 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 702892A75B; Thu,  6 Sep 2018 11:44:21 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 032CE2A75A
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 11:44:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728021AbeIFQSq (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Thu, 6 Sep 2018 12:18:46 -0400
Received: from mail-bn3nam01on0067.outbound.protection.outlook.com
 ([104.47.33.67]:46448
        "EHLO NAM01-BN3-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727728AbeIFQSp (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 6 Sep 2018 12:18:45 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=BdJUFBsYLNgYsE/wjTdOS5mKAPWVjyMJBQGIgs0NlnI=;
 b=XhoByKwM8QeFjQAjEkUdhh6mj3JR+4nlvZddACW2opAbOxqA7I4dAg3UgCRg7pSoeow5M8XvAEZlkw8ctwI9nOYsA9lWZEE1KA1Ch0uAB41ozUHXkhsRnRy7grh+3UuCQNX03+p2BWO7TOaoPSMsdlsxag1qByOAGylHdJOqbdA=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 BN7PR12MB2675.namprd12.prod.outlook.com (2603:10b6:408:29::29) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1101.18; Thu, 6 Sep 2018 11:43:30 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v5 2/5] x86/mm: fix sme_populate_pgd() to update page flags
Date: Thu,  6 Sep 2018 06:42:59 -0500
Message-Id: <1536234182-2809-3-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1536234182-2809-1-git-send-email-brijesh.singh@amd.com>
References: <1536234182-2809-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: CY4PR03CA0002.namprd03.prod.outlook.com
 (2603:10b6:903:33::12) To BN7PR12MB2675.namprd12.prod.outlook.com
 (2603:10b6:408:29::29)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 27ac7bb2-5019-45bd-5c9e-08d613edf887
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:BN7PR12MB2675;
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;3:gCaHFB8LkhXvFmB9W/WanrKpydGFT2lg76RkDDr7F1WRc31JwAHsYtiZS1ZrN62HaXXugvmVPWiR8ymb9s65X22pNz7MPAZgLVpsFny1nHLhnuhDDJA6qviBA8cHVICMOfn3Hu5u6bKW1zdp4m+58tp3rcaRC5KIWQK6OKLo5bk10QOmHm10LPQ6iFUKNOQdLXn5S69jJUg407GRW06WU0Z8HsLlel/fDADCDYoi9jTHR1ymNzjGzVeQRP3UHVp+;25:Ah1Th40zeBFKWk9wXvWo9z1g/UFoK3ZV+R3RJrtjI+nUlw9O03Sh7ptKtMTvfJGH6qGVRl3I0+vnTYPHrfuZM/rcz3+fjm2RwfAMl8zCOGB/CYJiXcJJKcQyrFCFfZZzaLP/gb1RVNA1+ULGRv0X64c+nGNMZ8fB/OWk/S2gqUCARj2rem9yQvKV/ranIkC2OeK/qsetO4btuDAMLFANq+YXFtBGEBqXUUqLFG/OX5ipnpeHd7o7IkVbLwK5V3GWBVIVQA1efd+nEnTe9fVIFp+sD+cI3fdDaoW8X9Y+DNfTBDXdGbIgQnVndU3YfTUfbP1NDQvphiSCNaKygwWCyQ==;31:cUWCMiSz7rYgrhJm1PDEbDeIRTqAgNpjQ9G0Kljmf/S9HRakiz+TLQ+Fsxd0W7jamIXPT37iyKiBkzgR9jTDYVU81eJURlRVCzjRHHxp/hI2yzpeQTTrC0jsPQxuN2ZYjlwTEsAmm4W4P2I64HXp2qtvDtFCpXooGK+i0Ge0pwBj7AfkI7TYA0GVr/UWYgLglqIIqewxQr0qpNB7I4v7z39VO1snBMw3RM8kGLbD3tc=
X-MS-TrafficTypeDiagnostic: BN7PR12MB2675:
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;20:Dysphu6JhiopVZW5GDbnmIIKmgXD03fT4GGlFszT44wue0xm9MiGD2UnE+L+XEXQirZKWd+mktpA25PP3B4gX32YfXYb79ytfm3MQOEqLoRlOSu31WN57hgmBD0kH/2VER3sbDYbYRn4iROuLG6snLUofBSlkhJNYW3Q/b8tc5WQK6HlKs2n3f6SBlVIU3Lu3Z17J1orxgux85nW0Xiil/B8lUhrNUCtDbkzUA0fkem8K0z4+IcmaTcvZqsmaUPwO6ZeuRB8LS+o6p6oSMVHLsRcj80DhXRmMTZf0nhNNOKUqHK4XDQ0FtwofTKI1xOQzMHDd9ljdLIwM89hq/ivnryuh1R+9hdNTMCyrZk/AIp6GG51k5MVeJU8eHIIfGwCAmAnpoyY4ytlbUJQ4XSYbUecYjwdvbQulggyl68BwNtpwK9t9SSeqgkZE14Xxe83xwhBG4MXtS3EBAPCKeenhv+jvOOvhSeL1TcLwPPgjlw7O74/ncuJKSwqprxGNnTt;4:8fUTXKjPgspIZFdSb4oW8hMY+mATTfnB1vfiDweE49J+Cfj4UBri+YeIptieSzMSbTbmv4MpHurJ4HIxDcR5Nhn45NFMGQ0NLNJLZEEdozCuSZvopgmqVkMhCLZPPWPuh2hb3jgtoR9zpGNbDocYLUB17RAZ6U+4Am05CqqyZUqompgXerwN93GPm/WrTU4Vr2CVnRrZVPDuMovPh5i5RvTEKr7XSl5ajqunkfMMXazVFU1nq/9xnI48Droz3wrBmVIJ5Y0omwpkHu2vukL5GKzBA44PXr/JWDCxp6FKQu7QhaNBGlRq0VckAf8s5xwDkNrEyU+z5oJlSrxo8LRcopG7bBYiw3zNF8XRMOj4pJ6Waj5Uos7qs/XKA4milpgG
X-Microsoft-Antispam-PRVS: 
 <BN7PR12MB2675E34E7CD5A9F0D585C9B6E5010@BN7PR12MB2675.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(823301075)(3231311)(944501410)(52105095)(93006095)(93001095)(3002001)(10201501046)(6055026)(149027)(150027)(6041310)(20161123560045)(20161123564045)(20161123562045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123558120)(201708071742011)(7699016);SRVR:BN7PR12MB2675;BCL:0;PCL:0;RULEID:;SRVR:BN7PR12MB2675;
X-Forefront-PRVS: 0787459938
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(396003)(376002)(366004)(346002)(136003)(39860400002)(189003)(199004)(25786009)(47776003)(86362001)(14444005)(68736007)(66066001)(7736002)(6486002)(53416004)(106356001)(6666003)(5660300001)(3846002)(305945005)(4326008)(6116002)(36756003)(105586002)(26005)(7696005)(50466002)(52116002)(8676002)(11346002)(50226002)(956004)(446003)(2616005)(53936002)(2870700001)(97736004)(23676004)(478600001)(316002)(76176011)(186003)(16526019)(54906003)(81156014)(81166006)(2906002)(44832011)(476003)(15650500001)(386003)(8936002)(486006);DIR:OUT;SFP:1101;SCL:1;SRVR:BN7PR12MB2675;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BBN7PR12MB2675=3B23=3AZ1Jq7d8?=
	=?utf-8?q?tmUfBCRFFEH48S05f/0dyWp/k5QmbWr2EhxkWQUX2K25HuVGT9jPqd0Wo/EeoFNs+?=
	=?utf-8?q?wmbWLvjNIS2krNnyPZip1QYmxzrGK0ey/tRUqbf5lQIp7tjvnC2Ufb7LhFnCFNoDx?=
	=?utf-8?q?26tHP+uifyq6/VPgZS/GiS/i6jtvLCJUyXEdeHaC8kJ2jRaDAqk1HbfwNTMKmQMHo?=
	=?utf-8?q?jJILZaS8NLF8UpQCbVU72WQ36lnNC93g1h4lY/VhxtcJRi1xjaKvX/kw9xwkvhiWc?=
	=?utf-8?q?u0kmA3ckjqkYeNJIy7WZ+OkuC2eiK0VfyOPpt7AXMNWsBhxxAgcsvkkLp+CQkZHYJ?=
	=?utf-8?q?Oa2oWaNtLqvGvCNj5OhQBywqnPOmndZmzooZObz4wu6rB3EmG/dukzNFREAWziS7z?=
	=?utf-8?q?U8sNLlT89RUad+2krmywtgelOfq1Pq81Eagd5AXRBYSqnb760QKWIg/QF6VZQJvjt?=
	=?utf-8?q?scvk+UmJmEiXaSuyivCungsT925Mi0Yl1eHiQO6ds/+/rYAN8GrTRrcFkjanWixQL?=
	=?utf-8?q?AHMIBN62+IUGOlOPk6KJzismoB1cfCqBDHTgDeLLDdcU6vJqHx3TXc7s6F2R1nF6I?=
	=?utf-8?q?0mJlb5C1fN0ng2foX/XsrfcKtGWqtGZs1U4HhK2j80jYH3MiFTzfalOAKaEb7LF2Q?=
	=?utf-8?q?k2uTG+eCGvleqo6o2IqmkucfFTZA/+TYicETaMhacet2ecSCDjbd/9uOdF/oufl67?=
	=?utf-8?q?hfequDS/ekR4ALMNNJ2SbjeVD6egx9ezaQXRWx5FBLuRRh52ImO+DryO9y41lAEKF?=
	=?utf-8?q?FsbkN12EPb5unmp9chd4gBdZQZFjtCPNmy0AoAvHm7e/A15SmBz6F+0tQw+68+APd?=
	=?utf-8?q?shCiNARkb+Js2uVxpOl2ZUVvhMEUFei+ivVh4I8P4byqNHHhxZD33VV/XmetJL2ss?=
	=?utf-8?q?NP9GFFf5JYem7AtmyZ0dHniUrh2GfxP2+yjSyGwwd/a3hCj9Q59S41FnGiAR3qtW8?=
	=?utf-8?q?eMJ+Htzf3cWakJmWLMGDDKwXpHclrGE2h4T7W5RtTG9MDuF6+NMdnAxtVmgQByurw?=
	=?utf-8?q?qD0VCDD16Zd1BlG1GkCU1xBURParH1KjqmUQf62V1UQ5BNV3mY3sFvuTMLyyIgc49?=
	=?utf-8?q?UVIIRS8svKljZksqU5Kl53fovbgYosp/s31zdtPBWSKuhgns5gf1mx6Wb3C8c0OqL?=
	=?utf-8?q?2wPEN7dx/4ihnCZoG4HZ/9osRMe6kEQqAMGCxTfqPzRcZlkn7S01TgVhT4FRg=3D?=
	=?utf-8?q?=3D?=
X-Microsoft-Antispam-Message-Info: 
 Nv9SClGfHVtb1HFiuOzhZSwDZ5MwtEQ4BzRFWSxBDdFr9nibCjHFHrU7TR+DunHYl9fE0kPlLZLYGtKu+8OBK2fBubDqkjwICJ5pdgmnqjJ3ibyzD/nr0Asc4Eh0tLdw9UqlnGJPfuM7Jd1SgYyjC0DleUxlZ9Z1xk0mPMsUtou7UR0XubYCE/f7uVQN//TguYXC4vTRLuPcYIsiTyBdY76S5wHJpQdK8SZ6c+SlDiOiv2tv6pEHlVs+NNqwTo2Yk1Qa7jVTd91W0DhdMsCXMWTcIyTuSEh751geEGctbn9gIMspbRC2EWYiePxe4uiJSFdyfjvqEX4NdjbWCUy9LmmiEsH99Z7vt9WLCOnCjYE=
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;6:s6itTV6gnPe6IZqbB9PNUnTHrToQWEFSHSxZJmACSJwj2dUDbSwb38E0I/Q9UUIZ/Yft2ZruD1uOluT2bKfVu1PNnxX/G07lgQfibQy6odyXTmhUMeyTgDe2KpDR5IiXpoBLu+IODzXf07PjayzJM7efM61ELHxF8S2bphChby68EZ7ZMvutUp5jy1XoYOn5JpoTzRN7jql7KSDViXudk0tlf1zABHmVwCYgGH9+0HadIFtKi3+gccQrM3vuxTjpD/TIabesYcVQ+nvoxGNCLzCI9obfRZzh4kw0mVhqugLalTujkJMBTsCQR2uyC8z6JGI3ZrqNenbdjxE4UJg5dzevfqg5w7+vHX/T636XYOH/ZiWUVcq7kcqp3MhnDxc4NB6K477v8BESnFBz9QeN9rMuP4R4kz6Gnu49RtrLT67jRiM/y2UWXXtKa8/uawdlIRu9DNrs5rhXTlkAmlv0uQ==;5:nbo34QS7ljZQ3iDCyspnPpOv4ZRVBMoJe5ze49IDouTjeliMHBl+qGJNjI3iTHBO4HWKw06KwwKA/GvEsaOoQIJVajCPuwnpgxyLRlVI8EhSHuYwGBdvOmbi1SidDWpy1gA/niyUtTB6n3u8lKSmMbRUp0J39g+H4YBSy+6Ug90=;7:pTZJpUW1AVTRqGqwMy/i9nG5ZASuFcGe+Gn/IzaWlsorpT3d/0mh4QUuom+p9jjGci4oeW1l288rYl5IsM2Amf48iFb9PXrJqMHtu15rM197PoiZChgOJQqn6qihPgJhq4ZfFJLPqJZZmIveFg6U9x3s5aK2nMjt/GOdY4gmK1Mq5X4ek4aQns0+SE8fGWMBY8h/PwHMbyePTVdnYBjjPYx/bTISUxA4WKD4cqxO4lvfNmw+bZugH9rc12uWhoik
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;20:9z0pnxNvzLUHBIB4NZ0a2GluCSuH5XQxukqRZGYEUgQykSZfnnnwLvGlOuhdaEfr2zEU33P+rB5L4QULP56nHgi2rVK2A8+BRY6CRXPHNmUbp2rVvw/w2sVweQTcrmX7HIG9D8SjB9KQ7mMmy4Q6INUjfPHO5ePmfkyd3BDGKV58n6G392/4lifW70uQPiGmFcW4HymZNElxICKE+TLgOmQOR6y0PQoJG5w0B045IqbdJRqF2sSVjcOay7uTS3n5
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 06 Sep 2018 11:43:30.4488 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 27ac7bb2-5019-45bd-5c9e-08d613edf887
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BN7PR12MB2675
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Fix sme_populate_pgd() to update page flags if the PMD/PTE entry
already exists.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: kvm@vger.kernel.org
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/mm/mem_encrypt_identity.c | 6 +-----
 1 file changed, 1 insertion(+), 5 deletions(-)

diff --git a/arch/x86/mm/mem_encrypt_identity.c b/arch/x86/mm/mem_encrypt_identity.c
index 92265d3..7659e65 100644
--- a/arch/x86/mm/mem_encrypt_identity.c
+++ b/arch/x86/mm/mem_encrypt_identity.c
@@ -154,9 +154,6 @@ static void __init sme_populate_pgd_large(struct sme_populate_pgd_data *ppd)
 		return;
 
 	pmd = pmd_offset(pud, ppd->vaddr);
-	if (pmd_large(*pmd))
-		return;
-
 	set_pmd(pmd, __pmd(ppd->paddr | ppd->pmd_flags));
 }
 
@@ -182,8 +179,7 @@ static void __init sme_populate_pgd(struct sme_populate_pgd_data *ppd)
 		return;
 
 	pte = pte_offset_map(pmd, ppd->vaddr);
-	if (pte_none(*pte))
-		set_pte(pte, __pte(ppd->paddr | ppd->pte_flags));
+	set_pte(pte, __pte(ppd->paddr | ppd->pte_flags));
 }
 
 static void __init __sme_map_range_pmd(struct sme_populate_pgd_data *ppd)

From patchwork Thu Sep  6 11:43:00 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10590471
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 053D0921
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 11:43:51 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E86DE2A75A
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 11:43:50 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id DC8D52A75E; Thu,  6 Sep 2018 11:43:50 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EFF782A75A
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 11:43:49 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728084AbeIFQSt (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Thu, 6 Sep 2018 12:18:49 -0400
Received: from mail-bn3nam01on0067.outbound.protection.outlook.com
 ([104.47.33.67]:46448
        "EHLO NAM01-BN3-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727851AbeIFQSr (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 6 Sep 2018 12:18:47 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=1kAZqKdOFTzMMAAeVXWLDFW+lmC15xXpNRUUXTogFWM=;
 b=vd1rqaHfDi1oR3hEtGaNAl4rDizRFxVzxuNVbywfcOLGunqhwN5PPUSusMYEM8GpNd2LE+dy7W+1sv2RNBbMUBGAFBd6h+Y5WomFv5gu5tI8rZbHn81qgrY3mmHvRgds7YhvfGfAE27tBHJ5gndTS7eMJ8QXMzxVsCkYNfjXO2g=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 BN7PR12MB2675.namprd12.prod.outlook.com (2603:10b6:408:29::29) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1101.18; Thu, 6 Sep 2018 11:43:32 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v5 3/5] x86/mm: add .data..decrypted section to hold shared
 variables
Date: Thu,  6 Sep 2018 06:43:00 -0500
Message-Id: <1536234182-2809-4-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1536234182-2809-1-git-send-email-brijesh.singh@amd.com>
References: <1536234182-2809-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: CY4PR03CA0002.namprd03.prod.outlook.com
 (2603:10b6:903:33::12) To BN7PR12MB2675.namprd12.prod.outlook.com
 (2603:10b6:408:29::29)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: b89d0707-b008-45ca-02e1-08d613edf990
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:BN7PR12MB2675;
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;3:vGOcO9Obj8nuAn0DRyNodAR5ICArE0kriN+ovVC7l8BV/Rl6zJU8RxSmaU3H6gYCizVKKxU4CqGxg2+zbUwHG1/piqSWN7oOXDBh+uUC2JLjgYIBF0fASLbjjWzJbZ+20lOAPy5xa5MUiaMULsjd1+s9JgY8THnTAJGUKegFbvK/i4X1Ts4s1YVeoOPduhv8vUk0mgLtrOMnI2wr50hWvVx7Uq03jSKu0Nt9jbyLYJNxH7Q8vb25xHI9S7Zuo+Kj;25:UK/mU+PF/c6DsV4Zgnx5gySGQvM4QJZiB2P8Tulh+T8vU0I6RLbPy0kuZAXEzK9ESle6BpF4lOk/liHWdy/GaI7RheDywmewZm2h3nmn4tc/yfkdQar37yb6m9nBX/NNOBFz3jhcwkmjKQq5iJpgnQy8PQ8jsUUUKgNyhHGOPG3YtWu9PU/pKjxn/yd4/ERLoOOcWYRI7TJWRm6kixX3flGRjY5rX2ku8QqbkdeDBpK22j9IGD8/Q3LZ74vu61Hv8urFgwsHPo8JHApTUELngv80hlPSSOEBtkpBJI3MYUfnhz7Xk6XcAEsOGZ+bMFDyA9a07ETM7EoSR/pFYOxG2g==;31:ul33pe7MlQkt4wKxhCk/EjKYyhDf4n7mPVB6Acrhpk+fi5Kak3nqMd+GwL2NYaSDnN4+YKiywNe3cQK6bg9+KnTCY+X9VSuXKYqWrdYm644XMHVZxlkRVOS6VIpmwJIOPovOpr1pEAPNcglTPG+zx3Ct3DFJ9X+6n7egGgFgTubavwcOYnn5Q+wcAWjD1XWD5MbSdbjPP/extm0HVwjvVx6Oi9HfS9mNXNzPwOvVRcA=
X-MS-TrafficTypeDiagnostic: BN7PR12MB2675:
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;20:sllJnzpxMzTP03/aFS5MexdJRKS2LzVFeT6zg9w6ipTrS6x/R97/l7hqdKcABHzADNmUSHhSzjBwHY2/LpLUIyIfDVrxKxR9343NtPjTI1nMQS/hprywPNqWvBFs2KTHPYu5MXmtP3K5UmMHXGGQHCC5gjJNnQIpscIewylX7u5iYgr9QIo4x3azbeoYdLPp9HKy4oytOHnaKRufikva7/4+5Qal0/S5AQSyIiZjF8c4SKYa1zV/PhA3wJVPl07Li9FXzrBA9TR1IseJULr3ZFnLkJrgOcVgaFR+K+gLu/3uWpX5/CsxnTOvoVWYSA3/tDKywWPw7aGPpYJiyZsZZrQOZzSXoJQzPKlA4SDukmAsnVjIe1XgQBNB0jboRHjG8cu/vf6SGAMgnahl7bh42ecxNaY5/5s7RZsEP0gcuGp3IY6K51xrCsMbcvUa8r0ijYoKDeMcD+w7pbaRqsU4FimSBlw6uo2VMQKvclmyAyCw79JV8HapoW3+KT2duEOJ;4:GZo0dgkFC8UFCrh/CfiYmNqPf+bgN5vkU28CeB6QJlWtbkdV1hL7x3UQg+HNl7RNO09b1J4wSr5Ruj4TWUpv8aPJXSb1QJNbO4l3m5dktKmT+Ofz+4awhmu5HZ8Yl/JlqK4jxKeMWulShoPy//e+jVOQaJRDuEO6gCIZCGJ8zCRE2VsY3M2/Mma/aTJnBLIOBrQ2MtvVpvQ9ejsaH0EwWEWveQJjoIRE5pLx/kCJjEPweNut5XAtGh5SN9m4lH20dygbQ4F9ebpJx182VO6vsmnTAiXmL0os4rGXZP1bF1ff3Xm9wv8V5aQn9RQ+z/jEs5tU0R8EiRe+fbRfiU+hk5yP0D1GHdY4+NsHjSe4VilAmC8gCTYVTLby2AQDWll97fkTO9jVxO8Y8V8twjpGHQ==
X-Microsoft-Antispam-PRVS: 
 <BN7PR12MB267501E26939ADB3EFE79A9FE5010@BN7PR12MB2675.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(163750095850)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(823301075)(3231311)(944501410)(52105095)(93006095)(93001095)(3002001)(10201501046)(6055026)(149027)(150027)(6041310)(20161123560045)(20161123564045)(20161123562045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123558120)(201708071742011)(7699016);SRVR:BN7PR12MB2675;BCL:0;PCL:0;RULEID:;SRVR:BN7PR12MB2675;
X-Forefront-PRVS: 0787459938
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(396003)(376002)(366004)(346002)(136003)(39860400002)(189003)(199004)(25786009)(47776003)(575784001)(86362001)(68736007)(66066001)(7736002)(6486002)(53416004)(106356001)(6666003)(5660300001)(3846002)(305945005)(4326008)(6116002)(36756003)(105586002)(26005)(7696005)(50466002)(52116002)(8676002)(11346002)(50226002)(956004)(446003)(2616005)(53936002)(2870700001)(97736004)(23676004)(478600001)(316002)(76176011)(186003)(16526019)(54906003)(81156014)(81166006)(2906002)(44832011)(476003)(386003)(8936002)(486006)(142923001)(101420200001);DIR:OUT;SFP:1101;SCL:1;SRVR:BN7PR12MB2675;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BBN7PR12MB2675=3B23=3ArPONnK4?=
	=?utf-8?q?+n0F9CjrjQdhEMK+Gtsjg25dBwp87aEcbqUN7IUsBlqGgP+kQboMkHRqUSFKk20iV?=
	=?utf-8?q?+KRldOpDnOEW5C1vQCLO4tSQh+TG3rCXN7pYPFZ0flObZB+8Tn1q+VaSQxFmnrCeI?=
	=?utf-8?q?ksEXubRdenq2UPPqHHN4wwMHEp70KpTEj172tPEDilSKgsaZgsBdDjalxyGYg3ssK?=
	=?utf-8?q?TARS4W+N5pnsSx4P28tXReq7UJso0qwwXPglVwUgQ8kJkA9Xap4bPdW0wtJXdqrLe?=
	=?utf-8?q?LyokErbjanA2A18HVc+s98NytcAZeqgaYm1Wqvj+EBakx83PRWvaYbC30niNIDuOL?=
	=?utf-8?q?07L0/WRa+ccKT1ZM8fiu+/3RKkUBVkfrzJE6qZtAveKy91iRt4RognC5ZKvJWBiT9?=
	=?utf-8?q?Q8mIGz4qUScrINqlTg7Z2oDsIv8VDowQdT3XYlhWx8uVkpl+SbCJ8LzsXUJpRgd5F?=
	=?utf-8?q?krwaGNc1aia2KEynx/PecN5CljjGesuc1oYEo1U85pgVJlAZ0R9SApW7wcYOC5+cP?=
	=?utf-8?q?z7Aqg6xATOcVV/z3c2gCwmPaYKBoMDleJoZA6XEJPOJj4edU76FYFfy41VqMYRdIn?=
	=?utf-8?q?ZZB8kXmzGzMZ7I00ZZDBVo/qqX6RotP+ENZV98zTLjnb8yb45+2LbPdyQ+FYWGmwg?=
	=?utf-8?q?cfZ35KEb5Lqff1l5XhZUmMSsiIZcXR10SQ5YLhWULCNVe4cSLXocoRFctiltT/kHn?=
	=?utf-8?q?wshhOamX3aNkF/JZ6A6ohXh85GCsH5vy/z+lPyINBrixIu9fu18644dGKWa9ALjua?=
	=?utf-8?q?nDohq8JVpjl5I5vqZMhTw5aWE/lHXlVCXIz+Y4gjj7P96s2pPQh2CpVI6awcSPzKw?=
	=?utf-8?q?nrEf7Oi0zpfB3qS6F6xxc6xJ1xeITzGiLR48evFXIIkgnP26b4dw05mwoxidwMD0R?=
	=?utf-8?q?9MpXXws47gHggW0/q94U2KLtHVupRK4Eut79P6KFT5QV9a4XuUcdBq1hpVWpuls1T?=
	=?utf-8?q?V/WWDoKyhrwPtNK/95F1iQdZeZ8gG9qU6aV+48iN21sF2CEpG7NA9JT8hqek1315w?=
	=?utf-8?q?ITQmpZKV/1xupx/gbrK5r9wTubCBhpBQnV7Kfoa8wBYhAnia/qTh3OmoEDUaECY7a?=
	=?utf-8?q?RBPdVqZl8nNfnBC0WAE5obfxLTUPQkS6S2oa730L/NBLznRYwRZ8TYtNjnt+AU0oj?=
	=?utf-8?q?867ck8kQmV25rWlghHA3liGduIso+s/3T/Y8wUoB81w6iEtMS7eDqZR8E/2XFPunS?=
	=?utf-8?q?qt7VagViFO5IN+1bs=3D?=
X-Microsoft-Antispam-Message-Info: 
 KNpEXKLzP8firHxqNvss026GCXhWwPN4NfqJCIDHNaa5FaAXTVBUc4ucjiewLOBgIq2N/Ulr5lbqnipeQyVw23x+0sDfmTzRk6uTxAmUb4eTmQRMzUZ1fjPtm+5a7YZtQQmBcw3UOaVI96WXnKqjYaU+/l1RF4raVOECVhci3G6UBfeSQ2RHC8zsIPHF+bs0GAiAYk9y4eqRX58eqxJGUAYj5Az+0h35uHPJZqOixh03UH8BSj7/aJ6XZviDB3BpRV1kQpnQgZMWSoJFcPpbiIa+DD1Qr0DJ4Asly8W9GqiajOoY7p8d84hpjJLY7O5daZ+8tO+/gCiQcun0+rXFpU6x6Ei8Brnrfj4x8bgjXwk=
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;6:yPoE4w4nQ7wRT3l9Vd9te/aYHsS5bawESZHnpXUfQMusuzvSTyxk8XlkrAakM91DNvR9XAeg+ZpC9T/dw6ATpl3AcBk5dFrZek8IEV9jTL3o0LTzDCc8ed/YaEyQ9RSekd3ReJjg5vZB+ssmisiW7WTJRLRgvEfX3WXFjIz/nqj6uqBew438N/gkohCdYSFW6HMqAetdmyPKgvJcSPi692In2C1/Wqo+Wp5T2o7E49Bb2X1hp2BArohvPvjLQitHZeMySSepIgeLpI8UTy5DYyChPT+owecQ3xlTkBs869id+3ILwX4dZVEVGiGqqqrMdqVHrTPTOiVPp555lEq/Ro1X/ti4tveuV062CP9ZVSSuDnbrMZiExI7zjsj/hbzFL1kDDRA3njruvT2aImXpvHTpyhbd72kg/L5EwED6z3J/OSgYt2Y0ySODhxZhP/2bKTzblU2esdsNEqzFAKsdvQ==;5:u84kre55/lJ0Ksucp5x4eVML/BbB3J/LJ6VsmEaY/aRY7CDVd5sxqUwt52ocZkoScUVynWQaGpjQiver34dfcZsPfUCE/06VcZlUD45IpuKjYpbyZqlTfKDSxygQVh2SIla3qdj+lBYAOFHRzVj1dJB8yIPPnbtidH2dyQzodgk=;7:EJT7cLvxmG4XfxI2v6gAhfPjOLPrrrs5axgE0xeH1IhE3aHya/0YTnKHxUufq1uk1dVQhiFFWcIchHBrzKl2MNHIUapA6G5RufvfdBlDnTblTmDBAq+1rYIdJ4ROe6sErb4YZAAD4GB7dsjYyUCN/coxt9Xtvrih3L4QIq9Tr7WLYbar+Zu4kg1WoHTd1nKKtsiBlpshZhjA3VPGTVEz8zO2XpjXoqcHkitP6n9BOEr+WJz9DyNRIqgwXQFFSBbE
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;20:BwqXIllJwjMhxzokwx9KPLSVsgGjsegYXv+tQTstQFQ6tcyKNstcmb02ws/CYJ2gdUtGPl3YepX8nd1aVeU9GUfTzX4GWdZxdf/jcsJ66cVP7iKcHVo+JlddwgboH94M7LEkqWs8BHwYUZmgRkQuGbti2CQ8qa1EdjOi4gY58f8f/4r96blSA8Xxc6WiVXlm40aduTjI1kk5d90LKCyqQ68+uUHYzegj4OmCJoiu+HJ/IWYziZ2E+eNCGhdZ9W3S
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 06 Sep 2018 11:43:32.1988 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 b89d0707-b008-45ca-02e1-08d613edf990
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BN7PR12MB2675
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

kvmclock defines few static variables which are shared with the
hypervisor during the kvmclock initialization.

When SEV is active, memory is encrypted with a guest-specific key, and
if guest OS wants to share the memory region with hypervisor then it must
clear the C-bit before sharing it. Currently, we use
kernel_physical_mapping_init() to split large pages before clearing the
C-bit on shared pages. But it fails when called from the kvmclock
initialization (mainly because memblock allocator is not ready that early
during boot).

Add a __decrypted section attribute which can be used when defining
such shared variable. The so-defined variables will be placed in the
.data..decrypted section. This section is mapped with C=0 early
during boot, we also ensure that the initialized values are updated
to match with C=0 (i.e perform an in-place decryption). The
.data..decrypted section is PMD-aligned and sized so that we avoid
the need to split the large pages when mapping the section.

The sme_encrypt_kernel() was used to perform the in-place encryption
of the Linux kernel and initrd when SME is active. The routine has been
enhanced to decrypt the .data..decrypted section for both SME and SEV
cases.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: kvm@vger.kernel.org
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/include/asm/mem_encrypt.h |  6 +++
 arch/x86/kernel/head64.c           | 11 +++++
 arch/x86/kernel/vmlinux.lds.S      | 17 +++++++
 arch/x86/mm/mem_encrypt_identity.c | 94 ++++++++++++++++++++++++++++++++------
 4 files changed, 113 insertions(+), 15 deletions(-)

diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h
index c064383..802b2eb 100644
--- a/arch/x86/include/asm/mem_encrypt.h
+++ b/arch/x86/include/asm/mem_encrypt.h
@@ -52,6 +52,8 @@ void __init mem_encrypt_init(void);
 bool sme_active(void);
 bool sev_active(void);
 
+#define __decrypted __attribute__((__section__(".data..decrypted")))
+
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
 #define sme_me_mask	0ULL
@@ -77,6 +79,8 @@ early_set_memory_decrypted(unsigned long vaddr, unsigned long size) { return 0;
 static inline int __init
 early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0; }
 
+#define __decrypted
+
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
 /*
@@ -88,6 +92,8 @@ early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0;
 #define __sme_pa(x)		(__pa(x) | sme_me_mask)
 #define __sme_pa_nodebug(x)	(__pa_nodebug(x) | sme_me_mask)
 
+extern char __start_data_decrypted[], __end_data_decrypted[];
+
 #endif	/* __ASSEMBLY__ */
 
 #endif	/* __X86_MEM_ENCRYPT_H__ */
diff --git a/arch/x86/kernel/head64.c b/arch/x86/kernel/head64.c
index 8047379..af39d68 100644
--- a/arch/x86/kernel/head64.c
+++ b/arch/x86/kernel/head64.c
@@ -112,6 +112,7 @@ static bool __head check_la57_support(unsigned long physaddr)
 unsigned long __head __startup_64(unsigned long physaddr,
 				  struct boot_params *bp)
 {
+	unsigned long vaddr, vaddr_end;
 	unsigned long load_delta, *p;
 	unsigned long pgtable_flags;
 	pgdval_t *pgd;
@@ -234,6 +235,16 @@ unsigned long __head __startup_64(unsigned long physaddr,
 	/* Encrypt the kernel and related (if SME is active) */
 	sme_encrypt_kernel(bp);
 
+	/* Clear the memory encryption mask from the .data..decrypted section. */
+	if (mem_encrypt_active()) {
+		vaddr = (unsigned long)__start_data_decrypted;
+		vaddr_end = (unsigned long)__end_data_decrypted;
+		for (; vaddr < vaddr_end; vaddr += PMD_SIZE) {
+			i = pmd_index(vaddr);
+			pmd[i] -= sme_get_me_mask();
+		}
+	}
+
 	/*
 	 * Return the SME encryption mask (if SME is active) to be used as a
 	 * modifier for the initial pgdir entry programmed into CR3.
diff --git a/arch/x86/kernel/vmlinux.lds.S b/arch/x86/kernel/vmlinux.lds.S
index 8bde0a4..78d3169 100644
--- a/arch/x86/kernel/vmlinux.lds.S
+++ b/arch/x86/kernel/vmlinux.lds.S
@@ -89,6 +89,21 @@ PHDRS {
 	note PT_NOTE FLAGS(0);          /* ___ */
 }
 
+/*
+ * This section contains data which will be mapped as decrypted. Memory
+ * encryption operates on a page basis. Make this section PMD-aligned
+ * to avoid spliting the pages while mapping the section early.
+ *
+ * Note: We use a separate section so that only this section gets
+ * decrypted to avoid exposing more than we wish.
+ */
+#define DATA_DECRYPTED						\
+	. = ALIGN(PMD_SIZE);					\
+	__start_data_decrypted = .;				\
+	*(.data..decrypted);					\
+	. = ALIGN(PMD_SIZE);					\
+	__end_data_decrypted = .;				\
+
 SECTIONS
 {
 #ifdef CONFIG_X86_32
@@ -171,6 +186,8 @@ SECTIONS
 		/* rarely changed data like cpu maps */
 		READ_MOSTLY_DATA(INTERNODE_CACHE_BYTES)
 
+		DATA_DECRYPTED
+
 		/* End of data section */
 		_edata = .;
 	} :data
diff --git a/arch/x86/mm/mem_encrypt_identity.c b/arch/x86/mm/mem_encrypt_identity.c
index 7659e65..08e70ba 100644
--- a/arch/x86/mm/mem_encrypt_identity.c
+++ b/arch/x86/mm/mem_encrypt_identity.c
@@ -51,6 +51,8 @@
 				 (_PAGE_PAT | _PAGE_PWT))
 
 #define PMD_FLAGS_ENC		(PMD_FLAGS_LARGE | _PAGE_ENC)
+#define PMD_FLAGS_ENC_WP	((PMD_FLAGS_ENC & ~_PAGE_CACHE_MASK) | \
+				 (_PAGE_PAT | _PAGE_PWT))
 
 #define PTE_FLAGS		(__PAGE_KERNEL_EXEC & ~_PAGE_GLOBAL)
 
@@ -59,6 +61,8 @@
 				 (_PAGE_PAT | _PAGE_PWT))
 
 #define PTE_FLAGS_ENC		(PTE_FLAGS | _PAGE_ENC)
+#define PTE_FLAGS_ENC_WP	((PTE_FLAGS_ENC & ~_PAGE_CACHE_MASK) | \
+				 (_PAGE_PAT | _PAGE_PWT))
 
 struct sme_populate_pgd_data {
 	void    *pgtable_area;
@@ -231,6 +235,11 @@ static void __init sme_map_range_encrypted(struct sme_populate_pgd_data *ppd)
 	__sme_map_range(ppd, PMD_FLAGS_ENC, PTE_FLAGS_ENC);
 }
 
+static void __init sme_map_range_encrypted_wp(struct sme_populate_pgd_data *ppd)
+{
+	__sme_map_range(ppd, PMD_FLAGS_ENC_WP, PTE_FLAGS_ENC_WP);
+}
+
 static void __init sme_map_range_decrypted(struct sme_populate_pgd_data *ppd)
 {
 	__sme_map_range(ppd, PMD_FLAGS_DEC, PTE_FLAGS_DEC);
@@ -378,7 +387,10 @@ static void __init build_workarea_map(struct boot_params *bp,
 	ppd->paddr = workarea_start;
 	ppd->vaddr = workarea_start;
 	ppd->vaddr_end = workarea_end;
-	sme_map_range_decrypted(ppd);
+	if (sev_active())
+		sme_map_range_encrypted(ppd);
+	else
+		sme_map_range_decrypted(ppd);
 
 	/* Flush the TLB - no globals so cr3 is enough */
 	native_write_cr3(__native_read_cr3());
@@ -435,16 +447,27 @@ static void __init build_workarea_map(struct boot_params *bp,
 		sme_map_range_decrypted_wp(ppd);
 	}
 
-	/* Add decrypted workarea mappings to both kernel mappings */
+	/*
+	 * When SEV is active, kernel is already encrypted hence mapping
+	 * the initial workarea_start as encrypted. When SME is active,
+	 * the kernel is not encrypted hence add decrypted workarea
+	 * mappings to both kernel mappings.
+	 */
 	ppd->paddr = workarea_start;
 	ppd->vaddr = workarea_start;
 	ppd->vaddr_end = workarea_end;
-	sme_map_range_decrypted(ppd);
+	if (sev_active())
+		sme_map_range_encrypted(ppd);
+	else
+		sme_map_range_decrypted(ppd);
 
 	ppd->paddr = workarea_start;
 	ppd->vaddr = workarea_start + decrypted_base;
 	ppd->vaddr_end = workarea_end + decrypted_base;
-	sme_map_range_decrypted(ppd);
+	if (sev_active())
+		sme_map_range_encrypted(ppd);
+	else
+		sme_map_range_decrypted(ppd);
 
 	wa->kernel_start = kernel_start;
 	wa->kernel_end = kernel_end;
@@ -487,28 +510,69 @@ static void __init teardown_workarea_map(struct sme_workarea_data *wa,
 	native_write_cr3(__native_read_cr3());
 }
 
+static void __init decrypt_shared_data(struct sme_workarea_data *wa,
+				       struct sme_populate_pgd_data *ppd)
+{
+	unsigned long decrypted_start, decrypted_end, decrypted_len;
+
+	/* Physical addresses of decrypted data section */
+	decrypted_start = __pa_symbol(__start_data_decrypted);
+	decrypted_end = ALIGN(__pa_symbol(__end_data_decrypted), PMD_PAGE_SIZE);
+	decrypted_len = decrypted_end - decrypted_start;
+
+	if (!decrypted_len)
+		return;
+
+	/* Add decrypted mapping for the section (identity) */
+	ppd->paddr = decrypted_start;
+	ppd->vaddr = decrypted_start;
+	ppd->vaddr_end = decrypted_end;
+	sme_map_range_decrypted(ppd);
+
+	/* Add encrypted-wp mapping for the section (non-identity) */
+	ppd->paddr = decrypted_start;
+	ppd->vaddr = decrypted_start + wa->decrypted_base;
+	ppd->vaddr_end = decrypted_end + wa->decrypted_base;
+	sme_map_range_encrypted_wp(ppd);
+
+	/* Perform in-place decryption */
+	sme_encrypt_execute(decrypted_start,
+			    decrypted_start + wa->decrypted_base,
+			    decrypted_len, wa->workarea_start,
+			    (unsigned long)ppd->pgd);
+
+	ppd->vaddr = decrypted_start + wa->decrypted_base;
+	ppd->vaddr_end = decrypted_end + wa->decrypted_base;
+	sme_clear_pgd(ppd);
+}
+
 void __init sme_encrypt_kernel(struct boot_params *bp)
 {
 	struct sme_populate_pgd_data ppd;
 	struct sme_workarea_data wa;
 
-	if (!sme_active())
+	if (!mem_encrypt_active())
 		return;
 
 	build_workarea_map(bp, &wa, &ppd);
 
-	/* When SEV is active, encrypt kernel and initrd */
-	sme_encrypt_execute(wa.kernel_start,
-			    wa.kernel_start + wa.decrypted_base,
-			    wa.kernel_len, wa.workarea_start,
-			    (unsigned long)ppd.pgd);
-
-	if (wa.initrd_len)
-		sme_encrypt_execute(wa.initrd_start,
-				    wa.initrd_start + wa.decrypted_base,
-				    wa.initrd_len, wa.workarea_start,
+	/* When SME is active, encrypt kernel and initrd */
+	if (sme_active()) {
+		sme_encrypt_execute(wa.kernel_start,
+				    wa.kernel_start + wa.decrypted_base,
+				    wa.kernel_len, wa.workarea_start,
 				    (unsigned long)ppd.pgd);
 
+		if (wa.initrd_len)
+			sme_encrypt_execute(wa.initrd_start,
+					    wa.initrd_start + wa.decrypted_base,
+					    wa.initrd_len, wa.workarea_start,
+					    (unsigned long)ppd.pgd);
+	}
+
+	/* Decrypt the contents of .data..decrypted section */
+	decrypt_shared_data(&wa, &ppd);
+
 	teardown_workarea_map(&wa, &ppd);
 }
 

From patchwork Thu Sep  6 11:43:01 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10590473
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 66B6F13BB
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 11:43:58 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 56B4E2A50E
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 11:43:58 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 4AF0B2A75B; Thu,  6 Sep 2018 11:43:58 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BB9872A50E
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 11:43:57 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728130AbeIFQSy (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Thu, 6 Sep 2018 12:18:54 -0400
Received: from mail-bn3nam01on0067.outbound.protection.outlook.com
 ([104.47.33.67]:46448
        "EHLO NAM01-BN3-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727728AbeIFQSs (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 6 Sep 2018 12:18:48 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=F6NWRmT1MHxuQGpUxYzj4VuHOnSWLDZMxzj86WU5iPI=;
 b=VjZHtN/vRkAqzYjUqDH6rNzxogABhswzWtow2j3GKBGigdyYzqvhojaS++pGfe+9Uub4ezJKi+ED+EWcGNRYaQ/JcoetXIDugSSdvykid/jCvfKuod8E8QMGsgWxjQABcr219X6cfsNO9LDx1USAg5QZBUZrznJe70Ed8XcyDFo=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 BN7PR12MB2675.namprd12.prod.outlook.com (2603:10b6:408:29::29) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1101.18; Thu, 6 Sep 2018 11:43:33 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v5 4/5] x86/kvm: use __decrypted attribute in shared variables
Date: Thu,  6 Sep 2018 06:43:01 -0500
Message-Id: <1536234182-2809-5-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1536234182-2809-1-git-send-email-brijesh.singh@amd.com>
References: <1536234182-2809-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: CY4PR03CA0002.namprd03.prod.outlook.com
 (2603:10b6:903:33::12) To BN7PR12MB2675.namprd12.prod.outlook.com
 (2603:10b6:408:29::29)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 4822186d-8402-4173-d039-08d613edfa9f
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:BN7PR12MB2675;
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;3:WWlbqQwzUDG296BbS6CP6Tm6kS/2LmhvtMAu/vdaQbeULN18kIONxmgUdYbZS+hhNwA1ecOUaCr9zWX6Rb4dQS1OJhd3LYxu9XhPgpS913+4SNSvPRrCpRLj0tAThF1Sw7ts5bcJcRcv0LFge9F1Ud+qvnxBCVEL6NtrXFiNx5QnkCTFNamWv4cWkXX59YsbWMYf9phuYbAmTOxZPxFj8rDY0P34KEw6DMtPT/w8C+NK/bTcTquyAduO18aBqYAG;25:BhpB3AXRm/3s6LS8BOQrUpUP/Ro/douQ6/rTu4D98b84JoqrQC5QkqVvmqI31uPVWHM/5o17vIy8YB1Lg73qQLvHIbG3CACBA9uGl6M7qO++WvEv64LsmXM2hTGozaw+ZSQMkUAB5kbtHa0hR6Uf1Bk5foeqai2XiLDOT/sEEGNKpS4NQd4UwAF4o14HRV+OG213aovVFSDc45oq1YBiXzKwlf7UjXAFOfcRE0Uw6KmBHYjrikVhxnBGDHyRngTHZfAVkVYhBiYDpeD7j9nhmzA9XNt+6xKpjuTjAV4bHTBGem4ePG+92CKKMPo70bkdzLQhpiPKZ/DnU+d5EOlFmg==;31:YC8zSaS2Ya7S3DXi/qPstyrVJSgx+0artopmyBNC91Lic8mPsdLimif/7fwXNYX+YJvkb/9GILvdH5878OGIOSEj9Cx1BKLDwjHyCE0uowB02XKhklWc79SufG/BCj71O2JdoT/wQvpYSSCPZ3or1vFvpGDFaqW0e1BpjT3g4VrA6a0hUrQLFBSKqoF9XdOYxgsFSMPDjnAU2xls1SZp548O1NW9G4FKHkLer+1kzCw=
X-MS-TrafficTypeDiagnostic: BN7PR12MB2675:
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;20:xtwtvNkQ8j84OHMtbjrwQ8mpAuIcBPUHmg4pyQpJxr5kxPlkN0O0lBm2rHpTaMDtOrLf2b9EzrzCf2dNIrBL1k2FVDyNYhf4Qt+O76cUsBE2bUtt144LUboD9yuy1spkNw7zb6eRvI6mzCpMU4WsJ6PxYd9/QuXp1JGDv2PGPJajKimGAI1MfG99PsWhCsRsaBotoNyF9cEEXovwDPiT/p+3FLOtFYfLi0RKBp+cgbXBm+5F9yzAJoKT04rfCNrySQQsCHU3kctPzLpO8SRPEbGlRlZzuucAAyk9xILQTXowC5FWhhSb5gAUMwXfmb2KoMGZAnOGxxOQ51q5dvdDNbjArgPfFhFsCUBKOlH4ZAipt/Ev3Bc6FPIN958V7irUZoTufUTSHK3UUEpLT+NTwwy7edJlVfEdWsVculRfiPMcjjraoVFayapUQWb6cdOAXkZ1Hnfg1IWjKIQqhNjROMkEFuxUAgi6D8z0wjsvbEuJ1nvoe7PBLT3PiMYaIiWt;4:YpH7KuMZyRS1aoTtNRo41o6/CInZ7kFPP+IaMGOWvFrIvUndP+XSEZsK2XAsIW8ijCNQv7XEAuIkUjTVfCy0rdbyKkrUuXHEbdHUYcZyVs0qTKrGE9Jw0kkUmbId3D1Zq9fiDnEWZYqRhU+ynOwOMixr+y1QpfboCDBZd6LGL5xQiKSNAtPQdKE3WenMz3qnKV9Gr++U+gxAne1BXpoT3e9SxwaMC5Wp7mQAQw3yitazFrKaCHACS05+cd/DhAE7QNWndVE8IWgVkO6Fqq/4QdCN7jiW53ajbJOy4vW5S5bzLDMyoAJi8EgXpCdFDPhUsRUbhKP33OPOpT39Urz13unxgmcTzYDMr7yK//yaBqobJfgnVoTiMnIPHdIPNpLN
X-Microsoft-Antispam-PRVS: 
 <BN7PR12MB2675801F1E9013A989275A77E5010@BN7PR12MB2675.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(823301075)(3231311)(944501410)(52105095)(93006095)(93001095)(3002001)(10201501046)(6055026)(149027)(150027)(6041310)(20161123560045)(20161123564045)(20161123562045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123558120)(201708071742011)(7699016);SRVR:BN7PR12MB2675;BCL:0;PCL:0;RULEID:;SRVR:BN7PR12MB2675;
X-Forefront-PRVS: 0787459938
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(979002)(396003)(376002)(366004)(346002)(136003)(39860400002)(189003)(199004)(25786009)(47776003)(86362001)(14444005)(68736007)(66066001)(7736002)(6486002)(53416004)(106356001)(6666003)(5660300001)(3846002)(305945005)(4326008)(6116002)(36756003)(105586002)(26005)(7696005)(50466002)(52116002)(8676002)(11346002)(50226002)(956004)(446003)(2616005)(53936002)(2870700001)(97736004)(23676004)(478600001)(316002)(76176011)(186003)(16526019)(54906003)(81156014)(81166006)(2906002)(44832011)(476003)(386003)(8936002)(486006)(969003)(989001)(999001)(1009001)(1019001);DIR:OUT;SFP:1101;SCL:1;SRVR:BN7PR12MB2675;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BBN7PR12MB2675=3B23=3A0yeZVGM?=
	=?utf-8?q?aH80S92srS9m3o/mYJAn67Lc1e3layKLrsCTSJoubfEvQeuO2C27DWGGKoejqgdlv?=
	=?utf-8?q?saPUVFGbWjW4HyEfSmCnLJSKsHcrkjuuaA5CaHaTEzwIn06Z1hWtgftHfyBA9doX2?=
	=?utf-8?q?V/wGF7f3KiiJfiSs/eV0Urd9SUJy9y8jR1vsthyAux6BAn99aPWYibyuMOjG03gWm?=
	=?utf-8?q?9f4LriP0tO6QmAPdLzup8WwhWx7kIn1M3Q3JjXmGLCxhau0eX7wRXcUprzHlZj9YJ?=
	=?utf-8?q?UVZbvhVWvFWJop+g0k6/s9hsAkth//v78qPO43UOsFo0bbZs+TbV3lUEZl99GfaMz?=
	=?utf-8?q?wNxVA/Dz88IrdYbYrvjjRKqGEYdiglKlRGENjLMaw2GPQmuV5nG8qlSwOzGHFAgc5?=
	=?utf-8?q?FqMWTz7V4JwRcbRgTuyA3VRDGPOT1cWC6WYUVS60m1Eeb34DPAIyIZBE6VIUZKIrg?=
	=?utf-8?q?T630QGcvNCXlkt26eIKGjdkd6jUn7KyXoUc5LUY5rX8MoBb691H21NcJnxPMR/2/o?=
	=?utf-8?q?AbW38kJdjrlAY5SXmKO9zvGu/MKRI7pxE5TuSf3Mc/6Mz2s/S0Uo+62VqtE3l1Lxw?=
	=?utf-8?q?sEh4XOGLqW+cHGoxtFkrtbHhjv/PC19f37rutmUNzgvCerykpZYLu/uPGh9sXNxyn?=
	=?utf-8?q?EWgAM6WOB1QHGhfX2vnzK7ZV7HI1Q4anK8RohhVQBEE4D4B57MhPXH4trqr6+u500?=
	=?utf-8?q?lFM3lWARV8+4d4UtbCSaM6Io3B+Ek7UyCObiRSSqievWIBqTtVxffyQkmmhOn4gHP?=
	=?utf-8?q?LSs4hRBh0tt1e80f4aJw/U+usG74o6V6i4PgjRqYWMCeY6XSGh8dPvToJt15hQfAA?=
	=?utf-8?q?IZW8Tzv1noY4Y1BImt3qHwQmzpHu7hbYlDQMBseVkF2HM35qcmHfoaAyg1zrDvxgA?=
	=?utf-8?q?OpOcF/VR2/xqAdMNet6E8nGyhND3D7p0w1eX9c4niUHn3HWmQL+jJExi++CVz58Rr?=
	=?utf-8?q?jR4mudLlPRkrKukoYLqfiundwsf3tHBE4wC+chjIPG/aQO69W8R2oJpWxWB5Wm0Ye?=
	=?utf-8?q?TtXhR9q5+Vmge4i6j9PRiKMhBNS02ZpLqEwXnNluOzVZB46owISTQDWWmOexVbimi?=
	=?utf-8?q?MbQFraV/EImta0r+NEuN7RSj2PZpS6/Fa1Qj9O/nEtT7ZiDUXSi6iuRS4Sxq3g+sL?=
	=?utf-8?q?9+IOFgzD7rG0dfczD4Z1zt2ORklmdISl9zpYv8tiqFzaAjcOReJj2CPlOQr44o97d?=
	=?utf-8?q?lSSfBW9ik49YogR0w9Ftqi++vviLsPQvTtcQLQrQdiDeTTJt2f5MvoWrg/Og=3D?=
	=?utf-8?q?=3D?=
X-Microsoft-Antispam-Message-Info: 
 AxQUXUlXS9lcjHjRdIDpF/B/Xx5LzLtm3TORqs4s6Ym7C5RdcuyginFFFBR3LsFJRYQpfmaA/jpJWmYJ57OqbIHXwinf1NgYcYBWGB/VDHdU5aSfEsgqDiJrkU3OvB0Fk1j0AnOvo172oUrW9OZ/qnxDT+L37yYVzMf8fzizhCi4WAxnH5tQH7upVjJ40QhHDJWVuMVw/cgrNGN7VNyu74gfn2yOluNmYJ4h5FmfTPRc5M9v29NMO3tYVZz+qixoDEAv4owC6azQ6Y8SMWIGoMJLBdNWf0c9LDU1fg8uDI13vPo1YtY+rYSIwtvoWIvdW+AcDlfB+CJzY46Ak6+3pXXTmAJ2UbTQ4bDaji21Vic=
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;6:g+znywysGNQazeWMWpuzJvE0BFIu0CFO1eDtuGSA587q8iBwiG4P21zq9u9lm2Nmzsa7DDeEr6rDSvsqOntDLfBIt3JYkDoX/ePMMU25pylcs0kHvnMxVkficuLduwB3Fdn7RS43j0xtZziOR+ivvTEK+hOt1uOxB5RdMiTWUR2CphTa2Ow6fCQmfR562gHyEXswgFXQwCXbQWWR7Eqj/8d67WThvw+779NTAfuiCQgDbuXLaIjvfZsCff7CNSBNZ1m4R2AKjM+QaPIiXUFs8MAlKREAo6hbnM4upZ08uxtQpd0JETmPSt86mw6im29Sz5Dz1y/fX2Y2mJs8hn6g1kqF6Ei/AZiXmltq+b/DKi3M17adx2F3fACMzzMMQ1+ziPRMXzyJvz/69S8i0vmpHWQIwhZXS376ifWYCRpz0bvda75G+EeDCAff0rFsja/VAY/uIC0z8RK65yzz2REuaw==;5:caxUnybFGDwLaOm1YHy0aq1Eda7elESc5aUkSfY2iW8mh4k5I2qOgVIuAWJOIytXD7rpzGUTQ4ZyidtozqFeBZ4EYgE3+Je8ZaDFlKQ0FGh+1oSwup0+oMzE5a3zYcqqN+/yrfM78wpLyp5g4xMk05TQgRyBQ1Hz9RXrRNLKUWE=;7:43Xdnbl9E2q6oMHAjTiMlVrMDVoC6Kveq7O3TuKVuD37nZPPZWa6KBPHUbwvGpVkZQqfcxl3lo/jJpks5huTg45A90+cqMKuGX+hjVSQD8Yad5+fOfQrlm6BIOKU9IoEwLDQf5KamsN3+l1UW7bfeAJujNORi671Z2id2u8fij+qCm6aOnP+IBo0Pi+ORP9Io0gi0Nu7wG/pj3Hn9V9WW5Yb1ZXnZY9pMP1xM2CZzgAjPZkaW0DpziVb8YOlTt3L
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;20:mOqQZAMw/nsTWYMl9Bapy1QJJaVtLj/QkuYJCPggrhrsTJf8SIvJnsZMUpzyl7T34U3bgQCquUuaynMkAjGdRyrd5oE7eJhgPyBgoKgnjrE2sU/PF3Yw8d+b45JxWX7JvgMg/Qs7pKOBeHFQBRr8euFQCdBQw2j0IIb0WbOjMqxXMdZQpc1EHZ7trVw+p67Dv2pJ8j+EVOpKUnqTQSLMI+Xlsv4GYG5cYJUroEFDhbLwkyxRXWg3WrYcVz2Z8v1D
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 06 Sep 2018 11:43:33.9801 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 4822186d-8402-4173-d039-08d613edfa9f
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BN7PR12MB2675
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Commit: 368a540e0232 (x86/kvmclock: Remove memblock dependency)
caused SEV guest regression. When SEV is active, we map the shared
variables (wall_clock and hv_clock_boot) with C=0 to ensure that both
the guest and the hypervisor are able to access the data. To map the
variables we use kernel_physical_mapping_init() to split the large pages,
but splitting large pages requires allocating a new PMD, which fails now
that kvmclock initialization is called early during boot.

Recently we added a special .data..decrypted section to hold the shared
variables. This section is mapped with C=0 early during boot. Use
__decrypted attribute to put the wall_clock and hv_clock_boot in
.data..decrypted section so that they are mapped with C=0.

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
Fixes: 368a540e0232 ("x86/kvmclock: Remove memblock dependency")
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: kvm@vger.kernel.org
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/kernel/kvmclock.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/arch/x86/kernel/kvmclock.c b/arch/x86/kernel/kvmclock.c
index 1e67646..376fd3a 100644
--- a/arch/x86/kernel/kvmclock.c
+++ b/arch/x86/kernel/kvmclock.c
@@ -61,8 +61,8 @@ early_param("no-kvmclock-vsyscall", parse_no_kvmclock_vsyscall);
 	(PAGE_SIZE / sizeof(struct pvclock_vsyscall_time_info))
 
 static struct pvclock_vsyscall_time_info
-			hv_clock_boot[HVC_BOOT_ARRAY_SIZE] __aligned(PAGE_SIZE);
-static struct pvclock_wall_clock wall_clock;
+			hv_clock_boot[HVC_BOOT_ARRAY_SIZE] __decrypted __aligned(PAGE_SIZE);
+static struct pvclock_wall_clock wall_clock __decrypted;
 static DEFINE_PER_CPU(struct pvclock_vsyscall_time_info *, hv_clock_per_cpu);
 
 static inline struct pvclock_vcpu_time_info *this_cpu_pvti(void)

From patchwork Thu Sep  6 11:43:02 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Singh, Brijesh" <brijesh.singh@amd.com>
X-Patchwork-Id: 10590475
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 7831A13BB
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 11:44:18 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 66B602A50E
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 11:44:18 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 5B2AC2A75B; Thu,  6 Sep 2018 11:44:18 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9A78A2A50E
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 11:44:17 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728201AbeIFQTB (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Thu, 6 Sep 2018 12:19:01 -0400
Received: from mail-bn3nam01on0077.outbound.protection.outlook.com
 ([104.47.33.77]:63622
        "EHLO NAM01-BN3-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727851AbeIFQSy (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 6 Sep 2018 12:18:54 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=IJyRe1yaUhlJxuOtYFyawnByYZXj5R61zk1BGm3kzY4=;
 b=ht0d8DOvhsxpqj+LG6YPFeGa3Q8RUVMc3K2HRn+ZQgY3/tnTjf5cBtClqA0jNPyxZwww1jJm8WwvJCOoWAOa9b5D/GfEikkSpUIpYbuBE3lwkExNv2kT8ChdTCvehRvi8zhKdDMdCb3epmmxmq1gRPhd5e08SYpOJpgZ6LKCAK4=
Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=brijesh.singh@amd.com;
Received: from sbrijesh-desktop.amd.com (165.204.77.1) by
 BN7PR12MB2675.namprd12.prod.outlook.com (2603:10b6:408:29::29) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1101.18; Thu, 6 Sep 2018 11:43:35 +0000
From: Brijesh Singh <brijesh.singh@amd.com>
To: x86@kernel.org, linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh <brijesh.singh@amd.com>,
 Tom Lendacky <thomas.lendacky@amd.com>, Thomas Gleixner <tglx@linutronix.de>,
 Borislav Petkov <bp@suse.de>, "H. Peter Anvin" <hpa@zytor.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>, =?utf-8?b?UmFkaW0g?=
	=?utf-8?b?S3LEjW3DocWZ?= <rkrcmar@redhat.com>
Subject: [PATCH v5 5/5] x86/kvm: Avoid dynamic allocation of pvclock data when
 SEV is active
Date: Thu,  6 Sep 2018 06:43:02 -0500
Message-Id: <1536234182-2809-6-git-send-email-brijesh.singh@amd.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1536234182-2809-1-git-send-email-brijesh.singh@amd.com>
References: <1536234182-2809-1-git-send-email-brijesh.singh@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: CY4PR03CA0002.namprd03.prod.outlook.com
 (2603:10b6:903:33::12) To BN7PR12MB2675.namprd12.prod.outlook.com
 (2603:10b6:408:29::29)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: ac01797c-670c-4041-d8d2-08d613edfbaa
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: 
 BCL:0;PCL:0;RULEID:(7020095)(4652040)(8989137)(4534165)(4627221)(201703031133081)(201702281549075)(8990107)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:BN7PR12MB2675;
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;3:dUeP52KiRvod9Hucas4LHifegeWrNJXKczApFdE33y0ajXDm09Mzzu0gdOMNWDIf4f/Uzc3K1RLS2autgLPvb8MJHYAAtmt2iR6mD0GAEOyyX3+yQwzf7NxRF3saNqZRYPtrqmF+sJ2DBIGGKJ4ZXOhHdYTas3TB5ZvQ9zGZ/ZSRWgL680lN7WRAt0eSPtgkbsNC0jnJ7qcmDKUsueZZ8Mv7i4urEa6wfDOFgKNodWunq7Xszk1y7hmVoviJHGve;25:LjjNOTloGm03WDokzE51VmFhNYKAORXmEhEpnIAA3FFOIG7zH+VqXWmktX0y1Qr7m4yb62REzgrGGQDu0T+uSlZcH7toUOl6OTllQu54gT92vqItFrh6D29ipkOjeHjBFKznbR92gSS1jlJ061/wdc7/Pl6bd5HaI5Se2pSPqVQuT/sr5MSfv5qxl+AgK2J0YfpIro052yh2hKp6ceYZyNaRQstOhf5CXzZaEE/ub5nrtccuy5lGSkeuNK5wMj9JbspwoaII41LIuPxxW5CWghUNzVeIwemdEgu20pE0BzIJ+1aW1F//0cOtUmeJCizIDW5ta74FQk996wYNvBG//Q==;31:KB1peQnXYuWpsNNHLR9zPlKwRw4Qc//IC61W8YCYTEN34CRUXskxVhJjH9yttk4Au9YXB/HE9IqE3+wn2Zp+L/xqpaWPDCAnJTbQijqQhx3bYFWYBElhNrTMvHcjrZ+yP8aVkTylYPIn89wgNJTwwzHyuJCVSOhDtQxr1BUEimNeXyBj3HGR7A6rxDFzck+gfWHf2fVy4zCpNKSEv1SEIhejHI89qZOmgAm1zKYlp54=
X-MS-TrafficTypeDiagnostic: BN7PR12MB2675:
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;20:50Xke1OMS7Vw7CYS2DXflC+Ej2Cc+wZ+B1Sqdnv8R6kZ/RLgmEUcWBS7UcIYceefWPLPc4yUDw95UD34qDOiU2lFHLzQ+nbGlv6SFt2MBryBxXnIa4u/uAVkIAwJBj3ATIAGjJvSc1QgzrxXlgDWcRZxKgDJpXnMxuXzVRcw/spvrBdK6qhwXIrovIWq4Jfm/Ur+viwFJzIwpvaStDGJtccR95XEvfCSHan58Ebxt5h1o1tBKZrvnteHMqHGc/BsPeRyWAHMXPFb2Qo6vuunu6lHlx7PXrIZa3WaYwOWsWiAmzonvuR5wm6FaBHJNLpH/+QMNJbCm9sDjxGdv49Vut3sI9OHJL85j4OgzegI+1nHWSeNNu6I8aTHYq8zVqCDQvqSBJHinscw9z7+2ml57E0CkKMTBgujuMVyEKcCsKmF1LtwaXMZZVmPcAxBbpmisgMNIL67itAJ8Ae+NH1i1epYkpxJazXa/8tZVCtrXXD2T4Fct/TPjxTj5nTAhLZe;4:ZWRCElpoIPex/w/fLxjfx/4eSC04NYpZGUyD/hJ1Vh0vThsG1GpCc8vu8550lhwnMMVh1VIFhRfs5nq2HAi1mb+J1PbDt/ydVkPJn5/ymf1qhzxKOPZpKc+MOsJd3Eg8g8ARR2/YhbAuzS+5sUZRlofVJjJgdR/mmVlIRam/gVYoAzrMJ+spuKsh+0DRH41P/ZBl9M3g2zNuP+ub2/v7EGCKxh3uk/QzQXk2DBEbCK5XN8yILVpU1PeYmUOurQAvG1wcQ2leJojAeCuYF0ROlKRFWWmwonIhJ/SZCBeH0DOCXFgakCsb5rlHEwcjGh/A1orO51VmICMxN6yTaaBoxtVZeE3vnSSzYpl9qiWUCC9lesUS5holCRhyswRLDxWp
X-Microsoft-Antispam-PRVS: 
 <BN7PR12MB26759F9B7888EA4DB006DEA8E5010@BN7PR12MB2675.namprd12.prod.outlook.com>
X-Exchange-Antispam-Report-Test: 
 UriScan:(9452136761055)(767451399110)(228905959029699);
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: 
 BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(823301075)(3231311)(944501410)(52105095)(93006095)(93001095)(3002001)(10201501046)(6055026)(149027)(150027)(6041310)(20161123560045)(20161123564045)(20161123562045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123558120)(201708071742011)(7699016);SRVR:BN7PR12MB2675;BCL:0;PCL:0;RULEID:;SRVR:BN7PR12MB2675;
X-Forefront-PRVS: 0787459938
X-Forefront-Antispam-Report: 
 SFV:NSPM;SFS:(10009020)(396003)(376002)(366004)(346002)(136003)(39860400002)(189003)(199004)(25786009)(47776003)(86362001)(68736007)(66066001)(7736002)(6486002)(53416004)(106356001)(6666003)(5660300001)(3846002)(305945005)(4326008)(6116002)(36756003)(105586002)(26005)(7696005)(50466002)(52116002)(8676002)(11346002)(50226002)(956004)(446003)(2616005)(53936002)(2870700001)(97736004)(23676004)(478600001)(316002)(76176011)(186003)(16526019)(54906003)(81156014)(81166006)(2906002)(44832011)(476003)(386003)(8936002)(486006);DIR:OUT;SFP:1101;SCL:1;SRVR:BN7PR12MB2675;H:sbrijesh-desktop.amd.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
Received-SPF: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?q?1=3BBN7PR12MB2675=3B23=3Af6C6AEY?=
	=?utf-8?q?tI+TTQYwVw6bguJwWB6YxgHe/y7Cca74qQQxpy1ZMQu2tMiGtNWF+ezk17yzMYl+b?=
	=?utf-8?q?xRe+/ci+3MIFF7kxNJBu8JTH74htqBiKjlr0wi7PoDG9kPJLA/yAQMr9IX6RITgE7?=
	=?utf-8?q?nISHthggpnUQbROEElBsTx5iyOBYLEYdACxTW9VTD4XkB7tFIeVdCIAZmXwnU9+C+?=
	=?utf-8?q?zSHMafNuNTLp472+2jyiBC/Jf2oE8/PFjueENQrygktMukasj21Smb4lwSwLPJlJK?=
	=?utf-8?q?Mf3d64q2WVF8nV+PvES/sNvy7+h0LW4ZE6ctFbNFJb9tL02vWn0bNf5jnVJ6nCRAz?=
	=?utf-8?q?V4xBa5Hjb1lX+OwOKDHyHX8lk885xxn6AfLNCWGiCLQWDmda1R9iVPQU/0POglfv9?=
	=?utf-8?q?ySEhDf9/4BT+VVZ9pn7o0VYcMnfMrcgMpI74Nx4z12n/DUUJUeHNnni5JJttvP5cV?=
	=?utf-8?q?HqhXqEIvp6R5TKqW1aKLDLirtBn05y6RY4J45hwOZIYBdEIEij6Q7tFw9QrULZ8BE?=
	=?utf-8?q?3N2nkhkhZHYY/HW4wTd1pjTR9JVbDpcFos2ucNO3pZqijtxcyXR6O7pGtwX143ExZ?=
	=?utf-8?q?ZZITRYfGk0w2Uae4THN9rZLW3tdlJe6iZUbhub13aidrUjckIDIqQG3Fg0KWOiTZ0?=
	=?utf-8?q?twTO5EecThbjbC0RMVxoD9tSmP8l8h4ptotI8DDEgkImC5BporNnOL1vUl4lGko6k?=
	=?utf-8?q?9QgfJcVAkfdxkgJfm5H9eU4fEdwlOCUP+mJ8qThXqJYX06qJxtYpjvDWIcXGmqRvg?=
	=?utf-8?q?72T+KqIBq/7yR7p2OWruFCLWRO6RuJwfuHAfht3bvMETymiA644h9q+AHmhOMRPX3?=
	=?utf-8?q?uizImZJLIMz9gWlkjIQ5nQKKCpKljP9a8Ojo5Chf5m1XbJCWAlvkNey+sGKDwRbRp?=
	=?utf-8?q?YE6/RQS08EaTbdd4nShetNivPZHSt4tQrGxEHZYPXF5Gpz3jRw9c/bsfBjl2izzrE?=
	=?utf-8?q?iWjz1aBrquprcay73VKISsuvkO9HLgJwHXQTJ5CXdcAOZ10nyf5Izs6yr1MENAHuU?=
	=?utf-8?q?Rf374ZLY0qkbJrhJt+YL0QapmuwdOKdpS9MDedvpbKR/KT+LfoIswg6B/WZhyD1Pm?=
	=?utf-8?q?7/N3IXdVEGl8aXLYqH7eHHglzi4GaG5ETq5iF1cUGO8XnhU1DEjv5LH4nBm31fgaj?=
	=?utf-8?q?liQ0mFUwUmdGbFwC+0=3D?=
X-Microsoft-Antispam-Message-Info: 
 hQ0oZ5XfgEBbxGa+lOOeRf0QweUNK8Uqk7rlVW+pyfG5cy/FxQhGDddWuyLD+YSGQjByIG6ZlB28zHJXxouX/BaXEArfBBv1KJEjt2lY4uJeE7M4ijRtPBO3BGrUC1chrYpSDpw0hE3m5E5ULVUcvxxWusw7hdfvAWRuMIDm7dhr5LJZQbMTkofGYruGuVuF2ZpRDSMK3VC5MXDCbKUgChR/bcRf/fmECofVpIQnOigh83nq0gy/xiIrqrPIEgZtLw24YRZYI0HLs9jfXKcpeS0t8fQCOrS7A4WefSTGpMZouwDpj9VYzzuKcSSzM022KjMDLc2pRvdBocmRMZMaWhKkhWwOXumBSP7S292q+8w=
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;6:2wbrT53AqX94X8YZ4g9R9svETkMw9imAD6IYc4bhUA3/RpoWBQnCDwMj5CMDxcnNIV9hR1odgHd5NyUpG7dQT96+TQWV6tWMILal672ptNUp/FrmgSk2Er/Wcy+zrwrgCGJBtmzrQdNRyeFxACUB6dmYkB+C/w+lWsZWzN6B2ingCMWzCpgwbShtYoU9+nRVQVutEptBx9Ok2wmzGcMukw7qjSwIM/ivazq1g3/NAeBlsrkcsvCxOPqZYLtUJaqnQmwJHL1dGUC7mtY+Z0Mp4msmz9KCdt6NUcNbSs9BTnkMjOOEQAzhU1WQVcvqP1gh9Px/RZigkF7DlO07CV3XhM9L+PmN+4lvbwvkbuVXHMzooSU9+Ehw8xCuOyJdIrwLfDbmMq+Um6qiJiQ5PB9KYPUnlGWnsmXvgO9hmeWEngF0vXeUF4wmiAdTeN0t1qP+mD1j8+jap+a5eHoJ8c6N1g==;5:bUF0c/b7SRUg1QeDlt8TgggMhOMC3FF+b3+ym7uG0Uj6PpJlLqyuPqPvgDAy0U0mkFmqN+S5iNn52KlRU3RQwu3+R6Azu2i8B3elH+4sTUeUcPXQdAr6SRLqQI0EA91TNGQJbnT8pIb4emUtBSMH9T4J4cqyl7NzV3Ur7US0RY8=;7:vhr3IIUhRH/HCEtQJ5b+LltlBtmTZC1rvcndgG6zg5g/ec7iPoMCTGQEgI7gBkLtuBSuDbR4fVoJ4m8vo2PARrWBE4drxq6j59RNvopnBHx5ondXDbMMCuGZZJqxPBCaObYtVhjKDktuVwUdny6Y65aZ1zheQbiEAYkAmezqMpCwMxnxE73dRDyu7+EIJ+vF1DECHe2wc+ep32DTTZ8ihrgEdiSuidV7XV+oHt/Wi4iJT6mBDnFpRYvL+hMZ6TGX
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 
 1;BN7PR12MB2675;20:CC7M1f1SPQiTw98uyBl9d3PGut+REQDywEs7XgTIdDmG9F+2KEgnhnGKFNCfpmeMWE6EZ1lQFfI4FJJNl8djUnG7yVHnn/O1nam5a+AzcmG/xRzNZswSFfAhRK+wYkLgwUNU1/g2XoO9K5Es/r60a6vFRfL0pwWcFdNmC5MxoO6EF2ImPcFc/ee0nFBHMMyAf4zbVk35zx3qxDUSn/AirQfRR+H3XmTBAXU91o+IXXAj+jlIIROWjf1VWvvKr/wE
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 06 Sep 2018 11:43:35.7302 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 ac01797c-670c-4041-d8d2-08d613edfbaa
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BN7PR12MB2675
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Currently, the per-cpu pvclock data is allocated dynamically when
cpu > HVC_BOOT_ARRAY_SIZE. The physical address of this variable is
shared between the guest and the hypervisor hence it must be mapped as
unencrypted (ie. C=0) when SEV is active.

When SEV is active, we will be wasting fairly sizeable amount of memory
since each CPU will be doing a separate 4k allocation so that it can clear
C-bit. Let's define few extra static page sized array of pvclock data.
In the preparatory stage of CPU hotplug, use the element of this static
array to avoid the dynamic allocation. This array will be put in
the .data..decrypted section so that its mapped with C=0 during the boot.

In non-SEV case, this static page will unused and free'd by the
free_decrypted_mem().

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Suggested-by: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: kvm@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Borislav Petkov <bp@suse.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: linux-kernel@vger.kernel.org
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: kvm@vger.kernel.org
Cc: "Radim Krčmář" <rkrcmar@redhat.com>
---
 arch/x86/include/asm/mem_encrypt.h |  4 ++++
 arch/x86/kernel/kvmclock.c         | 22 +++++++++++++++++++---
 arch/x86/kernel/vmlinux.lds.S      |  3 +++
 arch/x86/mm/init.c                 |  3 +++
 arch/x86/mm/mem_encrypt.c          | 10 ++++++++++
 5 files changed, 39 insertions(+), 3 deletions(-)

diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h
index 802b2eb..aa204af 100644
--- a/arch/x86/include/asm/mem_encrypt.h
+++ b/arch/x86/include/asm/mem_encrypt.h
@@ -48,11 +48,13 @@ int __init early_set_memory_encrypted(unsigned long vaddr, unsigned long size);
 
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void);
+void __init free_decrypted_mem(void);
 
 bool sme_active(void);
 bool sev_active(void);
 
 #define __decrypted __attribute__((__section__(".data..decrypted")))
+#define __decrypted_hvclock __attribute__((__section__(".data..decrypted_hvclock")))
 
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
@@ -80,6 +82,7 @@ static inline int __init
 early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0; }
 
 #define __decrypted
+#define __decrypted_hvclock
 
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
@@ -93,6 +96,7 @@ early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0;
 #define __sme_pa_nodebug(x)	(__pa_nodebug(x) | sme_me_mask)
 
 extern char __start_data_decrypted[], __end_data_decrypted[];
+extern char __start_data_decrypted_hvclock[];
 
 #endif	/* __ASSEMBLY__ */
 
diff --git a/arch/x86/kernel/kvmclock.c b/arch/x86/kernel/kvmclock.c
index 376fd3a..5b88773 100644
--- a/arch/x86/kernel/kvmclock.c
+++ b/arch/x86/kernel/kvmclock.c
@@ -65,6 +65,13 @@ static struct pvclock_vsyscall_time_info
 static struct pvclock_wall_clock wall_clock __decrypted;
 static DEFINE_PER_CPU(struct pvclock_vsyscall_time_info *, hv_clock_per_cpu);
 
+
+/* This should cover upto 512 VCPUS (first 64 are covered by hv_clock_boot[]). */
+#define HVC_DECRYPTED_ARRAY_SIZE \
+	((PAGE_SIZE * 7)  / sizeof(struct pvclock_vsyscall_time_info))
+static struct pvclock_vsyscall_time_info
+			hv_clock_dec[HVC_DECRYPTED_ARRAY_SIZE] __decrypted_hvclock;
+
 static inline struct pvclock_vcpu_time_info *this_cpu_pvti(void)
 {
 	return &this_cpu_read(hv_clock_per_cpu)->pvti;
@@ -267,10 +274,19 @@ static int kvmclock_setup_percpu(unsigned int cpu)
 		return 0;
 
 	/* Use the static page for the first CPUs, allocate otherwise */
-	if (cpu < HVC_BOOT_ARRAY_SIZE)
+	if (cpu < HVC_BOOT_ARRAY_SIZE) {
 		p = &hv_clock_boot[cpu];
-	else
-		p = kzalloc(sizeof(*p), GFP_KERNEL);
+	} else {
+		/*
+		 * When SEV is active, use the static pages from
+		 * .data..decrypted_hvclock section. The pages are already
+		 * mapped with C=0.
+		 */
+		if (sev_active())
+			p = &hv_clock_dec[cpu - HVC_BOOT_ARRAY_SIZE];
+		else
+			p = kzalloc(sizeof(*p), GFP_KERNEL);
+	}
 
 	per_cpu(hv_clock_per_cpu, cpu) = p;
 	return p ? 0 : -ENOMEM;
diff --git a/arch/x86/kernel/vmlinux.lds.S b/arch/x86/kernel/vmlinux.lds.S
index 78d3169..1aec291 100644
--- a/arch/x86/kernel/vmlinux.lds.S
+++ b/arch/x86/kernel/vmlinux.lds.S
@@ -101,6 +101,9 @@ PHDRS {
 	. = ALIGN(PMD_SIZE);					\
 	__start_data_decrypted = .;				\
 	*(.data..decrypted);					\
+	. = ALIGN(PAGE_SIZE);					\
+	__start_data_decrypted_hvclock = .;			\
+	*(.data..decrypted_hvclock);				\
 	. = ALIGN(PMD_SIZE);					\
 	__end_data_decrypted = .;				\
 
diff --git a/arch/x86/mm/init.c b/arch/x86/mm/init.c
index 7a8fc26..052b279 100644
--- a/arch/x86/mm/init.c
+++ b/arch/x86/mm/init.c
@@ -815,9 +815,12 @@ void free_kernel_image_pages(void *begin, void *end)
 		set_memory_np_noalias(begin_ul, len_pages);
 }
 
+void __weak free_decrypted_mem(void) { }
+
 void __ref free_initmem(void)
 {
 	e820__reallocate_tables();
+	free_decrypted_mem();
 
 	free_kernel_image_pages(&__init_begin, &__init_end);
 }
diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c
index b2de398..865b1ad 100644
--- a/arch/x86/mm/mem_encrypt.c
+++ b/arch/x86/mm/mem_encrypt.c
@@ -348,6 +348,16 @@ bool sev_active(void)
 EXPORT_SYMBOL(sev_active);
 
 /* Architecture __weak replacement functions */
+void __init free_decrypted_mem(void)
+{
+	if (mem_encrypt_active())
+		return;
+
+	free_init_pages("unused decrypted",
+			(unsigned long)__start_data_decrypted_hvclock,
+			(unsigned long)__end_data_decrypted);
+}
+
 void __init mem_encrypt_init(void)
 {
 	if (!sme_me_mask)
