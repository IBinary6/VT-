From patchwork Thu Sep  6 11:30:48 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: "Wang, Wei W" <wei.w.wang@intel.com>
X-Patchwork-Id: 10590499
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id A4140921
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 12:02:11 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8CE452A766
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 12:02:11 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7F3E62A77D; Thu,  6 Sep 2018 12:02:11 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,MAILING_LIST_MULTI,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 299372A766
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu,  6 Sep 2018 12:02:11 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727427AbeIFQgQ (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Thu, 6 Sep 2018 12:36:16 -0400
Received: from mga18.intel.com ([134.134.136.126]:62802 "EHLO mga18.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726436AbeIFQgQ (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 6 Sep 2018 12:36:16 -0400
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga008.jf.intel.com ([10.7.209.65])
  by orsmga106.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 06 Sep 2018 05:00:49 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.53,338,1531810800";
   d="scan'208";a="71046709"
Received: from devel-ww.sh.intel.com ([10.239.48.110])
  by orsmga008.jf.intel.com with ESMTP; 06 Sep 2018 05:00:47 -0700
From: Wei Wang <wei.w.wang@intel.com>
To: linux-kernel@vger.kernel.org, kvm@vger.kernel.org,
        pbonzini@redhat.com, ak@linux.intel.com
Cc: kan.liang@intel.com, peterz@infradead.org, mingo@redhat.com,
        rkrcmar@redhat.com, like.xu@intel.com, wei.w.wang@intel.com
Subject: [PATCH v2 0/8] Guest LBR Enabling
Date: Thu,  6 Sep 2018 19:30:48 +0800
Message-Id: <1536233456-12173-1-git-send-email-wei.w.wang@intel.com>
X-Mailer: git-send-email 2.7.4
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Last Branch Recording (LBR) is a performance monitor unit (PMU) feature
on Intel CPUs that captures branch related info. This patch series enables
this feature to KVM guests.

Here is a conclusion of the fundamental methods that we use:
1) the LBR feature is enabled per guest via QEMU setting of
   KVM_CAP_X86_GUEST_LBR;
2) when the guest has the LBR feature, the LBR stack is passed through to
   the guest for direct accesses;
3) When the guest uses the LBR feature with the user callstack mode, the
   host will help save/resotre the LBR stack when the vCPU thread is
   scheduled out/in.

Patches 1-5 implements the above 1) and 2), and patches 6-8 implements
the above 3).

ChangeLog:
v1->v2:
    - add the per guest LBR capability, KVM_CAP_X86_GUEST_LBR;
    - save/restore the LBR stack conditionally on the vCPU thread context
      switching, instead of on VMX transitions;
    - expose MSR_IA32_PERF_CAPABILITIES to the guest.

The first version was sent out long time ago, and can be referenced here:
https://lkml.org/lkml/2017/9/25/11 , and thanks for lots of the
suggestions from Paolo Bonzini and Andi Kleen.

Like Xu (2):
  KVM: PMU: support to save/restore the guest lbr stack on vCPU
    switching
  perf/x86/intel/lbr: add the guest_lbr boolean to cpuc

Wei Wang (6):
  perf/x86: add a function to get the lbr stack
  KVM/x86: KVM_CAP_X86_GUEST_LBR
  KVM/vmx: Pass through the lbr stack to a guest
  KVM/x86: expose MSR_IA32_PERF_CAPABILITIES to the guest
  KVM/x86: enable the guest to access the debugctl msr
  perf/x86/intel/lbr: guest requesting KVM for lbr stack save/restore

 arch/x86/events/intel/lbr.c          | 54 +++++++++++++++++++++++++--
 arch/x86/events/perf_event.h         |  1 +
 arch/x86/include/asm/kvm_host.h      |  3 ++
 arch/x86/include/asm/perf_event.h    | 19 ++++++++++
 arch/x86/include/uapi/asm/kvm_para.h |  2 +
 arch/x86/kvm/cpuid.c                 |  5 ++-
 arch/x86/kvm/pmu_intel.c             | 71 +++++++++++++++++++++++++++++++++++-
 arch/x86/kvm/vmx.c                   | 60 ++++++++++++++++++++++++++++++
 arch/x86/kvm/x86.c                   | 18 +++------
 include/uapi/linux/kvm.h             |  1 +
 10 files changed, 215 insertions(+), 19 deletions(-)
