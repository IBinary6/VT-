
\n
static inline void chip_bus_lock(struct irq_desc *desc)
static inline void chip_bus_sync_unlock(struct irq_desc *desc)
static inline struct irq_desc * irq_get_desc_buslock(unsigned int irq, unsigned long *flags, unsigned int check)
static inline void irq_put_desc_busunlock(struct irq_desc *desc, unsigned long flags)
static inline struct irq_desc * irq_get_desc_lock(unsigned int irq, unsigned long *flags, unsigned int check)
static inline void irq_put_desc_unlock(struct irq_desc *desc, unsigned long flags)
static inline unsigned int irqd_get(struct irq_data *d)
static inline void irqd_set_move_pending(struct irq_data *d)
static inline void irqd_clr_move_pending(struct irq_data *d)
static inline void irqd_set_managed_shutdown(struct irq_data *d)
static inline void irqd_clr_managed_shutdown(struct irq_data *d)
static inline void irqd_clear(struct irq_data *d, unsigned int mask)
static inline void irqd_set(struct irq_data *d, unsigned int mask)
static inline bool irqd_has_set(struct irq_data *d, unsigned int mask)
static inline void irq_state_set_disabled(struct irq_desc *desc)
static inline void irq_state_set_masked(struct irq_desc *desc)
static inline void kstat_incr_irqs_this_cpu(struct irq_desc *desc)
static inline int irq_desc_get_node(struct irq_desc *desc)
static inline int irq_desc_is_chained(struct irq_desc *desc)
static inline void irq_remove_timings(struct irq_desc *desc)
static inline void irq_setup_timings(struct irq_desc *desc, struct irqaction *act)
static inline u64 irq_timing_encode(u64 timestamp, int irq)
static inline int irq_timing_decode(u64 value, u64 *timestamp)
static __always_inline void record_irq_time(struct irq_desc *desc)
static inline bool irq_can_move_pcntxt(struct irq_data *data)
static inline bool irq_can_move_pcntxt(struct irq_data *data)
return irqd_can_move_in_process_context(data)
; } static inline bool irq_move_pending(struct irq_data *data)
static inline bool irq_can_move_pcntxt(struct irq_data *data)
return irqd_can_move_in_process_context(data)
; } static inline bool irq_move_pending(struct irq_data *data)
return irqd_is_setaffinity_pending(data)
; } static inline void irq_copy_pending(struct irq_desc *desc, const struct cpumask *mask)
static inline bool irq_can_move_pcntxt(struct irq_data *data)
return irqd_can_move_in_process_context(data)
; } static inline bool irq_move_pending(struct irq_data *data)
return irqd_is_setaffinity_pending(data)
; } static inline void irq_copy_pending(struct irq_desc *desc, const struct cpumask *mask)
cpumask_copy(desc->pending_mask, mask)
; } static inline void irq_get_pending(struct cpumask *mask, struct irq_desc *desc)
static inline bool irq_can_move_pcntxt(struct irq_data *data)
return irqd_can_move_in_process_context(data)
; } static inline bool irq_move_pending(struct irq_data *data)
return irqd_is_setaffinity_pending(data)
; } static inline void irq_copy_pending(struct irq_desc *desc, const struct cpumask *mask)
cpumask_copy(desc->pending_mask, mask)
; } static inline void irq_get_pending(struct cpumask *mask, struct irq_desc *desc)
cpumask_copy(mask, desc->pending_mask)
; } static inline struct cpumask *irq_desc_get_pending_mask(struct irq_desc *desc)
static inline bool irq_can_move_pcntxt(struct irq_data *data)
return irqd_can_move_in_process_context(data)
; } static inline bool irq_move_pending(struct irq_data *data)
return irqd_is_setaffinity_pending(data)
; } static inline void irq_copy_pending(struct irq_desc *desc, const struct cpumask *mask)
cpumask_copy(desc->pending_mask, mask)
; } static inline void irq_get_pending(struct cpumask *mask, struct irq_desc *desc)
cpumask_copy(mask, desc->pending_mask)
; } static inline struct cpumask *irq_desc_get_pending_mask(struct irq_desc *desc)
return desc->pending_mask; } bool irq_fixup_move_pending(struct irq_desc *desc, bool force_clear)
; static inline bool irq_can_move_pcntxt(struct irq_data *data)
static inline bool irq_can_move_pcntxt(struct irq_data *data)
return irqd_can_move_in_process_context(data)
; } static inline bool irq_move_pending(struct irq_data *data)
return irqd_is_setaffinity_pending(data)
; } static inline void irq_copy_pending(struct irq_desc *desc, const struct cpumask *mask)
cpumask_copy(desc->pending_mask, mask)
; } static inline void irq_get_pending(struct cpumask *mask, struct irq_desc *desc)
cpumask_copy(mask, desc->pending_mask)
; } static inline struct cpumask *irq_desc_get_pending_mask(struct irq_desc *desc)
return desc->pending_mask; } bool irq_fixup_move_pending(struct irq_desc *desc, bool force_clear)
; static inline bool irq_can_move_pcntxt(struct irq_data *data)
return true; } static inline bool irq_move_pending(struct irq_data *data)
static inline bool irq_can_move_pcntxt(struct irq_data *data)
return irqd_can_move_in_process_context(data)
; } static inline bool irq_move_pending(struct irq_data *data)
return irqd_is_setaffinity_pending(data)
; } static inline void irq_copy_pending(struct irq_desc *desc, const struct cpumask *mask)
cpumask_copy(desc->pending_mask, mask)
; } static inline void irq_get_pending(struct cpumask *mask, struct irq_desc *desc)
cpumask_copy(mask, desc->pending_mask)
; } static inline struct cpumask *irq_desc_get_pending_mask(struct irq_desc *desc)
return desc->pending_mask; } bool irq_fixup_move_pending(struct irq_desc *desc, bool force_clear)
; static inline bool irq_can_move_pcntxt(struct irq_data *data)
return true; } static inline bool irq_move_pending(struct irq_data *data)
return false; } static inline void irq_copy_pending(struct irq_desc *desc, const struct cpumask *mask)
static inline bool irq_can_move_pcntxt(struct irq_data *data)
return irqd_can_move_in_process_context(data)
; } static inline bool irq_move_pending(struct irq_data *data)
return irqd_is_setaffinity_pending(data)
; } static inline void irq_copy_pending(struct irq_desc *desc, const struct cpumask *mask)
cpumask_copy(desc->pending_mask, mask)
; } static inline void irq_get_pending(struct cpumask *mask, struct irq_desc *desc)
cpumask_copy(mask, desc->pending_mask)
; } static inline struct cpumask *irq_desc_get_pending_mask(struct irq_desc *desc)
return desc->pending_mask; } bool irq_fixup_move_pending(struct irq_desc *desc, bool force_clear)
; static inline bool irq_can_move_pcntxt(struct irq_data *data)
return true; } static inline bool irq_move_pending(struct irq_data *data)
return false; } static inline void irq_copy_pending(struct irq_desc *desc, const struct cpumask *mask)
} static inline void irq_get_pending(struct cpumask *mask, struct irq_desc *desc)
static inline bool irq_can_move_pcntxt(struct irq_data *data)
return irqd_can_move_in_process_context(data)
; } static inline bool irq_move_pending(struct irq_data *data)
return irqd_is_setaffinity_pending(data)
; } static inline void irq_copy_pending(struct irq_desc *desc, const struct cpumask *mask)
cpumask_copy(desc->pending_mask, mask)
; } static inline void irq_get_pending(struct cpumask *mask, struct irq_desc *desc)
cpumask_copy(mask, desc->pending_mask)
; } static inline struct cpumask *irq_desc_get_pending_mask(struct irq_desc *desc)
return desc->pending_mask; } bool irq_fixup_move_pending(struct irq_desc *desc, bool force_clear)
; static inline bool irq_can_move_pcntxt(struct irq_data *data)
return true; } static inline bool irq_move_pending(struct irq_data *data)
return false; } static inline void irq_copy_pending(struct irq_desc *desc, const struct cpumask *mask)
} static inline void irq_get_pending(struct cpumask *mask, struct irq_desc *desc)
} static inline struct cpumask *irq_desc_get_pending_mask(struct irq_desc *desc)
static inline bool irq_can_move_pcntxt(struct irq_data *data)
return irqd_can_move_in_process_context(data)
; } static inline bool irq_move_pending(struct irq_data *data)
return irqd_is_setaffinity_pending(data)
; } static inline void irq_copy_pending(struct irq_desc *desc, const struct cpumask *mask)
cpumask_copy(desc->pending_mask, mask)
; } static inline void irq_get_pending(struct cpumask *mask, struct irq_desc *desc)
cpumask_copy(mask, desc->pending_mask)
; } static inline struct cpumask *irq_desc_get_pending_mask(struct irq_desc *desc)
return desc->pending_mask; } bool irq_fixup_move_pending(struct irq_desc *desc, bool force_clear)
; static inline bool irq_can_move_pcntxt(struct irq_data *data)
return true; } static inline bool irq_move_pending(struct irq_data *data)
return false; } static inline void irq_copy_pending(struct irq_desc *desc, const struct cpumask *mask)
} static inline void irq_get_pending(struct cpumask *mask, struct irq_desc *desc)
} static inline struct cpumask *irq_desc_get_pending_mask(struct irq_desc *desc)
return NULL; } static inline bool irq_fixup_move_pending(struct irq_desc *desc, bool fclear)
static inline int irq_domain_activate_irq(struct irq_data *data, bool reserve)
static inline int irq_domain_activate_irq(struct irq_data *data, bool reserve)
irqd_set_activated(data)
;return 0; } static inline void irq_domain_deactivate_irq(struct irq_data *data)
void irq_add_debugfs_entry(unsigned int irq, struct irq_desc *desc)
; static inline void irq_remove_debugfs_entry(struct irq_desc *desc)
void irq_add_debugfs_entry(unsigned int irq, struct irq_desc *desc)
; static inline void irq_remove_debugfs_entry(struct irq_desc *desc)
debugfs_remove(desc->debugfs_file)
;kfree(desc->dev_name)
; } void irq_debugfs_copy_devname(int irq, struct device *dev)
; ifdef CONFIG_IRQ_DOMAIN void irq_domain_debugfs_init(struct dentry *root)
; else static inline void irq_domain_debugfs_init(struct dentry *root)
void irq_add_debugfs_entry(unsigned int irq, struct irq_desc *desc)
; static inline void irq_remove_debugfs_entry(struct irq_desc *desc)
debugfs_remove(desc->debugfs_file)
;kfree(desc->dev_name)
; } void irq_debugfs_copy_devname(int irq, struct device *dev)
; ifdef CONFIG_IRQ_DOMAIN void irq_domain_debugfs_init(struct dentry *root)
; else static inline void irq_domain_debugfs_init(struct dentry *root)
} endif static inline void irq_add_debugfs_entry(unsigned int irq, struct irq_desc *d)
void irq_add_debugfs_entry(unsigned int irq, struct irq_desc *desc)
; static inline void irq_remove_debugfs_entry(struct irq_desc *desc)
debugfs_remove(desc->debugfs_file)
;kfree(desc->dev_name)
; } void irq_debugfs_copy_devname(int irq, struct device *dev)
; ifdef CONFIG_IRQ_DOMAIN void irq_domain_debugfs_init(struct dentry *root)
; else static inline void irq_domain_debugfs_init(struct dentry *root)
} endif static inline void irq_add_debugfs_entry(unsigned int irq, struct irq_desc *d)
} static inline void irq_remove_debugfs_entry(struct irq_desc *d)
void irq_add_debugfs_entry(unsigned int irq, struct irq_desc *desc)
; static inline void irq_remove_debugfs_entry(struct irq_desc *desc)
debugfs_remove(desc->debugfs_file)
;kfree(desc->dev_name)
; } void irq_debugfs_copy_devname(int irq, struct device *dev)
; ifdef CONFIG_IRQ_DOMAIN void irq_domain_debugfs_init(struct dentry *root)
; else static inline void irq_domain_debugfs_init(struct dentry *root)
} endif static inline void irq_add_debugfs_entry(unsigned int irq, struct irq_desc *d)
} static inline void irq_remove_debugfs_entry(struct irq_desc *d)
} static inline void irq_debugfs_copy_devname(int irq, struct device *dev)
\n
     62 struct irq_desc *desc
     35 struct irq_data *data
     20 data
     15 mask
     15 desc->pending_mask
     13 const struct cpumask *mask
     11 struct cpumask *mask
     10 unsigned int irq
      8 struct irq_data *d
      8 struct dentry *root
      6 int irq
      6 bool force_clear
      5 struct irq_desc *d
      5 struct device *dev
      4 desc->dev_name
      4 desc->debugfs_file
      3 unsigned int mask
      2 unsigned long *flags
      2 unsigned long flags
      2 unsigned int check
      2 bool reserve
      1 u64 value
      1 u64 *timestamp
      1 u64 timestamp
      1 struct irqaction *act
      1 bool fclear
